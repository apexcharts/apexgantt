class ChartContext {
  constructor(containerElement, instanceId) {
    this.injectedStyles = /* @__PURE__ */ new Set();
    this.chartContainer = null;
    this.instanceId = instanceId || Math.random().toString(36).substr(2, 9);
    this.context = this.detectContext(containerElement);
    this.chartContainer = containerElement;
  }
  /**
   * Get the chart-specific container for dialogs and tooltips
   * This ensures elements are positioned relative to the specific chart
   */
  getChartContainer() {
    return this.chartContainer;
  }
  /**
   * Get container for chart-scoped elements (dialogs, tooltips)
   * These should be positioned relative to the chart, not the shadow root
   */
  getChartScopedContainer() {
    if (this.context === document) {
      return document.body || document.getElementsByTagName("body")[0];
    }
    return this.chartContainer || this.context;
  }
  /**
   * Auto-detect if element is inside Shadow DOM
   */
  detectContext(element) {
    const root2 = element.getRootNode();
    return root2 instanceof ShadowRoot ? root2 : document;
  }
  /**
   * Get the current context (Document or ShadowRoot)
   */
  getContext() {
    return this.context;
  }
  /**
   * Get instance ID
   */
  getInstanceId() {
    return this.instanceId;
  }
  /**
   * Check if we're operating in Shadow DOM
   */
  isShadowDOM() {
    return this.context instanceof ShadowRoot;
  }
  // DOM Creation Methods
  createElement(tagName) {
    return document.createElement(tagName);
  }
  createElementNS(namespace, qualifiedName) {
    return document.createElementNS(namespace, qualifiedName);
  }
  createTextNode(data2) {
    return document.createTextNode(data2);
  }
  // DOM Query Methods
  getElementById(id) {
    if (this.context === document) {
      return document.getElementById(id);
    }
    return this.context.querySelector(`#${id}`);
  }
  getElementsByClassName(className) {
    if (this.context === document) {
      return document.getElementsByClassName(className);
    }
    const nodeList = this.context.querySelectorAll(`.${className}`);
    const elements2 = Array.from(nodeList);
    return {
      item: (index) => elements2[index] || null,
      get length() {
        return elements2.length;
      },
      [Symbol.iterator]: () => elements2[Symbol.iterator](),
      ...Object.fromEntries(elements2.map((el, i) => [i, el]))
    };
  }
  querySelector(selector) {
    return this.context.querySelector(selector);
  }
  querySelectorAll(selector) {
    return this.context.querySelectorAll(selector);
  }
  // Container Methods
  getAppendContainer() {
    if (this.context === document) {
      return document.body || document.getElementsByTagName("body")[0];
    }
    return this.context;
  }
  /**
   * Get the bounding rect of the chart container
   * Useful for positioning dialogs within chart bounds
   */
  getChartBounds() {
    var _a;
    return ((_a = this.chartContainer) == null ? void 0 : _a.getBoundingClientRect()) || new DOMRect();
  }
  getBody() {
    if (this.context === document) {
      return document.body || document.getElementsByTagName("body")[0];
    }
    const shadowRoot = this.context;
    return shadowRoot.host;
  }
  // Event Methods
  dispatchEvent(event) {
    if (this.context === document) {
      document.dispatchEvent(event);
    } else {
      this.context.dispatchEvent(event);
    }
  }
  addEventListener(type, listener, options) {
    if (this.context === document) {
      document.addEventListener(type, listener, options);
    } else {
      if (type === "mousemove" || type === "mouseup" || type === "keydown") {
        document.addEventListener(type, listener, options);
      } else {
        this.context.addEventListener(type, listener, options);
      }
    }
  }
  removeEventListener(type, listener, options) {
    if (this.context === document) {
      document.removeEventListener(type, listener, options);
    } else {
      if (type === "mousemove" || type === "mouseup" || type === "keydown") {
        document.removeEventListener(type, listener, options);
      } else {
        this.context.removeEventListener(type, listener, options);
      }
    }
  }
  // Style Management
  injectStyles(styleContent, styleId, options = {}) {
    const { force = false, priority = "normal" } = options;
    if (!force && this.injectedStyles.has(styleId)) {
      return;
    }
    if (force) {
      const existingStyle2 = this.context.querySelector(`#${styleId}`);
      if (existingStyle2) {
        existingStyle2.remove();
        this.injectedStyles.delete(styleId);
      }
    }
    const existingStyle = this.context.querySelector(`#${styleId}`);
    if (existingStyle && !force) {
      this.injectedStyles.add(styleId);
      return;
    }
    const style = document.createElement("style");
    style.id = styleId;
    style.textContent = styleContent;
    if (priority !== "normal") {
      style.setAttribute("data-priority", priority);
    }
    if (this.context === document) {
      document.head.appendChild(style);
    } else {
      const shadowRoot = this.context;
      if (priority === "high") {
        shadowRoot.insertBefore(style, shadowRoot.firstChild);
      } else {
        shadowRoot.appendChild(style);
      }
    }
    this.injectedStyles.add(styleId);
  }
  injectStylesheets(stylesheets) {
    stylesheets.forEach(({ content, id, options }) => {
      this.injectStyles(content, id, options);
    });
  }
  hasInjectedStyles(styleId) {
    return this.injectedStyles.has(styleId);
  }
  removeStyles(styleId) {
    const style = this.context.querySelector(`#${styleId}`);
    if (style) {
      style.remove();
      this.injectedStyles.delete(styleId);
    }
  }
  removeAllStyles() {
    this.injectedStyles.forEach((styleId) => {
      const style = this.context.querySelector(`#${styleId}`);
      if (style) {
        style.remove();
      }
    });
    this.injectedStyles.clear();
  }
  getInjectedStyleIds() {
    return Array.from(this.injectedStyles);
  }
  // Active element getter with context awareness
  getActiveElement() {
    if (this.context === document) {
      return document.activeElement;
    }
    const shadowRoot = this.context;
    return shadowRoot.activeElement || document.activeElement;
  }
  destroy() {
    this.removeAllStyles();
    this.injectedStyles.clear();
  }
}
class BaseChart {
  constructor(element, instanceId) {
    if (!element) {
      throw new Error("Container element is required");
    }
    this.element = element;
    this.chartContext = new ChartContext(element, instanceId);
  }
  /**
   * Get the chart context instance
   */
  getContext() {
    return this.chartContext;
  }
  /**
   * Check if we're in Shadow DOM
   */
  isShadowDOM() {
    return this.chartContext.isShadowDOM();
  }
  /**
   * Get tooltip container appropriate for current DOM context
   */
  getTooltipContainer() {
    return this.chartContext.getAppendContainer();
  }
  /**
   * Inject styles into appropriate context
   */
  injectStyles(styles, styleId) {
    this.chartContext.injectStyles(styles, styleId);
  }
  /**
   * Create element in current context
   */
  createElement(tagName) {
    return this.chartContext.createElement(tagName);
  }
  /**
   * Query selector in current context
   */
  querySelector(selector) {
    return this.chartContext.querySelector(selector);
  }
  /**
   * Add event listener in current context
   */
  addEventListener(type, listener, options) {
    this.chartContext.addEventListener(type, listener, options);
  }
  /**
   * Remove event listener in current context
   */
  removeEventListener(type, listener, options) {
    this.chartContext.removeEventListener(type, listener, options);
  }
  /**
   * Dispatch event in current context
   */
  dispatchEvent(event) {
    this.chartContext.dispatchEvent(event);
  }
  /**
   * Clean up method
   */
  destroy() {
    this.chartContext.destroy();
  }
  /**
   * Get instance ID
   */
  getInstanceId() {
    return this.chartContext.getInstanceId();
  }
}
const _LicenseManager = class _LicenseManager {
  /**
   * Decode license data from encoded string
   * This is a simple base64 + JSON approach - you can make it more sophisticated
   */
  static decodeLicenseData(encodedData) {
    try {
      const decodedString = window.atob(encodedData);
      const data2 = JSON.parse(decodedString);
      if (!data2.issueDate || !data2.expiryDate || !data2.plan) {
        return null;
      }
      return {
        expiryDate: data2.expiryDate,
        issueDate: data2.issueDate,
        plan: data2.plan,
        valid: true
      };
    } catch {
      return null;
    }
  }
  /**
   * Generate a license key (for your internal use)
   * You would use this on your server/admin panel to generate keys for customers
   */
  static generateLicenseKey(issueDate, expiryDate, plan = "standard") {
    const licenseData = {
      expiryDate,
      issueDate,
      plan
    };
    const encodedData = window.btoa(JSON.stringify(licenseData));
    return `APEX-${encodedData}`;
  }
  /**
   * Get current license validation result
   */
  static getLicenseStatus() {
    if (!this.licenseKey) {
      return { expired: false, valid: false };
    }
    if (!this.validationResult) {
      this.validationResult = this.validateLicense(this.licenseKey);
    }
    return this.validationResult;
  }
  /**
   * Check if current license is valid
   */
  static isLicenseValid() {
    if (!this.licenseKey) {
      return false;
    }
    if (!this.validationResult) {
      this.validationResult = this.validateLicense(this.licenseKey);
    }
    return this.validationResult.valid;
  }
  /**
   * Set the global license key
   */
  static setLicense(key) {
    this.licenseKey = key;
    this.validationResult = this.validateLicense(key);
    if (!this.validationResult.valid) {
      console.error(`[Apex] ${this.validationResult.message}`);
    }
  }
  /**
   * Validate license key format and content
   */
  static validateLicense(key) {
    try {
      if (!key.startsWith("APEX-")) {
        return {
          expired: false,
          message: 'Invalid license key format. License key must start with "APEX-".',
          valid: false
        };
      }
      const parts = key.split("-");
      if (parts.length !== 2) {
        return {
          expired: false,
          message: "Invalid license key format. Expected format: APEX-{encoded-data}.",
          valid: false
        };
      }
      const encodedData = parts[1];
      const licenseData = this.decodeLicenseData(encodedData);
      if (!licenseData) {
        return {
          expired: false,
          message: "Invalid license key. Unable to decode license data.",
          valid: false
        };
      }
      const now = /* @__PURE__ */ new Date();
      const expiryDate = new Date(licenseData.expiryDate);
      if (expiryDate < now) {
        return {
          data: licenseData,
          expired: true,
          message: `License expired on ${licenseData.expiryDate}. Please renew your license.`,
          valid: false
        };
      }
      return {
        data: licenseData,
        expired: false,
        valid: true
      };
    } catch {
      return {
        expired: false,
        message: "Invalid license key format or corrupted data.",
        valid: false
      };
    }
  }
};
_LicenseManager.licenseKey = null;
_LicenseManager.validationResult = null;
let LicenseManager = _LicenseManager;
const methods$1 = {};
const names = [];
function registerMethods(name, m) {
  if (Array.isArray(name)) {
    for (const _name of name) {
      registerMethods(_name, m);
    }
    return;
  }
  if (typeof name === "object") {
    for (const _name in name) {
      registerMethods(_name, name[_name]);
    }
    return;
  }
  addMethodNames(Object.getOwnPropertyNames(m));
  methods$1[name] = Object.assign(methods$1[name] || {}, m);
}
function getMethodsFor(name) {
  return methods$1[name] || {};
}
function getMethodNames() {
  return [...new Set(names)];
}
function addMethodNames(_names) {
  names.push(..._names);
}
function map(array2, block) {
  let i;
  const il = array2.length;
  const result = [];
  for (i = 0; i < il; i++) {
    result.push(block(array2[i]));
  }
  return result;
}
function filter(array2, block) {
  let i;
  const il = array2.length;
  const result = [];
  for (i = 0; i < il; i++) {
    if (block(array2[i])) {
      result.push(array2[i]);
    }
  }
  return result;
}
function radians(d) {
  return d % 360 * Math.PI / 180;
}
function unCamelCase(s) {
  return s.replace(/([A-Z])/g, function(m, g) {
    return "-" + g.toLowerCase();
  });
}
function capitalize$1(s) {
  return s.charAt(0).toUpperCase() + s.slice(1);
}
function proportionalSize(element, width2, height2, box) {
  if (width2 == null || height2 == null) {
    box = box || element.bbox();
    if (width2 == null) {
      width2 = box.width / box.height * height2;
    } else if (height2 == null) {
      height2 = box.height / box.width * width2;
    }
  }
  return {
    width: width2,
    height: height2
  };
}
function getOrigin(o, element) {
  const origin = o.origin;
  let ox = o.ox != null ? o.ox : o.originX != null ? o.originX : "center";
  let oy = o.oy != null ? o.oy : o.originY != null ? o.originY : "center";
  if (origin != null) {
    [ox, oy] = Array.isArray(origin) ? origin : typeof origin === "object" ? [origin.x, origin.y] : [origin, origin];
  }
  const condX = typeof ox === "string";
  const condY = typeof oy === "string";
  if (condX || condY) {
    const { height: height2, width: width2, x: x2, y: y2 } = element.bbox();
    if (condX) {
      ox = ox.includes("left") ? x2 : ox.includes("right") ? x2 + width2 : x2 + width2 / 2;
    }
    if (condY) {
      oy = oy.includes("top") ? y2 : oy.includes("bottom") ? y2 + height2 : y2 + height2 / 2;
    }
  }
  return [ox, oy];
}
const descriptiveElements = /* @__PURE__ */ new Set(["desc", "metadata", "title"]);
const isDescriptive = (element) => descriptiveElements.has(element.nodeName);
const writeDataToDom = (element, data2, defaults = {}) => {
  const cloned = { ...data2 };
  for (const key in cloned) {
    if (cloned[key].valueOf() === defaults[key]) {
      delete cloned[key];
    }
  }
  if (Object.keys(cloned).length) {
    element.node.setAttribute("data-svgjs", JSON.stringify(cloned));
  } else {
    element.node.removeAttribute("data-svgjs");
    element.node.removeAttribute("svgjs:data");
  }
};
const svg = "http://www.w3.org/2000/svg";
const html = "http://www.w3.org/1999/xhtml";
const xmlns = "http://www.w3.org/2000/xmlns/";
const xlink = "http://www.w3.org/1999/xlink";
const globals = {
  window: typeof window === "undefined" ? null : window,
  document: typeof document === "undefined" ? null : document
};
function getWindow() {
  return globals.window;
}
class Base {
  // constructor (node/*, {extensions = []} */) {
  //   // this.tags = []
  //   //
  //   // for (let extension of extensions) {
  //   //   extension.setup.call(this, node)
  //   //   this.tags.push(extension.name)
  //   // }
  // }
}
const elements = {};
const root$1 = "___SYMBOL___ROOT___";
function create(name, ns = svg) {
  return globals.document.createElementNS(ns, name);
}
function makeInstance(element, isHTML = false) {
  if (element instanceof Base)
    return element;
  if (typeof element === "object") {
    return adopter(element);
  }
  if (element == null) {
    return new elements[root$1]();
  }
  if (typeof element === "string" && element.charAt(0) !== "<") {
    return adopter(globals.document.querySelector(element));
  }
  const wrapper = isHTML ? globals.document.createElement("div") : create("svg");
  wrapper.innerHTML = element;
  element = adopter(wrapper.firstChild);
  wrapper.removeChild(wrapper.firstChild);
  return element;
}
function nodeOrNew(name, node) {
  return node && (node instanceof globals.window.Node || node.ownerDocument && node instanceof node.ownerDocument.defaultView.Node) ? node : create(name);
}
function adopt(node) {
  if (!node)
    return null;
  if (node.instance instanceof Base)
    return node.instance;
  if (node.nodeName === "#document-fragment") {
    return new elements.Fragment(node);
  }
  let className = capitalize$1(node.nodeName || "Dom");
  if (className === "LinearGradient" || className === "RadialGradient") {
    className = "Gradient";
  } else if (!elements[className]) {
    className = "Dom";
  }
  return new elements[className](node);
}
let adopter = adopt;
function register(element, name = element.name, asRoot = false) {
  elements[name] = element;
  if (asRoot)
    elements[root$1] = element;
  addMethodNames(Object.getOwnPropertyNames(element.prototype));
  return element;
}
function getClass(name) {
  return elements[name];
}
let did = 1e3;
function eid(name) {
  return "Svgjs" + capitalize$1(name) + did++;
}
function assignNewId(node) {
  for (let i = node.children.length - 1; i >= 0; i--) {
    assignNewId(node.children[i]);
  }
  if (node.id) {
    node.id = eid(node.nodeName);
    return node;
  }
  return node;
}
function extend(modules, methods2) {
  let key, i;
  modules = Array.isArray(modules) ? modules : [modules];
  for (i = modules.length - 1; i >= 0; i--) {
    for (key in methods2) {
      modules[i].prototype[key] = methods2[key];
    }
  }
}
function wrapWithAttrCheck(fn) {
  return function(...args) {
    const o = args[args.length - 1];
    if (o && o.constructor === Object && !(o instanceof Array)) {
      return fn.apply(this, args.slice(0, -1)).attr(o);
    } else {
      return fn.apply(this, args);
    }
  };
}
function siblings() {
  return this.parent().children();
}
function position() {
  return this.parent().index(this);
}
function next() {
  return this.siblings()[this.position() + 1];
}
function prev() {
  return this.siblings()[this.position() - 1];
}
function forward() {
  const i = this.position();
  const p = this.parent();
  p.add(this.remove(), i + 1);
  return this;
}
function backward() {
  const i = this.position();
  const p = this.parent();
  p.add(this.remove(), i ? i - 1 : 0);
  return this;
}
function front() {
  const p = this.parent();
  p.add(this.remove());
  return this;
}
function back() {
  const p = this.parent();
  p.add(this.remove(), 0);
  return this;
}
function before(element) {
  element = makeInstance(element);
  element.remove();
  const i = this.position();
  this.parent().add(element, i);
  return this;
}
function after(element) {
  element = makeInstance(element);
  element.remove();
  const i = this.position();
  this.parent().add(element, i + 1);
  return this;
}
function insertBefore(element) {
  element = makeInstance(element);
  element.before(this);
  return this;
}
function insertAfter(element) {
  element = makeInstance(element);
  element.after(this);
  return this;
}
registerMethods("Dom", {
  siblings,
  position,
  next,
  prev,
  forward,
  backward,
  front,
  back,
  before,
  after,
  insertBefore,
  insertAfter
});
const numberAndUnit = /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i;
const hex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;
const rgb = /rgb\((\d+),(\d+),(\d+)\)/;
const reference = /(#[a-z_][a-z0-9\-_]*)/i;
const transforms = /\)\s*,?\s*/;
const whitespace = /\s/g;
const isHex = /^#[a-f0-9]{3}$|^#[a-f0-9]{6}$/i;
const isRgb = /^rgb\(/;
const isBlank = /^(\s+)?$/;
const isNumber = /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
const isImage = /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i;
const delimiter = /[\s,]+/;
const isPathLetter = /[MLHVCSQTAZ]/i;
function classes() {
  const attr2 = this.attr("class");
  return attr2 == null ? [] : attr2.trim().split(delimiter);
}
function hasClass(name) {
  return this.classes().indexOf(name) !== -1;
}
function addClass(name) {
  if (!this.hasClass(name)) {
    const array2 = this.classes();
    array2.push(name);
    this.attr("class", array2.join(" "));
  }
  return this;
}
function removeClass(name) {
  if (this.hasClass(name)) {
    this.attr(
      "class",
      this.classes().filter(function(c) {
        return c !== name;
      }).join(" ")
    );
  }
  return this;
}
function toggleClass(name) {
  return this.hasClass(name) ? this.removeClass(name) : this.addClass(name);
}
registerMethods("Dom", {
  classes,
  hasClass,
  addClass,
  removeClass,
  toggleClass
});
function css(style, val) {
  const ret = {};
  if (arguments.length === 0) {
    this.node.style.cssText.split(/\s*;\s*/).filter(function(el) {
      return !!el.length;
    }).forEach(function(el) {
      const t = el.split(/\s*:\s*/);
      ret[t[0]] = t[1];
    });
    return ret;
  }
  if (arguments.length < 2) {
    if (Array.isArray(style)) {
      for (const name of style) {
        const cased = name;
        ret[name] = this.node.style.getPropertyValue(cased);
      }
      return ret;
    }
    if (typeof style === "string") {
      return this.node.style.getPropertyValue(style);
    }
    if (typeof style === "object") {
      for (const name in style) {
        this.node.style.setProperty(
          name,
          style[name] == null || isBlank.test(style[name]) ? "" : style[name]
        );
      }
    }
  }
  if (arguments.length === 2) {
    this.node.style.setProperty(
      style,
      val == null || isBlank.test(val) ? "" : val
    );
  }
  return this;
}
function show() {
  return this.css("display", "");
}
function hide() {
  return this.css("display", "none");
}
function visible() {
  return this.css("display") !== "none";
}
registerMethods("Dom", {
  css,
  show,
  hide,
  visible
});
function data(a, v, r) {
  if (a == null) {
    return this.data(
      map(
        filter(
          this.node.attributes,
          (el) => el.nodeName.indexOf("data-") === 0
        ),
        (el) => el.nodeName.slice(5)
      )
    );
  } else if (a instanceof Array) {
    const data2 = {};
    for (const key of a) {
      data2[key] = this.data(key);
    }
    return data2;
  } else if (typeof a === "object") {
    for (v in a) {
      this.data(v, a[v]);
    }
  } else if (arguments.length < 2) {
    try {
      return JSON.parse(this.attr("data-" + a));
    } catch (e) {
      return this.attr("data-" + a);
    }
  } else {
    this.attr(
      "data-" + a,
      v === null ? null : r === true || typeof v === "string" || typeof v === "number" ? v : JSON.stringify(v)
    );
  }
  return this;
}
registerMethods("Dom", { data });
function remember(k, v) {
  if (typeof arguments[0] === "object") {
    for (const key in k) {
      this.remember(key, k[key]);
    }
  } else if (arguments.length === 1) {
    return this.memory()[k];
  } else {
    this.memory()[k] = v;
  }
  return this;
}
function forget() {
  if (arguments.length === 0) {
    this._memory = {};
  } else {
    for (let i = arguments.length - 1; i >= 0; i--) {
      delete this.memory()[arguments[i]];
    }
  }
  return this;
}
function memory() {
  return this._memory = this._memory || {};
}
registerMethods("Dom", { remember, forget, memory });
function sixDigitHex(hex2) {
  return hex2.length === 4 ? [
    "#",
    hex2.substring(1, 2),
    hex2.substring(1, 2),
    hex2.substring(2, 3),
    hex2.substring(2, 3),
    hex2.substring(3, 4),
    hex2.substring(3, 4)
  ].join("") : hex2;
}
function componentHex(component) {
  const integer = Math.round(component);
  const bounded = Math.max(0, Math.min(255, integer));
  const hex2 = bounded.toString(16);
  return hex2.length === 1 ? "0" + hex2 : hex2;
}
function is(object, space) {
  for (let i = space.length; i--; ) {
    if (object[space[i]] == null) {
      return false;
    }
  }
  return true;
}
function getParameters(a, b) {
  const params = is(a, "rgb") ? { _a: a.r, _b: a.g, _c: a.b, _d: 0, space: "rgb" } : is(a, "xyz") ? { _a: a.x, _b: a.y, _c: a.z, _d: 0, space: "xyz" } : is(a, "hsl") ? { _a: a.h, _b: a.s, _c: a.l, _d: 0, space: "hsl" } : is(a, "lab") ? { _a: a.l, _b: a.a, _c: a.b, _d: 0, space: "lab" } : is(a, "lch") ? { _a: a.l, _b: a.c, _c: a.h, _d: 0, space: "lch" } : is(a, "cmyk") ? { _a: a.c, _b: a.m, _c: a.y, _d: a.k, space: "cmyk" } : { _a: 0, _b: 0, _c: 0, space: "rgb" };
  params.space = b || params.space;
  return params;
}
function cieSpace(space) {
  if (space === "lab" || space === "xyz" || space === "lch") {
    return true;
  } else {
    return false;
  }
}
function hueToRgb(p, q, t) {
  if (t < 0)
    t += 1;
  if (t > 1)
    t -= 1;
  if (t < 1 / 6)
    return p + (q - p) * 6 * t;
  if (t < 1 / 2)
    return q;
  if (t < 2 / 3)
    return p + (q - p) * (2 / 3 - t) * 6;
  return p;
}
class Color {
  constructor(...inputs) {
    this.init(...inputs);
  }
  // Test if given value is a color
  static isColor(color) {
    return color && (color instanceof Color || this.isRgb(color) || this.test(color));
  }
  // Test if given value is an rgb object
  static isRgb(color) {
    return color && typeof color.r === "number" && typeof color.g === "number" && typeof color.b === "number";
  }
  /*
  Generating random colors
  */
  static random(mode = "vibrant", t) {
    const { random, round, sin, PI: pi } = Math;
    if (mode === "vibrant") {
      const l = (81 - 57) * random() + 57;
      const c = (83 - 45) * random() + 45;
      const h = 360 * random();
      const color = new Color(l, c, h, "lch");
      return color;
    } else if (mode === "sine") {
      t = t == null ? random() : t;
      const r = round(80 * sin(2 * pi * t / 0.5 + 0.01) + 150);
      const g = round(50 * sin(2 * pi * t / 0.5 + 4.6) + 200);
      const b = round(100 * sin(2 * pi * t / 0.5 + 2.3) + 150);
      const color = new Color(r, g, b);
      return color;
    } else if (mode === "pastel") {
      const l = (94 - 86) * random() + 86;
      const c = (26 - 9) * random() + 9;
      const h = 360 * random();
      const color = new Color(l, c, h, "lch");
      return color;
    } else if (mode === "dark") {
      const l = 10 + 10 * random();
      const c = (125 - 75) * random() + 86;
      const h = 360 * random();
      const color = new Color(l, c, h, "lch");
      return color;
    } else if (mode === "rgb") {
      const r = 255 * random();
      const g = 255 * random();
      const b = 255 * random();
      const color = new Color(r, g, b);
      return color;
    } else if (mode === "lab") {
      const l = 100 * random();
      const a = 256 * random() - 128;
      const b = 256 * random() - 128;
      const color = new Color(l, a, b, "lab");
      return color;
    } else if (mode === "grey") {
      const grey = 255 * random();
      const color = new Color(grey, grey, grey);
      return color;
    } else {
      throw new Error("Unsupported random color mode");
    }
  }
  // Test if given value is a color string
  static test(color) {
    return typeof color === "string" && (isHex.test(color) || isRgb.test(color));
  }
  cmyk() {
    const { _a, _b, _c } = this.rgb();
    const [r, g, b] = [_a, _b, _c].map((v) => v / 255);
    const k = Math.min(1 - r, 1 - g, 1 - b);
    if (k === 1) {
      return new Color(0, 0, 0, 1, "cmyk");
    }
    const c = (1 - r - k) / (1 - k);
    const m = (1 - g - k) / (1 - k);
    const y2 = (1 - b - k) / (1 - k);
    const color = new Color(c, m, y2, k, "cmyk");
    return color;
  }
  hsl() {
    const { _a, _b, _c } = this.rgb();
    const [r, g, b] = [_a, _b, _c].map((v) => v / 255);
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    const l = (max + min) / 2;
    const isGrey = max === min;
    const delta = max - min;
    const s = isGrey ? 0 : l > 0.5 ? delta / (2 - max - min) : delta / (max + min);
    const h = isGrey ? 0 : max === r ? ((g - b) / delta + (g < b ? 6 : 0)) / 6 : max === g ? ((b - r) / delta + 2) / 6 : max === b ? ((r - g) / delta + 4) / 6 : 0;
    const color = new Color(360 * h, 100 * s, 100 * l, "hsl");
    return color;
  }
  init(a = 0, b = 0, c = 0, d = 0, space = "rgb") {
    a = !a ? 0 : a;
    if (this.space) {
      for (const component in this.space) {
        delete this[this.space[component]];
      }
    }
    if (typeof a === "number") {
      space = typeof d === "string" ? d : space;
      d = typeof d === "string" ? 0 : d;
      Object.assign(this, { _a: a, _b: b, _c: c, _d: d, space });
    } else if (a instanceof Array) {
      this.space = b || (typeof a[3] === "string" ? a[3] : a[4]) || "rgb";
      Object.assign(this, { _a: a[0], _b: a[1], _c: a[2], _d: a[3] || 0 });
    } else if (a instanceof Object) {
      const values = getParameters(a, b);
      Object.assign(this, values);
    } else if (typeof a === "string") {
      if (isRgb.test(a)) {
        const noWhitespace = a.replace(whitespace, "");
        const [_a2, _b2, _c2] = rgb.exec(noWhitespace).slice(1, 4).map((v) => parseInt(v));
        Object.assign(this, { _a: _a2, _b: _b2, _c: _c2, _d: 0, space: "rgb" });
      } else if (isHex.test(a)) {
        const hexParse = (v) => parseInt(v, 16);
        const [, _a2, _b2, _c2] = hex.exec(sixDigitHex(a)).map(hexParse);
        Object.assign(this, { _a: _a2, _b: _b2, _c: _c2, _d: 0, space: "rgb" });
      } else
        throw Error("Unsupported string format, can't construct Color");
    }
    const { _a, _b, _c, _d } = this;
    const components = this.space === "rgb" ? { r: _a, g: _b, b: _c } : this.space === "xyz" ? { x: _a, y: _b, z: _c } : this.space === "hsl" ? { h: _a, s: _b, l: _c } : this.space === "lab" ? { l: _a, a: _b, b: _c } : this.space === "lch" ? { l: _a, c: _b, h: _c } : this.space === "cmyk" ? { c: _a, m: _b, y: _c, k: _d } : {};
    Object.assign(this, components);
  }
  lab() {
    const { x: x2, y: y2, z } = this.xyz();
    const l = 116 * y2 - 16;
    const a = 500 * (x2 - y2);
    const b = 200 * (y2 - z);
    const color = new Color(l, a, b, "lab");
    return color;
  }
  lch() {
    const { l, a, b } = this.lab();
    const c = Math.sqrt(a ** 2 + b ** 2);
    let h = 180 * Math.atan2(b, a) / Math.PI;
    if (h < 0) {
      h *= -1;
      h = 360 - h;
    }
    const color = new Color(l, c, h, "lch");
    return color;
  }
  /*
  Conversion Methods
  */
  rgb() {
    if (this.space === "rgb") {
      return this;
    } else if (cieSpace(this.space)) {
      let { x: x2, y: y2, z } = this;
      if (this.space === "lab" || this.space === "lch") {
        let { l, a, b: b2 } = this;
        if (this.space === "lch") {
          const { c, h } = this;
          const dToR = Math.PI / 180;
          a = c * Math.cos(dToR * h);
          b2 = c * Math.sin(dToR * h);
        }
        const yL = (l + 16) / 116;
        const xL = a / 500 + yL;
        const zL = yL - b2 / 200;
        const ct = 16 / 116;
        const mx = 8856e-6;
        const nm = 7.787;
        x2 = 0.95047 * (xL ** 3 > mx ? xL ** 3 : (xL - ct) / nm);
        y2 = 1 * (yL ** 3 > mx ? yL ** 3 : (yL - ct) / nm);
        z = 1.08883 * (zL ** 3 > mx ? zL ** 3 : (zL - ct) / nm);
      }
      const rU = x2 * 3.2406 + y2 * -1.5372 + z * -0.4986;
      const gU = x2 * -0.9689 + y2 * 1.8758 + z * 0.0415;
      const bU = x2 * 0.0557 + y2 * -0.204 + z * 1.057;
      const pow = Math.pow;
      const bd = 31308e-7;
      const r = rU > bd ? 1.055 * pow(rU, 1 / 2.4) - 0.055 : 12.92 * rU;
      const g = gU > bd ? 1.055 * pow(gU, 1 / 2.4) - 0.055 : 12.92 * gU;
      const b = bU > bd ? 1.055 * pow(bU, 1 / 2.4) - 0.055 : 12.92 * bU;
      const color = new Color(255 * r, 255 * g, 255 * b);
      return color;
    } else if (this.space === "hsl") {
      let { h, s, l } = this;
      h /= 360;
      s /= 100;
      l /= 100;
      if (s === 0) {
        l *= 255;
        const color2 = new Color(l, l, l);
        return color2;
      }
      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      const p = 2 * l - q;
      const r = 255 * hueToRgb(p, q, h + 1 / 3);
      const g = 255 * hueToRgb(p, q, h);
      const b = 255 * hueToRgb(p, q, h - 1 / 3);
      const color = new Color(r, g, b);
      return color;
    } else if (this.space === "cmyk") {
      const { c, m, y: y2, k } = this;
      const r = 255 * (1 - Math.min(1, c * (1 - k) + k));
      const g = 255 * (1 - Math.min(1, m * (1 - k) + k));
      const b = 255 * (1 - Math.min(1, y2 * (1 - k) + k));
      const color = new Color(r, g, b);
      return color;
    } else {
      return this;
    }
  }
  toArray() {
    const { _a, _b, _c, _d, space } = this;
    return [_a, _b, _c, _d, space];
  }
  toHex() {
    const [r, g, b] = this._clamped().map(componentHex);
    return `#${r}${g}${b}`;
  }
  toRgb() {
    const [rV, gV, bV] = this._clamped();
    const string = `rgb(${rV},${gV},${bV})`;
    return string;
  }
  toString() {
    return this.toHex();
  }
  xyz() {
    const { _a: r255, _b: g255, _c: b255 } = this.rgb();
    const [r, g, b] = [r255, g255, b255].map((v) => v / 255);
    const rL = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    const gL = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    const bL = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    const xU = (rL * 0.4124 + gL * 0.3576 + bL * 0.1805) / 0.95047;
    const yU = (rL * 0.2126 + gL * 0.7152 + bL * 0.0722) / 1;
    const zU = (rL * 0.0193 + gL * 0.1192 + bL * 0.9505) / 1.08883;
    const x2 = xU > 8856e-6 ? Math.pow(xU, 1 / 3) : 7.787 * xU + 16 / 116;
    const y2 = yU > 8856e-6 ? Math.pow(yU, 1 / 3) : 7.787 * yU + 16 / 116;
    const z = zU > 8856e-6 ? Math.pow(zU, 1 / 3) : 7.787 * zU + 16 / 116;
    const color = new Color(x2, y2, z, "xyz");
    return color;
  }
  /*
  Input and Output methods
  */
  _clamped() {
    const { _a, _b, _c } = this.rgb();
    const { max, min, round } = Math;
    const format = (v) => max(0, min(round(v), 255));
    return [_a, _b, _c].map(format);
  }
  /*
  Constructing colors
  */
}
class Point {
  // Initialize
  constructor(...args) {
    this.init(...args);
  }
  // Clone point
  clone() {
    return new Point(this);
  }
  init(x2, y2) {
    const base = { x: 0, y: 0 };
    const source = Array.isArray(x2) ? { x: x2[0], y: x2[1] } : typeof x2 === "object" ? { x: x2.x, y: x2.y } : { x: x2, y: y2 };
    this.x = source.x == null ? base.x : source.x;
    this.y = source.y == null ? base.y : source.y;
    return this;
  }
  toArray() {
    return [this.x, this.y];
  }
  transform(m) {
    return this.clone().transformO(m);
  }
  // Transform point with matrix
  transformO(m) {
    if (!Matrix.isMatrixLike(m)) {
      m = new Matrix(m);
    }
    const { x: x2, y: y2 } = this;
    this.x = m.a * x2 + m.c * y2 + m.e;
    this.y = m.b * x2 + m.d * y2 + m.f;
    return this;
  }
}
function point(x2, y2) {
  return new Point(x2, y2).transformO(this.screenCTM().inverseO());
}
function closeEnough(a, b, threshold) {
  return Math.abs(b - a) < 1e-6;
}
class Matrix {
  constructor(...args) {
    this.init(...args);
  }
  static formatTransforms(o) {
    const flipBoth = o.flip === "both" || o.flip === true;
    const flipX = o.flip && (flipBoth || o.flip === "x") ? -1 : 1;
    const flipY = o.flip && (flipBoth || o.flip === "y") ? -1 : 1;
    const skewX = o.skew && o.skew.length ? o.skew[0] : isFinite(o.skew) ? o.skew : isFinite(o.skewX) ? o.skewX : 0;
    const skewY = o.skew && o.skew.length ? o.skew[1] : isFinite(o.skew) ? o.skew : isFinite(o.skewY) ? o.skewY : 0;
    const scaleX = o.scale && o.scale.length ? o.scale[0] * flipX : isFinite(o.scale) ? o.scale * flipX : isFinite(o.scaleX) ? o.scaleX * flipX : flipX;
    const scaleY = o.scale && o.scale.length ? o.scale[1] * flipY : isFinite(o.scale) ? o.scale * flipY : isFinite(o.scaleY) ? o.scaleY * flipY : flipY;
    const shear = o.shear || 0;
    const theta = o.rotate || o.theta || 0;
    const origin = new Point(
      o.origin || o.around || o.ox || o.originX,
      o.oy || o.originY
    );
    const ox = origin.x;
    const oy = origin.y;
    const position2 = new Point(
      o.position || o.px || o.positionX || NaN,
      o.py || o.positionY || NaN
    );
    const px = position2.x;
    const py = position2.y;
    const translate = new Point(
      o.translate || o.tx || o.translateX,
      o.ty || o.translateY
    );
    const tx = translate.x;
    const ty = translate.y;
    const relative = new Point(
      o.relative || o.rx || o.relativeX,
      o.ry || o.relativeY
    );
    const rx2 = relative.x;
    const ry2 = relative.y;
    return {
      scaleX,
      scaleY,
      skewX,
      skewY,
      shear,
      theta,
      rx: rx2,
      ry: ry2,
      tx,
      ty,
      ox,
      oy,
      px,
      py
    };
  }
  static fromArray(a) {
    return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] };
  }
  static isMatrixLike(o) {
    return o.a != null || o.b != null || o.c != null || o.d != null || o.e != null || o.f != null;
  }
  // left matrix, right matrix, target matrix which is overwritten
  static matrixMultiply(l, r, o) {
    const a = l.a * r.a + l.c * r.b;
    const b = l.b * r.a + l.d * r.b;
    const c = l.a * r.c + l.c * r.d;
    const d = l.b * r.c + l.d * r.d;
    const e = l.e + l.a * r.e + l.c * r.f;
    const f = l.f + l.b * r.e + l.d * r.f;
    o.a = a;
    o.b = b;
    o.c = c;
    o.d = d;
    o.e = e;
    o.f = f;
    return o;
  }
  around(cx2, cy2, matrix) {
    return this.clone().aroundO(cx2, cy2, matrix);
  }
  // Transform around a center point
  aroundO(cx2, cy2, matrix) {
    const dx2 = cx2 || 0;
    const dy2 = cy2 || 0;
    return this.translateO(-dx2, -dy2).lmultiplyO(matrix).translateO(dx2, dy2);
  }
  // Clones this matrix
  clone() {
    return new Matrix(this);
  }
  // Decomposes this matrix into its affine parameters
  decompose(cx2 = 0, cy2 = 0) {
    const a = this.a;
    const b = this.b;
    const c = this.c;
    const d = this.d;
    const e = this.e;
    const f = this.f;
    const determinant = a * d - b * c;
    const ccw = determinant > 0 ? 1 : -1;
    const sx = ccw * Math.sqrt(a * a + b * b);
    const thetaRad = Math.atan2(ccw * b, ccw * a);
    const theta = 180 / Math.PI * thetaRad;
    const ct = Math.cos(thetaRad);
    const st = Math.sin(thetaRad);
    const lam = (a * c + b * d) / determinant;
    const sy = c * sx / (lam * a - b) || d * sx / (lam * b + a);
    const tx = e - cx2 + cx2 * ct * sx + cy2 * (lam * ct * sx - st * sy);
    const ty = f - cy2 + cx2 * st * sx + cy2 * (lam * st * sx + ct * sy);
    return {
      // Return the affine parameters
      scaleX: sx,
      scaleY: sy,
      shear: lam,
      rotate: theta,
      translateX: tx,
      translateY: ty,
      originX: cx2,
      originY: cy2,
      // Return the matrix parameters
      a: this.a,
      b: this.b,
      c: this.c,
      d: this.d,
      e: this.e,
      f: this.f
    };
  }
  // Check if two matrices are equal
  equals(other) {
    if (other === this)
      return true;
    const comp = new Matrix(other);
    return closeEnough(this.a, comp.a) && closeEnough(this.b, comp.b) && closeEnough(this.c, comp.c) && closeEnough(this.d, comp.d) && closeEnough(this.e, comp.e) && closeEnough(this.f, comp.f);
  }
  // Flip matrix on x or y, at a given offset
  flip(axis, around) {
    return this.clone().flipO(axis, around);
  }
  flipO(axis, around) {
    return axis === "x" ? this.scaleO(-1, 1, around, 0) : axis === "y" ? this.scaleO(1, -1, 0, around) : this.scaleO(-1, -1, axis, around || axis);
  }
  // Initialize
  init(source) {
    const base = Matrix.fromArray([1, 0, 0, 1, 0, 0]);
    source = source instanceof Element ? source.matrixify() : typeof source === "string" ? Matrix.fromArray(source.split(delimiter).map(parseFloat)) : Array.isArray(source) ? Matrix.fromArray(source) : typeof source === "object" && Matrix.isMatrixLike(source) ? source : typeof source === "object" ? new Matrix().transform(source) : arguments.length === 6 ? Matrix.fromArray([].slice.call(arguments)) : base;
    this.a = source.a != null ? source.a : base.a;
    this.b = source.b != null ? source.b : base.b;
    this.c = source.c != null ? source.c : base.c;
    this.d = source.d != null ? source.d : base.d;
    this.e = source.e != null ? source.e : base.e;
    this.f = source.f != null ? source.f : base.f;
    return this;
  }
  inverse() {
    return this.clone().inverseO();
  }
  // Inverses matrix
  inverseO() {
    const a = this.a;
    const b = this.b;
    const c = this.c;
    const d = this.d;
    const e = this.e;
    const f = this.f;
    const det = a * d - b * c;
    if (!det)
      throw new Error("Cannot invert " + this);
    const na = d / det;
    const nb = -b / det;
    const nc = -c / det;
    const nd = a / det;
    const ne = -(na * e + nc * f);
    const nf = -(nb * e + nd * f);
    this.a = na;
    this.b = nb;
    this.c = nc;
    this.d = nd;
    this.e = ne;
    this.f = nf;
    return this;
  }
  lmultiply(matrix) {
    return this.clone().lmultiplyO(matrix);
  }
  lmultiplyO(matrix) {
    const r = this;
    const l = matrix instanceof Matrix ? matrix : new Matrix(matrix);
    return Matrix.matrixMultiply(l, r, this);
  }
  // Left multiplies by the given matrix
  multiply(matrix) {
    return this.clone().multiplyO(matrix);
  }
  multiplyO(matrix) {
    const l = this;
    const r = matrix instanceof Matrix ? matrix : new Matrix(matrix);
    return Matrix.matrixMultiply(l, r, this);
  }
  // Rotate matrix
  rotate(r, cx2, cy2) {
    return this.clone().rotateO(r, cx2, cy2);
  }
  rotateO(r, cx2 = 0, cy2 = 0) {
    r = radians(r);
    const cos = Math.cos(r);
    const sin = Math.sin(r);
    const { a, b, c, d, e, f } = this;
    this.a = a * cos - b * sin;
    this.b = b * cos + a * sin;
    this.c = c * cos - d * sin;
    this.d = d * cos + c * sin;
    this.e = e * cos - f * sin + cy2 * sin - cx2 * cos + cx2;
    this.f = f * cos + e * sin - cx2 * sin - cy2 * cos + cy2;
    return this;
  }
  // Scale matrix
  scale() {
    return this.clone().scaleO(...arguments);
  }
  scaleO(x2, y2 = x2, cx2 = 0, cy2 = 0) {
    if (arguments.length === 3) {
      cy2 = cx2;
      cx2 = y2;
      y2 = x2;
    }
    const { a, b, c, d, e, f } = this;
    this.a = a * x2;
    this.b = b * y2;
    this.c = c * x2;
    this.d = d * y2;
    this.e = e * x2 - cx2 * x2 + cx2;
    this.f = f * y2 - cy2 * y2 + cy2;
    return this;
  }
  // Shear matrix
  shear(a, cx2, cy2) {
    return this.clone().shearO(a, cx2, cy2);
  }
  // eslint-disable-next-line no-unused-vars
  shearO(lx, cx2 = 0, cy2 = 0) {
    const { a, b, c, d, e, f } = this;
    this.a = a + b * lx;
    this.c = c + d * lx;
    this.e = e + f * lx - cy2 * lx;
    return this;
  }
  // Skew Matrix
  skew() {
    return this.clone().skewO(...arguments);
  }
  skewO(x2, y2 = x2, cx2 = 0, cy2 = 0) {
    if (arguments.length === 3) {
      cy2 = cx2;
      cx2 = y2;
      y2 = x2;
    }
    x2 = radians(x2);
    y2 = radians(y2);
    const lx = Math.tan(x2);
    const ly = Math.tan(y2);
    const { a, b, c, d, e, f } = this;
    this.a = a + b * lx;
    this.b = b + a * ly;
    this.c = c + d * lx;
    this.d = d + c * ly;
    this.e = e + f * lx - cy2 * lx;
    this.f = f + e * ly - cx2 * ly;
    return this;
  }
  // SkewX
  skewX(x2, cx2, cy2) {
    return this.skew(x2, 0, cx2, cy2);
  }
  // SkewY
  skewY(y2, cx2, cy2) {
    return this.skew(0, y2, cx2, cy2);
  }
  toArray() {
    return [this.a, this.b, this.c, this.d, this.e, this.f];
  }
  // Convert matrix to string
  toString() {
    return "matrix(" + this.a + "," + this.b + "," + this.c + "," + this.d + "," + this.e + "," + this.f + ")";
  }
  // Transform a matrix into another matrix by manipulating the space
  transform(o) {
    if (Matrix.isMatrixLike(o)) {
      const matrix = new Matrix(o);
      return matrix.multiplyO(this);
    }
    const t = Matrix.formatTransforms(o);
    const current = this;
    const { x: ox, y: oy } = new Point(t.ox, t.oy).transform(current);
    const transformer = new Matrix().translateO(t.rx, t.ry).lmultiplyO(current).translateO(-ox, -oy).scaleO(t.scaleX, t.scaleY).skewO(t.skewX, t.skewY).shearO(t.shear).rotateO(t.theta).translateO(ox, oy);
    if (isFinite(t.px) || isFinite(t.py)) {
      const origin = new Point(ox, oy).transform(transformer);
      const dx2 = isFinite(t.px) ? t.px - origin.x : 0;
      const dy2 = isFinite(t.py) ? t.py - origin.y : 0;
      transformer.translateO(dx2, dy2);
    }
    transformer.translateO(t.tx, t.ty);
    return transformer;
  }
  // Translate matrix
  translate(x2, y2) {
    return this.clone().translateO(x2, y2);
  }
  translateO(x2, y2) {
    this.e += x2 || 0;
    this.f += y2 || 0;
    return this;
  }
  valueOf() {
    return {
      a: this.a,
      b: this.b,
      c: this.c,
      d: this.d,
      e: this.e,
      f: this.f
    };
  }
}
function ctm() {
  return new Matrix(this.node.getCTM());
}
function screenCTM() {
  try {
    if (typeof this.isRoot === "function" && !this.isRoot()) {
      const rect = this.rect(1, 1);
      const m = rect.node.getScreenCTM();
      rect.remove();
      return new Matrix(m);
    }
    return new Matrix(this.node.getScreenCTM());
  } catch (e) {
    console.warn(
      `Cannot get CTM from SVG node ${this.node.nodeName}. Is the element rendered?`
    );
    return new Matrix();
  }
}
register(Matrix, "Matrix");
function parser() {
  if (!parser.nodes) {
    const svg2 = makeInstance().size(2, 0);
    svg2.node.style.cssText = [
      "opacity: 0",
      "position: absolute",
      "left: -100%",
      "top: -100%",
      "overflow: hidden"
    ].join(";");
    svg2.attr("focusable", "false");
    svg2.attr("aria-hidden", "true");
    const path = svg2.path().node;
    parser.nodes = { svg: svg2, path };
  }
  if (!parser.nodes.svg.node.parentNode) {
    const b = globals.document.body || globals.document.documentElement;
    parser.nodes.svg.addTo(b);
  }
  return parser.nodes;
}
function isNulledBox(box) {
  return !box.width && !box.height && !box.x && !box.y;
}
function domContains(node) {
  return node === globals.document || (globals.document.documentElement.contains || function(node2) {
    while (node2.parentNode) {
      node2 = node2.parentNode;
    }
    return node2 === globals.document;
  }).call(globals.document.documentElement, node);
}
class Box {
  constructor(...args) {
    this.init(...args);
  }
  addOffset() {
    this.x += globals.window.pageXOffset;
    this.y += globals.window.pageYOffset;
    return new Box(this);
  }
  init(source) {
    const base = [0, 0, 0, 0];
    source = typeof source === "string" ? source.split(delimiter).map(parseFloat) : Array.isArray(source) ? source : typeof source === "object" ? [
      source.left != null ? source.left : source.x,
      source.top != null ? source.top : source.y,
      source.width,
      source.height
    ] : arguments.length === 4 ? [].slice.call(arguments) : base;
    this.x = source[0] || 0;
    this.y = source[1] || 0;
    this.width = this.w = source[2] || 0;
    this.height = this.h = source[3] || 0;
    this.x2 = this.x + this.w;
    this.y2 = this.y + this.h;
    this.cx = this.x + this.w / 2;
    this.cy = this.y + this.h / 2;
    return this;
  }
  isNulled() {
    return isNulledBox(this);
  }
  // Merge rect box with another, return a new instance
  merge(box) {
    const x2 = Math.min(this.x, box.x);
    const y2 = Math.min(this.y, box.y);
    const width2 = Math.max(this.x + this.width, box.x + box.width) - x2;
    const height2 = Math.max(this.y + this.height, box.y + box.height) - y2;
    return new Box(x2, y2, width2, height2);
  }
  toArray() {
    return [this.x, this.y, this.width, this.height];
  }
  toString() {
    return this.x + " " + this.y + " " + this.width + " " + this.height;
  }
  transform(m) {
    if (!(m instanceof Matrix)) {
      m = new Matrix(m);
    }
    let xMin = Infinity;
    let xMax = -Infinity;
    let yMin = Infinity;
    let yMax = -Infinity;
    const pts = [
      new Point(this.x, this.y),
      new Point(this.x2, this.y),
      new Point(this.x, this.y2),
      new Point(this.x2, this.y2)
    ];
    pts.forEach(function(p) {
      p = p.transform(m);
      xMin = Math.min(xMin, p.x);
      xMax = Math.max(xMax, p.x);
      yMin = Math.min(yMin, p.y);
      yMax = Math.max(yMax, p.y);
    });
    return new Box(xMin, yMin, xMax - xMin, yMax - yMin);
  }
}
function getBox(el, getBBoxFn, retry) {
  let box;
  try {
    box = getBBoxFn(el.node);
    if (isNulledBox(box) && !domContains(el.node)) {
      throw new Error("Element not in the dom");
    }
  } catch (e) {
    box = retry(el);
  }
  return box;
}
function bbox() {
  const getBBox = (node) => node.getBBox();
  const retry = (el) => {
    try {
      const clone = el.clone().addTo(parser().svg).show();
      const box2 = clone.node.getBBox();
      clone.remove();
      return box2;
    } catch (e) {
      throw new Error(
        `Getting bbox of element "${el.node.nodeName}" is not possible: ${e.toString()}`
      );
    }
  };
  const box = getBox(this, getBBox, retry);
  const bbox2 = new Box(box);
  return bbox2;
}
function rbox(el) {
  const getRBox = (node) => node.getBoundingClientRect();
  const retry = (el2) => {
    throw new Error(
      `Getting rbox of element "${el2.node.nodeName}" is not possible`
    );
  };
  const box = getBox(this, getRBox, retry);
  const rbox2 = new Box(box);
  if (el) {
    return rbox2.transform(el.screenCTM().inverseO());
  }
  return rbox2.addOffset();
}
function inside(x2, y2) {
  const box = this.bbox();
  return x2 > box.x && y2 > box.y && x2 < box.x + box.width && y2 < box.y + box.height;
}
registerMethods({
  viewbox: {
    viewbox(x2, y2, width2, height2) {
      if (x2 == null)
        return new Box(this.attr("viewBox"));
      return this.attr("viewBox", new Box(x2, y2, width2, height2));
    },
    zoom(level, point2) {
      let { width: width2, height: height2 } = this.attr(["width", "height"]);
      if (!width2 && !height2 || typeof width2 === "string" || typeof height2 === "string") {
        width2 = this.node.clientWidth;
        height2 = this.node.clientHeight;
      }
      if (!width2 || !height2) {
        throw new Error(
          "Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element"
        );
      }
      const v = this.viewbox();
      const zoomX = width2 / v.width;
      const zoomY = height2 / v.height;
      const zoom = Math.min(zoomX, zoomY);
      if (level == null) {
        return zoom;
      }
      let zoomAmount = zoom / level;
      if (zoomAmount === Infinity)
        zoomAmount = Number.MAX_SAFE_INTEGER / 100;
      point2 = point2 || new Point(width2 / 2 / zoomX + v.x, height2 / 2 / zoomY + v.y);
      const box = new Box(v).transform(
        new Matrix({ scale: zoomAmount, origin: point2 })
      );
      return this.viewbox(box);
    }
  }
});
register(Box, "Box");
class List extends Array {
  constructor(arr = [], ...args) {
    super(arr, ...args);
    if (typeof arr === "number")
      return this;
    this.length = 0;
    this.push(...arr);
  }
}
extend([List], {
  each(fnOrMethodName, ...args) {
    if (typeof fnOrMethodName === "function") {
      return this.map((el, i, arr) => {
        return fnOrMethodName.call(el, el, i, arr);
      });
    } else {
      return this.map((el) => {
        return el[fnOrMethodName](...args);
      });
    }
  },
  toArray() {
    return Array.prototype.concat.apply([], this);
  }
});
const reserved = ["toArray", "constructor", "each"];
List.extend = function(methods2) {
  methods2 = methods2.reduce((obj, name) => {
    if (reserved.includes(name))
      return obj;
    if (name[0] === "_")
      return obj;
    if (name in Array.prototype) {
      obj["$" + name] = Array.prototype[name];
    }
    obj[name] = function(...attrs2) {
      return this.each(name, ...attrs2);
    };
    return obj;
  }, {});
  extend([List], methods2);
};
function baseFind(query, parent) {
  return new List(
    map((parent || globals.document).querySelectorAll(query), function(node) {
      return adopt(node);
    })
  );
}
function find(query) {
  return baseFind(query, this.node);
}
function findOne(query) {
  return adopt(this.node.querySelector(query));
}
let listenerId = 0;
const windowEvents = {};
function getEvents(instance) {
  let n = instance.getEventHolder();
  if (n === globals.window)
    n = windowEvents;
  if (!n.events)
    n.events = {};
  return n.events;
}
function getEventTarget(instance) {
  return instance.getEventTarget();
}
function clearEvents(instance) {
  let n = instance.getEventHolder();
  if (n === globals.window)
    n = windowEvents;
  if (n.events)
    n.events = {};
}
function on(node, events, listener, binding, options) {
  const l = listener.bind(binding || node);
  const instance = makeInstance(node);
  const bag = getEvents(instance);
  const n = getEventTarget(instance);
  events = Array.isArray(events) ? events : events.split(delimiter);
  if (!listener._svgjsListenerId) {
    listener._svgjsListenerId = ++listenerId;
  }
  events.forEach(function(event) {
    const ev = event.split(".")[0];
    const ns = event.split(".")[1] || "*";
    bag[ev] = bag[ev] || {};
    bag[ev][ns] = bag[ev][ns] || {};
    bag[ev][ns][listener._svgjsListenerId] = l;
    n.addEventListener(ev, l, options || false);
  });
}
function off(node, events, listener, options) {
  const instance = makeInstance(node);
  const bag = getEvents(instance);
  const n = getEventTarget(instance);
  if (typeof listener === "function") {
    listener = listener._svgjsListenerId;
    if (!listener)
      return;
  }
  events = Array.isArray(events) ? events : (events || "").split(delimiter);
  events.forEach(function(event) {
    const ev = event && event.split(".")[0];
    const ns = event && event.split(".")[1];
    let namespace, l;
    if (listener) {
      if (bag[ev] && bag[ev][ns || "*"]) {
        n.removeEventListener(
          ev,
          bag[ev][ns || "*"][listener],
          options || false
        );
        delete bag[ev][ns || "*"][listener];
      }
    } else if (ev && ns) {
      if (bag[ev] && bag[ev][ns]) {
        for (l in bag[ev][ns]) {
          off(n, [ev, ns].join("."), l);
        }
        delete bag[ev][ns];
      }
    } else if (ns) {
      for (event in bag) {
        for (namespace in bag[event]) {
          if (ns === namespace) {
            off(n, [event, ns].join("."));
          }
        }
      }
    } else if (ev) {
      if (bag[ev]) {
        for (namespace in bag[ev]) {
          off(n, [ev, namespace].join("."));
        }
        delete bag[ev];
      }
    } else {
      for (event in bag) {
        off(n, event);
      }
      clearEvents(instance);
    }
  });
}
function dispatch(node, event, data2, options) {
  const n = getEventTarget(node);
  if (event instanceof globals.window.Event) {
    n.dispatchEvent(event);
  } else {
    event = new globals.window.CustomEvent(event, {
      detail: data2,
      cancelable: true,
      ...options
    });
    n.dispatchEvent(event);
  }
  return event;
}
class EventTarget extends Base {
  addEventListener() {
  }
  dispatch(event, data2, options) {
    return dispatch(this, event, data2, options);
  }
  dispatchEvent(event) {
    const bag = this.getEventHolder().events;
    if (!bag)
      return true;
    const events = bag[event.type];
    for (const i in events) {
      for (const j in events[i]) {
        events[i][j](event);
      }
    }
    return !event.defaultPrevented;
  }
  // Fire given event
  fire(event, data2, options) {
    this.dispatch(event, data2, options);
    return this;
  }
  getEventHolder() {
    return this;
  }
  getEventTarget() {
    return this;
  }
  // Unbind event from listener
  off(event, listener, options) {
    off(this, event, listener, options);
    return this;
  }
  // Bind given event to listener
  on(event, listener, binding, options) {
    on(this, event, listener, binding, options);
    return this;
  }
  removeEventListener() {
  }
}
register(EventTarget, "EventTarget");
function noop() {
}
const timeline = {
  duration: 400,
  ease: ">",
  delay: 0
};
const attrs = {
  // fill and stroke
  "fill-opacity": 1,
  "stroke-opacity": 1,
  "stroke-width": 0,
  "stroke-linejoin": "miter",
  "stroke-linecap": "butt",
  fill: "#000000",
  stroke: "#000000",
  opacity: 1,
  // position
  x: 0,
  y: 0,
  cx: 0,
  cy: 0,
  // size
  width: 0,
  height: 0,
  // radius
  r: 0,
  rx: 0,
  ry: 0,
  // gradient
  offset: 0,
  "stop-opacity": 1,
  "stop-color": "#000000",
  // text
  "text-anchor": "start"
};
class SVGArray extends Array {
  constructor(...args) {
    super(...args);
    this.init(...args);
  }
  clone() {
    return new this.constructor(this);
  }
  init(arr) {
    if (typeof arr === "number")
      return this;
    this.length = 0;
    this.push(...this.parse(arr));
    return this;
  }
  // Parse whitespace separated string
  parse(array2 = []) {
    if (array2 instanceof Array)
      return array2;
    return array2.trim().split(delimiter).map(parseFloat);
  }
  toArray() {
    return Array.prototype.concat.apply([], this);
  }
  toSet() {
    return new Set(this);
  }
  toString() {
    return this.join(" ");
  }
  // Flattens the array if needed
  valueOf() {
    const ret = [];
    ret.push(...this);
    return ret;
  }
}
class SVGNumber {
  // Initialize
  constructor(...args) {
    this.init(...args);
  }
  convert(unit) {
    return new SVGNumber(this.value, unit);
  }
  // Divide number
  divide(number) {
    number = new SVGNumber(number);
    return new SVGNumber(this / number, this.unit || number.unit);
  }
  init(value, unit) {
    unit = Array.isArray(value) ? value[1] : unit;
    value = Array.isArray(value) ? value[0] : value;
    this.value = 0;
    this.unit = unit || "";
    if (typeof value === "number") {
      this.value = isNaN(value) ? 0 : !isFinite(value) ? value < 0 ? -34e37 : 34e37 : value;
    } else if (typeof value === "string") {
      unit = value.match(numberAndUnit);
      if (unit) {
        this.value = parseFloat(unit[1]);
        if (unit[5] === "%") {
          this.value /= 100;
        } else if (unit[5] === "s") {
          this.value *= 1e3;
        }
        this.unit = unit[5];
      }
    } else {
      if (value instanceof SVGNumber) {
        this.value = value.valueOf();
        this.unit = value.unit;
      }
    }
    return this;
  }
  // Subtract number
  minus(number) {
    number = new SVGNumber(number);
    return new SVGNumber(this - number, this.unit || number.unit);
  }
  // Add number
  plus(number) {
    number = new SVGNumber(number);
    return new SVGNumber(this + number, this.unit || number.unit);
  }
  // Multiply number
  times(number) {
    number = new SVGNumber(number);
    return new SVGNumber(this * number, this.unit || number.unit);
  }
  toArray() {
    return [this.value, this.unit];
  }
  toJSON() {
    return this.toString();
  }
  toString() {
    return (this.unit === "%" ? ~~(this.value * 1e8) / 1e6 : this.unit === "s" ? this.value / 1e3 : this.value) + this.unit;
  }
  valueOf() {
    return this.value;
  }
}
const colorAttributes = /* @__PURE__ */ new Set([
  "fill",
  "stroke",
  "color",
  "bgcolor",
  "stop-color",
  "flood-color",
  "lighting-color"
]);
const hooks = [];
function registerAttrHook(fn) {
  hooks.push(fn);
}
function attr(attr2, val, ns) {
  if (attr2 == null) {
    attr2 = {};
    val = this.node.attributes;
    for (const node of val) {
      attr2[node.nodeName] = isNumber.test(node.nodeValue) ? parseFloat(node.nodeValue) : node.nodeValue;
    }
    return attr2;
  } else if (attr2 instanceof Array) {
    return attr2.reduce((last, curr) => {
      last[curr] = this.attr(curr);
      return last;
    }, {});
  } else if (typeof attr2 === "object" && attr2.constructor === Object) {
    for (val in attr2)
      this.attr(val, attr2[val]);
  } else if (val === null) {
    this.node.removeAttribute(attr2);
  } else if (val == null) {
    val = this.node.getAttribute(attr2);
    return val == null ? attrs[attr2] : isNumber.test(val) ? parseFloat(val) : val;
  } else {
    val = hooks.reduce((_val, hook) => {
      return hook(attr2, _val, this);
    }, val);
    if (typeof val === "number") {
      val = new SVGNumber(val);
    } else if (colorAttributes.has(attr2) && Color.isColor(val)) {
      val = new Color(val);
    } else if (val.constructor === Array) {
      val = new SVGArray(val);
    }
    if (attr2 === "leading") {
      if (this.leading) {
        this.leading(val);
      }
    } else {
      typeof ns === "string" ? this.node.setAttributeNS(ns, attr2, val.toString()) : this.node.setAttribute(attr2, val.toString());
    }
    if (this.rebuild && (attr2 === "font-size" || attr2 === "x")) {
      this.rebuild();
    }
  }
  return this;
}
class Dom extends EventTarget {
  constructor(node, attrs2) {
    super();
    this.node = node;
    this.type = node.nodeName;
    if (attrs2 && node !== attrs2) {
      this.attr(attrs2);
    }
  }
  // Add given element at a position
  add(element, i) {
    element = makeInstance(element);
    if (element.removeNamespace && this.node instanceof globals.window.SVGElement) {
      element.removeNamespace();
    }
    if (i == null) {
      this.node.appendChild(element.node);
    } else if (element.node !== this.node.childNodes[i]) {
      this.node.insertBefore(element.node, this.node.childNodes[i]);
    }
    return this;
  }
  // Add element to given container and return self
  addTo(parent, i) {
    return makeInstance(parent).put(this, i);
  }
  // Returns all child elements
  children() {
    return new List(
      map(this.node.children, function(node) {
        return adopt(node);
      })
    );
  }
  // Remove all elements in this container
  clear() {
    while (this.node.hasChildNodes()) {
      this.node.removeChild(this.node.lastChild);
    }
    return this;
  }
  // Clone element
  clone(deep = true, assignNewIds = true) {
    this.writeDataToDom();
    let nodeClone = this.node.cloneNode(deep);
    if (assignNewIds) {
      nodeClone = assignNewId(nodeClone);
    }
    return new this.constructor(nodeClone);
  }
  // Iterates over all children and invokes a given block
  each(block, deep) {
    const children = this.children();
    let i, il;
    for (i = 0, il = children.length; i < il; i++) {
      block.apply(children[i], [i, children]);
      if (deep) {
        children[i].each(block, deep);
      }
    }
    return this;
  }
  element(nodeName, attrs2) {
    return this.put(new Dom(create(nodeName), attrs2));
  }
  // Get first child
  first() {
    return adopt(this.node.firstChild);
  }
  // Get a element at the given index
  get(i) {
    return adopt(this.node.childNodes[i]);
  }
  getEventHolder() {
    return this.node;
  }
  getEventTarget() {
    return this.node;
  }
  // Checks if the given element is a child
  has(element) {
    return this.index(element) >= 0;
  }
  html(htmlOrFn, outerHTML) {
    return this.xml(htmlOrFn, outerHTML, html);
  }
  // Get / set id
  id(id) {
    if (typeof id === "undefined" && !this.node.id) {
      this.node.id = eid(this.type);
    }
    return this.attr("id", id);
  }
  // Gets index of given element
  index(element) {
    return [].slice.call(this.node.childNodes).indexOf(element.node);
  }
  // Get the last child
  last() {
    return adopt(this.node.lastChild);
  }
  // matches the element vs a css selector
  matches(selector) {
    const el = this.node;
    const matcher = el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector || null;
    return matcher && matcher.call(el, selector);
  }
  // Returns the parent element instance
  parent(type) {
    let parent = this;
    if (!parent.node.parentNode)
      return null;
    parent = adopt(parent.node.parentNode);
    if (!type)
      return parent;
    do {
      if (typeof type === "string" ? parent.matches(type) : parent instanceof type)
        return parent;
    } while (parent = adopt(parent.node.parentNode));
    return parent;
  }
  // Basically does the same as `add()` but returns the added element instead
  put(element, i) {
    element = makeInstance(element);
    this.add(element, i);
    return element;
  }
  // Add element to given container and return container
  putIn(parent, i) {
    return makeInstance(parent).add(this, i);
  }
  // Remove element
  remove() {
    if (this.parent()) {
      this.parent().removeElement(this);
    }
    return this;
  }
  // Remove a given child
  removeElement(element) {
    this.node.removeChild(element.node);
    return this;
  }
  // Replace this with element
  replace(element) {
    element = makeInstance(element);
    if (this.node.parentNode) {
      this.node.parentNode.replaceChild(element.node, this.node);
    }
    return element;
  }
  round(precision = 2, map2 = null) {
    const factor = 10 ** precision;
    const attrs2 = this.attr(map2);
    for (const i in attrs2) {
      if (typeof attrs2[i] === "number") {
        attrs2[i] = Math.round(attrs2[i] * factor) / factor;
      }
    }
    this.attr(attrs2);
    return this;
  }
  // Import / Export raw svg
  svg(svgOrFn, outerSVG) {
    return this.xml(svgOrFn, outerSVG, svg);
  }
  // Return id on string conversion
  toString() {
    return this.id();
  }
  words(text) {
    this.node.textContent = text;
    return this;
  }
  wrap(node) {
    const parent = this.parent();
    if (!parent) {
      return this.addTo(node);
    }
    const position2 = parent.index(this);
    return parent.put(node, position2).put(this);
  }
  // write svgjs data to the dom
  writeDataToDom() {
    this.each(function() {
      this.writeDataToDom();
    });
    return this;
  }
  // Import / Export raw svg
  xml(xmlOrFn, outerXML, ns) {
    if (typeof xmlOrFn === "boolean") {
      ns = outerXML;
      outerXML = xmlOrFn;
      xmlOrFn = null;
    }
    if (xmlOrFn == null || typeof xmlOrFn === "function") {
      outerXML = outerXML == null ? true : outerXML;
      this.writeDataToDom();
      let current = this;
      if (xmlOrFn != null) {
        current = adopt(current.node.cloneNode(true));
        if (outerXML) {
          const result = xmlOrFn(current);
          current = result || current;
          if (result === false)
            return "";
        }
        current.each(function() {
          const result = xmlOrFn(this);
          const _this = result || this;
          if (result === false) {
            this.remove();
          } else if (result && this !== _this) {
            this.replace(_this);
          }
        }, true);
      }
      return outerXML ? current.node.outerHTML : current.node.innerHTML;
    }
    outerXML = outerXML == null ? false : outerXML;
    const well = create("wrapper", ns);
    const fragment = globals.document.createDocumentFragment();
    well.innerHTML = xmlOrFn;
    for (let len = well.children.length; len--; ) {
      fragment.appendChild(well.firstElementChild);
    }
    const parent = this.parent();
    return outerXML ? this.replace(fragment) && parent : this.add(fragment);
  }
}
extend(Dom, { attr, find, findOne });
register(Dom, "Dom");
class Element extends Dom {
  constructor(node, attrs2) {
    super(node, attrs2);
    this.dom = {};
    this.node.instance = this;
    if (node.hasAttribute("data-svgjs") || node.hasAttribute("svgjs:data")) {
      this.setData(
        JSON.parse(node.getAttribute("data-svgjs")) ?? JSON.parse(node.getAttribute("svgjs:data")) ?? {}
      );
    }
  }
  // Move element by its center
  center(x2, y2) {
    return this.cx(x2).cy(y2);
  }
  // Move by center over x-axis
  cx(x2) {
    return x2 == null ? this.x() + this.width() / 2 : this.x(x2 - this.width() / 2);
  }
  // Move by center over y-axis
  cy(y2) {
    return y2 == null ? this.y() + this.height() / 2 : this.y(y2 - this.height() / 2);
  }
  // Get defs
  defs() {
    const root2 = this.root();
    return root2 && root2.defs();
  }
  // Relative move over x and y axes
  dmove(x2, y2) {
    return this.dx(x2).dy(y2);
  }
  // Relative move over x axis
  dx(x2 = 0) {
    return this.x(new SVGNumber(x2).plus(this.x()));
  }
  // Relative move over y axis
  dy(y2 = 0) {
    return this.y(new SVGNumber(y2).plus(this.y()));
  }
  getEventHolder() {
    return this;
  }
  // Set height of element
  height(height2) {
    return this.attr("height", height2);
  }
  // Move element to given x and y values
  move(x2, y2) {
    return this.x(x2).y(y2);
  }
  // return array of all ancestors of given type up to the root svg
  parents(until = this.root()) {
    const isSelector = typeof until === "string";
    if (!isSelector) {
      until = makeInstance(until);
    }
    const parents = new List();
    let parent = this;
    while ((parent = parent.parent()) && parent.node !== globals.document && parent.nodeName !== "#document-fragment") {
      parents.push(parent);
      if (!isSelector && parent.node === until.node) {
        break;
      }
      if (isSelector && parent.matches(until)) {
        break;
      }
      if (parent.node === this.root().node) {
        return null;
      }
    }
    return parents;
  }
  // Get referenced element form attribute value
  reference(attr2) {
    attr2 = this.attr(attr2);
    if (!attr2)
      return null;
    const m = (attr2 + "").match(reference);
    return m ? makeInstance(m[1]) : null;
  }
  // Get parent document
  root() {
    const p = this.parent(getClass(root$1));
    return p && p.root();
  }
  // set given data to the elements data property
  setData(o) {
    this.dom = o;
    return this;
  }
  // Set element size to given width and height
  size(width2, height2) {
    const p = proportionalSize(this, width2, height2);
    return this.width(new SVGNumber(p.width)).height(new SVGNumber(p.height));
  }
  // Set width of element
  width(width2) {
    return this.attr("width", width2);
  }
  // write svgjs data to the dom
  writeDataToDom() {
    writeDataToDom(this, this.dom);
    return super.writeDataToDom();
  }
  // Move over x-axis
  x(x2) {
    return this.attr("x", x2);
  }
  // Move over y-axis
  y(y2) {
    return this.attr("y", y2);
  }
}
extend(Element, {
  bbox,
  rbox,
  inside,
  point,
  ctm,
  screenCTM
});
register(Element, "Element");
const sugar = {
  stroke: [
    "color",
    "width",
    "opacity",
    "linecap",
    "linejoin",
    "miterlimit",
    "dasharray",
    "dashoffset"
  ],
  fill: ["color", "opacity", "rule"],
  prefix: function(t, a) {
    return a === "color" ? t : t + "-" + a;
  }
};
["fill", "stroke"].forEach(function(m) {
  const extension = {};
  let i;
  extension[m] = function(o) {
    if (typeof o === "undefined") {
      return this.attr(m);
    }
    if (typeof o === "string" || o instanceof Color || Color.isRgb(o) || o instanceof Element) {
      this.attr(m, o);
    } else {
      for (i = sugar[m].length - 1; i >= 0; i--) {
        if (o[sugar[m][i]] != null) {
          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]]);
        }
      }
    }
    return this;
  };
  registerMethods(["Element", "Runner"], extension);
});
registerMethods(["Element", "Runner"], {
  // Let the user set the matrix directly
  matrix: function(mat, b, c, d, e, f) {
    if (mat == null) {
      return new Matrix(this);
    }
    return this.attr("transform", new Matrix(mat, b, c, d, e, f));
  },
  // Map rotation to transform
  rotate: function(angle, cx2, cy2) {
    return this.transform({ rotate: angle, ox: cx2, oy: cy2 }, true);
  },
  // Map skew to transform
  skew: function(x2, y2, cx2, cy2) {
    return arguments.length === 1 || arguments.length === 3 ? this.transform({ skew: x2, ox: y2, oy: cx2 }, true) : this.transform({ skew: [x2, y2], ox: cx2, oy: cy2 }, true);
  },
  shear: function(lam, cx2, cy2) {
    return this.transform({ shear: lam, ox: cx2, oy: cy2 }, true);
  },
  // Map scale to transform
  scale: function(x2, y2, cx2, cy2) {
    return arguments.length === 1 || arguments.length === 3 ? this.transform({ scale: x2, ox: y2, oy: cx2 }, true) : this.transform({ scale: [x2, y2], ox: cx2, oy: cy2 }, true);
  },
  // Map translate to transform
  translate: function(x2, y2) {
    return this.transform({ translate: [x2, y2] }, true);
  },
  // Map relative translations to transform
  relative: function(x2, y2) {
    return this.transform({ relative: [x2, y2] }, true);
  },
  // Map flip to transform
  flip: function(direction = "both", origin = "center") {
    if ("xybothtrue".indexOf(direction) === -1) {
      origin = direction;
      direction = "both";
    }
    return this.transform({ flip: direction, origin }, true);
  },
  // Opacity
  opacity: function(value) {
    return this.attr("opacity", value);
  }
});
registerMethods("radius", {
  // Add x and y radius
  radius: function(x2, y2 = x2) {
    const type = (this._element || this).type;
    return type === "radialGradient" ? this.attr("r", new SVGNumber(x2)) : this.rx(x2).ry(y2);
  }
});
registerMethods("Path", {
  // Get path length
  length: function() {
    return this.node.getTotalLength();
  },
  // Get point at length
  pointAt: function(length2) {
    return new Point(this.node.getPointAtLength(length2));
  }
});
registerMethods(["Element", "Runner"], {
  // Set font
  font: function(a, v) {
    if (typeof a === "object") {
      for (v in a)
        this.font(v, a[v]);
      return this;
    }
    return a === "leading" ? this.leading(v) : a === "anchor" ? this.attr("text-anchor", v) : a === "size" || a === "family" || a === "weight" || a === "stretch" || a === "variant" || a === "style" ? this.attr("font-" + a, v) : this.attr(a, v);
  }
});
const methods = [
  "click",
  "dblclick",
  "mousedown",
  "mouseup",
  "mouseover",
  "mouseout",
  "mousemove",
  "mouseenter",
  "mouseleave",
  "touchstart",
  "touchmove",
  "touchleave",
  "touchend",
  "touchcancel",
  "contextmenu",
  "wheel",
  "pointerdown",
  "pointermove",
  "pointerup",
  "pointerleave",
  "pointercancel"
].reduce(function(last, event) {
  const fn = function(f) {
    if (f === null) {
      this.off(event);
    } else {
      this.on(event, f);
    }
    return this;
  };
  last[event] = fn;
  return last;
}, {});
registerMethods("Element", methods);
function untransform() {
  return this.attr("transform", null);
}
function matrixify() {
  const matrix = (this.attr("transform") || "").split(transforms).slice(0, -1).map(function(str) {
    const kv = str.trim().split("(");
    return [
      kv[0],
      kv[1].split(delimiter).map(function(str2) {
        return parseFloat(str2);
      })
    ];
  }).reverse().reduce(function(matrix2, transform2) {
    if (transform2[0] === "matrix") {
      return matrix2.lmultiply(Matrix.fromArray(transform2[1]));
    }
    return matrix2[transform2[0]].apply(matrix2, transform2[1]);
  }, new Matrix());
  return matrix;
}
function toParent(parent, i) {
  if (this === parent)
    return this;
  if (isDescriptive(this.node))
    return this.addTo(parent, i);
  const ctm2 = this.screenCTM();
  const pCtm = parent.screenCTM().inverse();
  this.addTo(parent, i).untransform().transform(pCtm.multiply(ctm2));
  return this;
}
function toRoot(i) {
  return this.toParent(this.root(), i);
}
function transform(o, relative) {
  if (o == null || typeof o === "string") {
    const decomposed = new Matrix(this).decompose();
    return o == null ? decomposed : decomposed[o];
  }
  if (!Matrix.isMatrixLike(o)) {
    o = { ...o, origin: getOrigin(o, this) };
  }
  const cleanRelative = relative === true ? this : relative || false;
  const result = new Matrix(cleanRelative).transform(o);
  return this.attr("transform", result);
}
registerMethods("Element", {
  untransform,
  matrixify,
  toParent,
  toRoot,
  transform
});
class Container extends Element {
  flatten() {
    this.each(function() {
      if (this instanceof Container) {
        return this.flatten().ungroup();
      }
    });
    return this;
  }
  ungroup(parent = this.parent(), index = parent.index(this)) {
    index = index === -1 ? parent.children().length : index;
    this.each(function(i, children) {
      return children[children.length - i - 1].toParent(parent, index);
    });
    return this.remove();
  }
}
register(Container, "Container");
class Defs extends Container {
  constructor(node, attrs2 = node) {
    super(nodeOrNew("defs", node), attrs2);
  }
  flatten() {
    return this;
  }
  ungroup() {
    return this;
  }
}
register(Defs, "Defs");
class Shape extends Element {
}
register(Shape, "Shape");
function rx(rx2) {
  return this.attr("rx", rx2);
}
function ry(ry2) {
  return this.attr("ry", ry2);
}
function x$3(x2) {
  return x2 == null ? this.cx() - this.rx() : this.cx(x2 + this.rx());
}
function y$3(y2) {
  return y2 == null ? this.cy() - this.ry() : this.cy(y2 + this.ry());
}
function cx$1(x2) {
  return this.attr("cx", x2);
}
function cy$1(y2) {
  return this.attr("cy", y2);
}
function width$2(width2) {
  return width2 == null ? this.rx() * 2 : this.rx(new SVGNumber(width2).divide(2));
}
function height$2(height2) {
  return height2 == null ? this.ry() * 2 : this.ry(new SVGNumber(height2).divide(2));
}
const circled = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  cx: cx$1,
  cy: cy$1,
  height: height$2,
  rx,
  ry,
  width: width$2,
  x: x$3,
  y: y$3
}, Symbol.toStringTag, { value: "Module" }));
class Ellipse extends Shape {
  constructor(node, attrs2 = node) {
    super(nodeOrNew("ellipse", node), attrs2);
  }
  size(width2, height2) {
    const p = proportionalSize(this, width2, height2);
    return this.rx(new SVGNumber(p.width).divide(2)).ry(
      new SVGNumber(p.height).divide(2)
    );
  }
}
extend(Ellipse, circled);
registerMethods("Container", {
  // Create an ellipse
  ellipse: wrapWithAttrCheck(function(width2 = 0, height2 = width2) {
    return this.put(new Ellipse()).size(width2, height2).move(0, 0);
  })
});
register(Ellipse, "Ellipse");
class Fragment extends Dom {
  constructor(node = globals.document.createDocumentFragment()) {
    super(node);
  }
  // Import / Export raw xml
  xml(xmlOrFn, outerXML, ns) {
    if (typeof xmlOrFn === "boolean") {
      ns = outerXML;
      outerXML = xmlOrFn;
      xmlOrFn = null;
    }
    if (xmlOrFn == null || typeof xmlOrFn === "function") {
      const wrapper = new Dom(create("wrapper", ns));
      wrapper.add(this.node.cloneNode(true));
      return wrapper.xml(false, ns);
    }
    return super.xml(xmlOrFn, false, ns);
  }
}
register(Fragment, "Fragment");
function from(x2, y2) {
  return (this._element || this).type === "radialGradient" ? this.attr({ fx: new SVGNumber(x2), fy: new SVGNumber(y2) }) : this.attr({ x1: new SVGNumber(x2), y1: new SVGNumber(y2) });
}
function to(x2, y2) {
  return (this._element || this).type === "radialGradient" ? this.attr({ cx: new SVGNumber(x2), cy: new SVGNumber(y2) }) : this.attr({ x2: new SVGNumber(x2), y2: new SVGNumber(y2) });
}
const gradiented = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  from,
  to
}, Symbol.toStringTag, { value: "Module" }));
class Gradient extends Container {
  constructor(type, attrs2) {
    super(
      nodeOrNew(type + "Gradient", typeof type === "string" ? null : type),
      attrs2
    );
  }
  // custom attr to handle transform
  attr(a, b, c) {
    if (a === "transform")
      a = "gradientTransform";
    return super.attr(a, b, c);
  }
  bbox() {
    return new Box();
  }
  targets() {
    return baseFind("svg [fill*=" + this.id() + "]");
  }
  // Alias string conversion to fill
  toString() {
    return this.url();
  }
  // Update gradient
  update(block) {
    this.clear();
    if (typeof block === "function") {
      block.call(this, this);
    }
    return this;
  }
  // Return the fill id
  url() {
    return "url(#" + this.id() + ")";
  }
}
extend(Gradient, gradiented);
registerMethods({
  Container: {
    // Create gradient element in defs
    gradient(...args) {
      return this.defs().gradient(...args);
    }
  },
  // define gradient
  Defs: {
    gradient: wrapWithAttrCheck(function(type, block) {
      return this.put(new Gradient(type)).update(block);
    })
  }
});
register(Gradient, "Gradient");
class Pattern extends Container {
  // Initialize node
  constructor(node, attrs2 = node) {
    super(nodeOrNew("pattern", node), attrs2);
  }
  // custom attr to handle transform
  attr(a, b, c) {
    if (a === "transform")
      a = "patternTransform";
    return super.attr(a, b, c);
  }
  bbox() {
    return new Box();
  }
  targets() {
    return baseFind("svg [fill*=" + this.id() + "]");
  }
  // Alias string conversion to fill
  toString() {
    return this.url();
  }
  // Update pattern by rebuilding
  update(block) {
    this.clear();
    if (typeof block === "function") {
      block.call(this, this);
    }
    return this;
  }
  // Return the fill id
  url() {
    return "url(#" + this.id() + ")";
  }
}
registerMethods({
  Container: {
    // Create pattern element in defs
    pattern(...args) {
      return this.defs().pattern(...args);
    }
  },
  Defs: {
    pattern: wrapWithAttrCheck(function(width2, height2, block) {
      return this.put(new Pattern()).update(block).attr({
        x: 0,
        y: 0,
        width: width2,
        height: height2,
        patternUnits: "userSpaceOnUse"
      });
    })
  }
});
register(Pattern, "Pattern");
class Image extends Shape {
  constructor(node, attrs2 = node) {
    super(nodeOrNew("image", node), attrs2);
  }
  // (re)load image
  load(url, callback) {
    if (!url)
      return this;
    const img = new globals.window.Image();
    on(
      img,
      "load",
      function(e) {
        const p = this.parent(Pattern);
        if (this.width() === 0 && this.height() === 0) {
          this.size(img.width, img.height);
        }
        if (p instanceof Pattern) {
          if (p.width() === 0 && p.height() === 0) {
            p.size(this.width(), this.height());
          }
        }
        if (typeof callback === "function") {
          callback.call(this, e);
        }
      },
      this
    );
    on(img, "load error", function() {
      off(img);
    });
    return this.attr("href", img.src = url, xlink);
  }
}
registerAttrHook(function(attr2, val, _this) {
  if (attr2 === "fill" || attr2 === "stroke") {
    if (isImage.test(val)) {
      val = _this.root().defs().image(val);
    }
  }
  if (val instanceof Image) {
    val = _this.root().defs().pattern(0, 0, (pattern) => {
      pattern.add(val);
    });
  }
  return val;
});
registerMethods({
  Container: {
    // create image element, load image and set its size
    image: wrapWithAttrCheck(function(source, callback) {
      return this.put(new Image()).size(0, 0).load(source, callback);
    })
  }
});
register(Image, "Image");
class PointArray extends SVGArray {
  // Get bounding box of points
  bbox() {
    let maxX = -Infinity;
    let maxY = -Infinity;
    let minX = Infinity;
    let minY = Infinity;
    this.forEach(function(el) {
      maxX = Math.max(el[0], maxX);
      maxY = Math.max(el[1], maxY);
      minX = Math.min(el[0], minX);
      minY = Math.min(el[1], minY);
    });
    return new Box(minX, minY, maxX - minX, maxY - minY);
  }
  // Move point string
  move(x2, y2) {
    const box = this.bbox();
    x2 -= box.x;
    y2 -= box.y;
    if (!isNaN(x2) && !isNaN(y2)) {
      for (let i = this.length - 1; i >= 0; i--) {
        this[i] = [this[i][0] + x2, this[i][1] + y2];
      }
    }
    return this;
  }
  // Parse point string and flat array
  parse(array2 = [0, 0]) {
    const points = [];
    if (array2 instanceof Array) {
      array2 = Array.prototype.concat.apply([], array2);
    } else {
      array2 = array2.trim().split(delimiter).map(parseFloat);
    }
    if (array2.length % 2 !== 0)
      array2.pop();
    for (let i = 0, len = array2.length; i < len; i = i + 2) {
      points.push([array2[i], array2[i + 1]]);
    }
    return points;
  }
  // Resize poly string
  size(width2, height2) {
    let i;
    const box = this.bbox();
    for (i = this.length - 1; i >= 0; i--) {
      if (box.width)
        this[i][0] = (this[i][0] - box.x) * width2 / box.width + box.x;
      if (box.height)
        this[i][1] = (this[i][1] - box.y) * height2 / box.height + box.y;
    }
    return this;
  }
  // Convert array to line object
  toLine() {
    return {
      x1: this[0][0],
      y1: this[0][1],
      x2: this[1][0],
      y2: this[1][1]
    };
  }
  // Convert array to string
  toString() {
    const array2 = [];
    for (let i = 0, il = this.length; i < il; i++) {
      array2.push(this[i].join(","));
    }
    return array2.join(" ");
  }
  transform(m) {
    return this.clone().transformO(m);
  }
  // transform points with matrix (similar to Point.transform)
  transformO(m) {
    if (!Matrix.isMatrixLike(m)) {
      m = new Matrix(m);
    }
    for (let i = this.length; i--; ) {
      const [x2, y2] = this[i];
      this[i][0] = m.a * x2 + m.c * y2 + m.e;
      this[i][1] = m.b * x2 + m.d * y2 + m.f;
    }
    return this;
  }
}
const MorphArray = PointArray;
function x$2(x2) {
  return x2 == null ? this.bbox().x : this.move(x2, this.bbox().y);
}
function y$2(y2) {
  return y2 == null ? this.bbox().y : this.move(this.bbox().x, y2);
}
function width$1(width2) {
  const b = this.bbox();
  return width2 == null ? b.width : this.size(width2, b.height);
}
function height$1(height2) {
  const b = this.bbox();
  return height2 == null ? b.height : this.size(b.width, height2);
}
const pointed = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  MorphArray,
  height: height$1,
  width: width$1,
  x: x$2,
  y: y$2
}, Symbol.toStringTag, { value: "Module" }));
class Line extends Shape {
  // Initialize node
  constructor(node, attrs2 = node) {
    super(nodeOrNew("line", node), attrs2);
  }
  // Get array
  array() {
    return new PointArray([
      [this.attr("x1"), this.attr("y1")],
      [this.attr("x2"), this.attr("y2")]
    ]);
  }
  // Move by left top corner
  move(x2, y2) {
    return this.attr(this.array().move(x2, y2).toLine());
  }
  // Overwrite native plot() method
  plot(x1, y1, x2, y2) {
    if (x1 == null) {
      return this.array();
    } else if (typeof y1 !== "undefined") {
      x1 = { x1, y1, x2, y2 };
    } else {
      x1 = new PointArray(x1).toLine();
    }
    return this.attr(x1);
  }
  // Set element size to given width and height
  size(width2, height2) {
    const p = proportionalSize(this, width2, height2);
    return this.attr(this.array().size(p.width, p.height).toLine());
  }
}
extend(Line, pointed);
registerMethods({
  Container: {
    // Create a line element
    line: wrapWithAttrCheck(function(...args) {
      return Line.prototype.plot.apply(
        this.put(new Line()),
        args[0] != null ? args : [0, 0, 0, 0]
      );
    })
  }
});
register(Line, "Line");
class Marker extends Container {
  // Initialize node
  constructor(node, attrs2 = node) {
    super(nodeOrNew("marker", node), attrs2);
  }
  // Set height of element
  height(height2) {
    return this.attr("markerHeight", height2);
  }
  orient(orient) {
    return this.attr("orient", orient);
  }
  // Set marker refX and refY
  ref(x2, y2) {
    return this.attr("refX", x2).attr("refY", y2);
  }
  // Return the fill id
  toString() {
    return "url(#" + this.id() + ")";
  }
  // Update marker
  update(block) {
    this.clear();
    if (typeof block === "function") {
      block.call(this, this);
    }
    return this;
  }
  // Set width of element
  width(width2) {
    return this.attr("markerWidth", width2);
  }
}
registerMethods({
  Container: {
    marker(...args) {
      return this.defs().marker(...args);
    }
  },
  Defs: {
    // Create marker
    marker: wrapWithAttrCheck(function(width2, height2, block) {
      return this.put(new Marker()).size(width2, height2).ref(width2 / 2, height2 / 2).viewbox(0, 0, width2, height2).attr("orient", "auto").update(block);
    })
  },
  marker: {
    // Create and attach markers
    marker(marker, width2, height2, block) {
      let attr2 = ["marker"];
      if (marker !== "all")
        attr2.push(marker);
      attr2 = attr2.join("-");
      marker = arguments[1] instanceof Marker ? arguments[1] : this.defs().marker(width2, height2, block);
      return this.attr(attr2, marker);
    }
  }
});
register(Marker, "Marker");
function makeSetterGetter(k, f) {
  return function(v) {
    if (v == null)
      return this[k];
    this[k] = v;
    if (f)
      f.call(this);
    return this;
  };
}
const easing = {
  "-": function(pos) {
    return pos;
  },
  "<>": function(pos) {
    return -Math.cos(pos * Math.PI) / 2 + 0.5;
  },
  ">": function(pos) {
    return Math.sin(pos * Math.PI / 2);
  },
  "<": function(pos) {
    return -Math.cos(pos * Math.PI / 2) + 1;
  },
  bezier: function(x1, y1, x2, y2) {
    return function(t) {
      if (t < 0) {
        if (x1 > 0) {
          return y1 / x1 * t;
        } else if (x2 > 0) {
          return y2 / x2 * t;
        } else {
          return 0;
        }
      } else if (t > 1) {
        if (x2 < 1) {
          return (1 - y2) / (1 - x2) * t + (y2 - x2) / (1 - x2);
        } else if (x1 < 1) {
          return (1 - y1) / (1 - x1) * t + (y1 - x1) / (1 - x1);
        } else {
          return 1;
        }
      } else {
        return 3 * t * (1 - t) ** 2 * y1 + 3 * t ** 2 * (1 - t) * y2 + t ** 3;
      }
    };
  },
  // see https://www.w3.org/TR/css-easing-1/#step-timing-function-algo
  steps: function(steps, stepPosition = "end") {
    stepPosition = stepPosition.split("-").reverse()[0];
    let jumps = steps;
    if (stepPosition === "none") {
      --jumps;
    } else if (stepPosition === "both") {
      ++jumps;
    }
    return (t, beforeFlag = false) => {
      let step = Math.floor(t * steps);
      const jumping = t * step % 1 === 0;
      if (stepPosition === "start" || stepPosition === "both") {
        ++step;
      }
      if (beforeFlag && jumping) {
        --step;
      }
      if (t >= 0 && step < 0) {
        step = 0;
      }
      if (t <= 1 && step > jumps) {
        step = jumps;
      }
      return step / jumps;
    };
  }
};
class Stepper {
  done() {
    return false;
  }
}
class Ease extends Stepper {
  constructor(fn = timeline.ease) {
    super();
    this.ease = easing[fn] || fn;
  }
  step(from2, to2, pos) {
    if (typeof from2 !== "number") {
      return pos < 1 ? from2 : to2;
    }
    return from2 + (to2 - from2) * this.ease(pos);
  }
}
class Controller extends Stepper {
  constructor(fn) {
    super();
    this.stepper = fn;
  }
  done(c) {
    return c.done;
  }
  step(current, target, dt, c) {
    return this.stepper(current, target, dt, c);
  }
}
function recalculate() {
  const duration = (this._duration || 500) / 1e3;
  const overshoot = this._overshoot || 0;
  const eps = 1e-10;
  const pi = Math.PI;
  const os = Math.log(overshoot / 100 + eps);
  const zeta = -os / Math.sqrt(pi * pi + os * os);
  const wn = 3.9 / (zeta * duration);
  this.d = 2 * zeta * wn;
  this.k = wn * wn;
}
class Spring extends Controller {
  constructor(duration = 500, overshoot = 0) {
    super();
    this.duration(duration).overshoot(overshoot);
  }
  step(current, target, dt, c) {
    if (typeof current === "string")
      return current;
    c.done = dt === Infinity;
    if (dt === Infinity)
      return target;
    if (dt === 0)
      return current;
    if (dt > 100)
      dt = 16;
    dt /= 1e3;
    const velocity = c.velocity || 0;
    const acceleration = -this.d * velocity - this.k * (current - target);
    const newPosition = current + velocity * dt + acceleration * dt * dt / 2;
    c.velocity = velocity + acceleration * dt;
    c.done = Math.abs(target - newPosition) + Math.abs(velocity) < 2e-3;
    return c.done ? target : newPosition;
  }
}
extend(Spring, {
  duration: makeSetterGetter("_duration", recalculate),
  overshoot: makeSetterGetter("_overshoot", recalculate)
});
class PID extends Controller {
  constructor(p = 0.1, i = 0.01, d = 0, windup = 1e3) {
    super();
    this.p(p).i(i).d(d).windup(windup);
  }
  step(current, target, dt, c) {
    if (typeof current === "string")
      return current;
    c.done = dt === Infinity;
    if (dt === Infinity)
      return target;
    if (dt === 0)
      return current;
    const p = target - current;
    let i = (c.integral || 0) + p * dt;
    const d = (p - (c.error || 0)) / dt;
    const windup = this._windup;
    if (windup !== false) {
      i = Math.max(-windup, Math.min(i, windup));
    }
    c.error = p;
    c.integral = i;
    c.done = Math.abs(p) < 1e-3;
    return c.done ? target : current + (this.P * p + this.I * i + this.D * d);
  }
}
extend(PID, {
  windup: makeSetterGetter("_windup"),
  p: makeSetterGetter("P"),
  i: makeSetterGetter("I"),
  d: makeSetterGetter("D")
});
const segmentParameters = {
  M: 2,
  L: 2,
  H: 1,
  V: 1,
  C: 6,
  S: 4,
  Q: 4,
  T: 2,
  A: 7,
  Z: 0
};
const pathHandlers = {
  M: function(c, p, p0) {
    p.x = p0.x = c[0];
    p.y = p0.y = c[1];
    return ["M", p.x, p.y];
  },
  L: function(c, p) {
    p.x = c[0];
    p.y = c[1];
    return ["L", c[0], c[1]];
  },
  H: function(c, p) {
    p.x = c[0];
    return ["H", c[0]];
  },
  V: function(c, p) {
    p.y = c[0];
    return ["V", c[0]];
  },
  C: function(c, p) {
    p.x = c[4];
    p.y = c[5];
    return ["C", c[0], c[1], c[2], c[3], c[4], c[5]];
  },
  S: function(c, p) {
    p.x = c[2];
    p.y = c[3];
    return ["S", c[0], c[1], c[2], c[3]];
  },
  Q: function(c, p) {
    p.x = c[2];
    p.y = c[3];
    return ["Q", c[0], c[1], c[2], c[3]];
  },
  T: function(c, p) {
    p.x = c[0];
    p.y = c[1];
    return ["T", c[0], c[1]];
  },
  Z: function(c, p, p0) {
    p.x = p0.x;
    p.y = p0.y;
    return ["Z"];
  },
  A: function(c, p) {
    p.x = c[5];
    p.y = c[6];
    return ["A", c[0], c[1], c[2], c[3], c[4], c[5], c[6]];
  }
};
const mlhvqtcsaz = "mlhvqtcsaz".split("");
for (let i = 0, il = mlhvqtcsaz.length; i < il; ++i) {
  pathHandlers[mlhvqtcsaz[i]] = /* @__PURE__ */ function(i2) {
    return function(c, p, p0) {
      if (i2 === "H")
        c[0] = c[0] + p.x;
      else if (i2 === "V")
        c[0] = c[0] + p.y;
      else if (i2 === "A") {
        c[5] = c[5] + p.x;
        c[6] = c[6] + p.y;
      } else {
        for (let j = 0, jl = c.length; j < jl; ++j) {
          c[j] = c[j] + (j % 2 ? p.y : p.x);
        }
      }
      return pathHandlers[i2](c, p, p0);
    };
  }(mlhvqtcsaz[i].toUpperCase());
}
function makeAbsolut(parser2) {
  const command = parser2.segment[0];
  return pathHandlers[command](parser2.segment.slice(1), parser2.p, parser2.p0);
}
function segmentComplete(parser2) {
  return parser2.segment.length && parser2.segment.length - 1 === segmentParameters[parser2.segment[0].toUpperCase()];
}
function startNewSegment(parser2, token) {
  parser2.inNumber && finalizeNumber(parser2, false);
  const pathLetter = isPathLetter.test(token);
  if (pathLetter) {
    parser2.segment = [token];
  } else {
    const lastCommand = parser2.lastCommand;
    const small = lastCommand.toLowerCase();
    const isSmall = lastCommand === small;
    parser2.segment = [small === "m" ? isSmall ? "l" : "L" : lastCommand];
  }
  parser2.inSegment = true;
  parser2.lastCommand = parser2.segment[0];
  return pathLetter;
}
function finalizeNumber(parser2, inNumber) {
  if (!parser2.inNumber)
    throw new Error("Parser Error");
  parser2.number && parser2.segment.push(parseFloat(parser2.number));
  parser2.inNumber = inNumber;
  parser2.number = "";
  parser2.pointSeen = false;
  parser2.hasExponent = false;
  if (segmentComplete(parser2)) {
    finalizeSegment(parser2);
  }
}
function finalizeSegment(parser2) {
  parser2.inSegment = false;
  if (parser2.absolute) {
    parser2.segment = makeAbsolut(parser2);
  }
  parser2.segments.push(parser2.segment);
}
function isArcFlag(parser2) {
  if (!parser2.segment.length)
    return false;
  const isArc = parser2.segment[0].toUpperCase() === "A";
  const length2 = parser2.segment.length;
  return isArc && (length2 === 4 || length2 === 5);
}
function isExponential(parser2) {
  return parser2.lastToken.toUpperCase() === "E";
}
const pathDelimiters = /* @__PURE__ */ new Set([" ", ",", "	", "\n", "\r", "\f"]);
function pathParser(d, toAbsolute = true) {
  let index = 0;
  let token = "";
  const parser2 = {
    segment: [],
    inNumber: false,
    number: "",
    lastToken: "",
    inSegment: false,
    segments: [],
    pointSeen: false,
    hasExponent: false,
    absolute: toAbsolute,
    p0: new Point(),
    p: new Point()
  };
  while (parser2.lastToken = token, token = d.charAt(index++)) {
    if (!parser2.inSegment) {
      if (startNewSegment(parser2, token)) {
        continue;
      }
    }
    if (token === ".") {
      if (parser2.pointSeen || parser2.hasExponent) {
        finalizeNumber(parser2, false);
        --index;
        continue;
      }
      parser2.inNumber = true;
      parser2.pointSeen = true;
      parser2.number += token;
      continue;
    }
    if (!isNaN(parseInt(token))) {
      if (parser2.number === "0" || isArcFlag(parser2)) {
        parser2.inNumber = true;
        parser2.number = token;
        finalizeNumber(parser2, true);
        continue;
      }
      parser2.inNumber = true;
      parser2.number += token;
      continue;
    }
    if (pathDelimiters.has(token)) {
      if (parser2.inNumber) {
        finalizeNumber(parser2, false);
      }
      continue;
    }
    if (token === "-" || token === "+") {
      if (parser2.inNumber && !isExponential(parser2)) {
        finalizeNumber(parser2, false);
        --index;
        continue;
      }
      parser2.number += token;
      parser2.inNumber = true;
      continue;
    }
    if (token.toUpperCase() === "E") {
      parser2.number += token;
      parser2.hasExponent = true;
      continue;
    }
    if (isPathLetter.test(token)) {
      if (parser2.inNumber) {
        finalizeNumber(parser2, false);
      } else if (!segmentComplete(parser2)) {
        throw new Error("parser Error");
      } else {
        finalizeSegment(parser2);
      }
      --index;
    }
  }
  if (parser2.inNumber) {
    finalizeNumber(parser2, false);
  }
  if (parser2.inSegment && segmentComplete(parser2)) {
    finalizeSegment(parser2);
  }
  return parser2.segments;
}
function arrayToString(a) {
  let s = "";
  for (let i = 0, il = a.length; i < il; i++) {
    s += a[i][0];
    if (a[i][1] != null) {
      s += a[i][1];
      if (a[i][2] != null) {
        s += " ";
        s += a[i][2];
        if (a[i][3] != null) {
          s += " ";
          s += a[i][3];
          s += " ";
          s += a[i][4];
          if (a[i][5] != null) {
            s += " ";
            s += a[i][5];
            s += " ";
            s += a[i][6];
            if (a[i][7] != null) {
              s += " ";
              s += a[i][7];
            }
          }
        }
      }
    }
  }
  return s + " ";
}
class PathArray extends SVGArray {
  // Get bounding box of path
  bbox() {
    parser().path.setAttribute("d", this.toString());
    return new Box(parser.nodes.path.getBBox());
  }
  // Move path string
  move(x2, y2) {
    const box = this.bbox();
    x2 -= box.x;
    y2 -= box.y;
    if (!isNaN(x2) && !isNaN(y2)) {
      for (let l, i = this.length - 1; i >= 0; i--) {
        l = this[i][0];
        if (l === "M" || l === "L" || l === "T") {
          this[i][1] += x2;
          this[i][2] += y2;
        } else if (l === "H") {
          this[i][1] += x2;
        } else if (l === "V") {
          this[i][1] += y2;
        } else if (l === "C" || l === "S" || l === "Q") {
          this[i][1] += x2;
          this[i][2] += y2;
          this[i][3] += x2;
          this[i][4] += y2;
          if (l === "C") {
            this[i][5] += x2;
            this[i][6] += y2;
          }
        } else if (l === "A") {
          this[i][6] += x2;
          this[i][7] += y2;
        }
      }
    }
    return this;
  }
  // Absolutize and parse path to array
  parse(d = "M0 0") {
    if (Array.isArray(d)) {
      d = Array.prototype.concat.apply([], d).toString();
    }
    return pathParser(d);
  }
  // Resize path string
  size(width2, height2) {
    const box = this.bbox();
    let i, l;
    box.width = box.width === 0 ? 1 : box.width;
    box.height = box.height === 0 ? 1 : box.height;
    for (i = this.length - 1; i >= 0; i--) {
      l = this[i][0];
      if (l === "M" || l === "L" || l === "T") {
        this[i][1] = (this[i][1] - box.x) * width2 / box.width + box.x;
        this[i][2] = (this[i][2] - box.y) * height2 / box.height + box.y;
      } else if (l === "H") {
        this[i][1] = (this[i][1] - box.x) * width2 / box.width + box.x;
      } else if (l === "V") {
        this[i][1] = (this[i][1] - box.y) * height2 / box.height + box.y;
      } else if (l === "C" || l === "S" || l === "Q") {
        this[i][1] = (this[i][1] - box.x) * width2 / box.width + box.x;
        this[i][2] = (this[i][2] - box.y) * height2 / box.height + box.y;
        this[i][3] = (this[i][3] - box.x) * width2 / box.width + box.x;
        this[i][4] = (this[i][4] - box.y) * height2 / box.height + box.y;
        if (l === "C") {
          this[i][5] = (this[i][5] - box.x) * width2 / box.width + box.x;
          this[i][6] = (this[i][6] - box.y) * height2 / box.height + box.y;
        }
      } else if (l === "A") {
        this[i][1] = this[i][1] * width2 / box.width;
        this[i][2] = this[i][2] * height2 / box.height;
        this[i][6] = (this[i][6] - box.x) * width2 / box.width + box.x;
        this[i][7] = (this[i][7] - box.y) * height2 / box.height + box.y;
      }
    }
    return this;
  }
  // Convert array to string
  toString() {
    return arrayToString(this);
  }
}
const getClassForType = (value) => {
  const type = typeof value;
  if (type === "number") {
    return SVGNumber;
  } else if (type === "string") {
    if (Color.isColor(value)) {
      return Color;
    } else if (delimiter.test(value)) {
      return isPathLetter.test(value) ? PathArray : SVGArray;
    } else if (numberAndUnit.test(value)) {
      return SVGNumber;
    } else {
      return NonMorphable;
    }
  } else if (morphableTypes.indexOf(value.constructor) > -1) {
    return value.constructor;
  } else if (Array.isArray(value)) {
    return SVGArray;
  } else if (type === "object") {
    return ObjectBag;
  } else {
    return NonMorphable;
  }
};
class Morphable {
  constructor(stepper) {
    this._stepper = stepper || new Ease("-");
    this._from = null;
    this._to = null;
    this._type = null;
    this._context = null;
    this._morphObj = null;
  }
  at(pos) {
    return this._morphObj.morph(
      this._from,
      this._to,
      pos,
      this._stepper,
      this._context
    );
  }
  done() {
    const complete = this._context.map(this._stepper.done).reduce(function(last, curr) {
      return last && curr;
    }, true);
    return complete;
  }
  from(val) {
    if (val == null) {
      return this._from;
    }
    this._from = this._set(val);
    return this;
  }
  stepper(stepper) {
    if (stepper == null)
      return this._stepper;
    this._stepper = stepper;
    return this;
  }
  to(val) {
    if (val == null) {
      return this._to;
    }
    this._to = this._set(val);
    return this;
  }
  type(type) {
    if (type == null) {
      return this._type;
    }
    this._type = type;
    return this;
  }
  _set(value) {
    if (!this._type) {
      this.type(getClassForType(value));
    }
    let result = new this._type(value);
    if (this._type === Color) {
      result = this._to ? result[this._to[4]]() : this._from ? result[this._from[4]]() : result;
    }
    if (this._type === ObjectBag) {
      result = this._to ? result.align(this._to) : this._from ? result.align(this._from) : result;
    }
    result = result.toConsumable();
    this._morphObj = this._morphObj || new this._type();
    this._context = this._context || Array.apply(null, Array(result.length)).map(Object).map(function(o) {
      o.done = true;
      return o;
    });
    return result;
  }
}
class NonMorphable {
  constructor(...args) {
    this.init(...args);
  }
  init(val) {
    val = Array.isArray(val) ? val[0] : val;
    this.value = val;
    return this;
  }
  toArray() {
    return [this.value];
  }
  valueOf() {
    return this.value;
  }
}
class TransformBag {
  constructor(...args) {
    this.init(...args);
  }
  init(obj) {
    if (Array.isArray(obj)) {
      obj = {
        scaleX: obj[0],
        scaleY: obj[1],
        shear: obj[2],
        rotate: obj[3],
        translateX: obj[4],
        translateY: obj[5],
        originX: obj[6],
        originY: obj[7]
      };
    }
    Object.assign(this, TransformBag.defaults, obj);
    return this;
  }
  toArray() {
    const v = this;
    return [
      v.scaleX,
      v.scaleY,
      v.shear,
      v.rotate,
      v.translateX,
      v.translateY,
      v.originX,
      v.originY
    ];
  }
}
TransformBag.defaults = {
  scaleX: 1,
  scaleY: 1,
  shear: 0,
  rotate: 0,
  translateX: 0,
  translateY: 0,
  originX: 0,
  originY: 0
};
const sortByKey = (a, b) => {
  return a[0] < b[0] ? -1 : a[0] > b[0] ? 1 : 0;
};
class ObjectBag {
  constructor(...args) {
    this.init(...args);
  }
  align(other) {
    const values = this.values;
    for (let i = 0, il = values.length; i < il; ++i) {
      if (values[i + 1] === other[i + 1]) {
        if (values[i + 1] === Color && other[i + 7] !== values[i + 7]) {
          const space = other[i + 7];
          const color = new Color(this.values.splice(i + 3, 5))[space]().toArray();
          this.values.splice(i + 3, 0, ...color);
        }
        i += values[i + 2] + 2;
        continue;
      }
      if (!other[i + 1]) {
        return this;
      }
      const defaultObject = new other[i + 1]().toArray();
      const toDelete = values[i + 2] + 3;
      values.splice(
        i,
        toDelete,
        other[i],
        other[i + 1],
        other[i + 2],
        ...defaultObject
      );
      i += values[i + 2] + 2;
    }
    return this;
  }
  init(objOrArr) {
    this.values = [];
    if (Array.isArray(objOrArr)) {
      this.values = objOrArr.slice();
      return;
    }
    objOrArr = objOrArr || {};
    const entries = [];
    for (const i in objOrArr) {
      const Type = getClassForType(objOrArr[i]);
      const val = new Type(objOrArr[i]).toArray();
      entries.push([i, Type, val.length, ...val]);
    }
    entries.sort(sortByKey);
    this.values = entries.reduce((last, curr) => last.concat(curr), []);
    return this;
  }
  toArray() {
    return this.values;
  }
  valueOf() {
    const obj = {};
    const arr = this.values;
    while (arr.length) {
      const key = arr.shift();
      const Type = arr.shift();
      const num = arr.shift();
      const values = arr.splice(0, num);
      obj[key] = new Type(values);
    }
    return obj;
  }
}
const morphableTypes = [NonMorphable, TransformBag, ObjectBag];
function registerMorphableType(type = []) {
  morphableTypes.push(...[].concat(type));
}
function makeMorphable() {
  extend(morphableTypes, {
    to(val) {
      return new Morphable().type(this.constructor).from(this.toArray()).to(val);
    },
    fromArray(arr) {
      this.init(arr);
      return this;
    },
    toConsumable() {
      return this.toArray();
    },
    morph(from2, to2, pos, stepper, context) {
      const mapper = function(i, index) {
        return stepper.step(i, to2[index], pos, context[index], context);
      };
      return this.fromArray(from2.map(mapper));
    }
  });
}
class Path extends Shape {
  // Initialize node
  constructor(node, attrs2 = node) {
    super(nodeOrNew("path", node), attrs2);
  }
  // Get array
  array() {
    return this._array || (this._array = new PathArray(this.attr("d")));
  }
  // Clear array cache
  clear() {
    delete this._array;
    return this;
  }
  // Set height of element
  height(height2) {
    return height2 == null ? this.bbox().height : this.size(this.bbox().width, height2);
  }
  // Move by left top corner
  move(x2, y2) {
    return this.attr("d", this.array().move(x2, y2));
  }
  // Plot new path
  plot(d) {
    return d == null ? this.array() : this.clear().attr(
      "d",
      typeof d === "string" ? d : this._array = new PathArray(d)
    );
  }
  // Set element size to given width and height
  size(width2, height2) {
    const p = proportionalSize(this, width2, height2);
    return this.attr("d", this.array().size(p.width, p.height));
  }
  // Set width of element
  width(width2) {
    return width2 == null ? this.bbox().width : this.size(width2, this.bbox().height);
  }
  // Move by left top corner over x-axis
  x(x2) {
    return x2 == null ? this.bbox().x : this.move(x2, this.bbox().y);
  }
  // Move by left top corner over y-axis
  y(y2) {
    return y2 == null ? this.bbox().y : this.move(this.bbox().x, y2);
  }
}
Path.prototype.MorphArray = PathArray;
registerMethods({
  Container: {
    // Create a wrapped path element
    path: wrapWithAttrCheck(function(d) {
      return this.put(new Path()).plot(d || new PathArray());
    })
  }
});
register(Path, "Path");
function array() {
  return this._array || (this._array = new PointArray(this.attr("points")));
}
function clear() {
  delete this._array;
  return this;
}
function move$2(x2, y2) {
  return this.attr("points", this.array().move(x2, y2));
}
function plot(p) {
  return p == null ? this.array() : this.clear().attr(
    "points",
    typeof p === "string" ? p : this._array = new PointArray(p)
  );
}
function size$1(width2, height2) {
  const p = proportionalSize(this, width2, height2);
  return this.attr("points", this.array().size(p.width, p.height));
}
const poly = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  array,
  clear,
  move: move$2,
  plot,
  size: size$1
}, Symbol.toStringTag, { value: "Module" }));
class Polygon extends Shape {
  // Initialize node
  constructor(node, attrs2 = node) {
    super(nodeOrNew("polygon", node), attrs2);
  }
}
registerMethods({
  Container: {
    // Create a wrapped polygon element
    polygon: wrapWithAttrCheck(function(p) {
      return this.put(new Polygon()).plot(p || new PointArray());
    })
  }
});
extend(Polygon, pointed);
extend(Polygon, poly);
register(Polygon, "Polygon");
class Polyline extends Shape {
  // Initialize node
  constructor(node, attrs2 = node) {
    super(nodeOrNew("polyline", node), attrs2);
  }
}
registerMethods({
  Container: {
    // Create a wrapped polygon element
    polyline: wrapWithAttrCheck(function(p) {
      return this.put(new Polyline()).plot(p || new PointArray());
    })
  }
});
extend(Polyline, pointed);
extend(Polyline, poly);
register(Polyline, "Polyline");
class Rect extends Shape {
  // Initialize node
  constructor(node, attrs2 = node) {
    super(nodeOrNew("rect", node), attrs2);
  }
}
extend(Rect, { rx, ry });
registerMethods({
  Container: {
    // Create a rect element
    rect: wrapWithAttrCheck(function(width2, height2) {
      return this.put(new Rect()).size(width2, height2);
    })
  }
});
register(Rect, "Rect");
class Queue {
  constructor() {
    this._first = null;
    this._last = null;
  }
  // Shows us the first item in the list
  first() {
    return this._first && this._first.value;
  }
  // Shows us the last item in the list
  last() {
    return this._last && this._last.value;
  }
  push(value) {
    const item = typeof value.next !== "undefined" ? value : { value, next: null, prev: null };
    if (this._last) {
      item.prev = this._last;
      this._last.next = item;
      this._last = item;
    } else {
      this._last = item;
      this._first = item;
    }
    return item;
  }
  // Removes the item that was returned from the push
  remove(item) {
    if (item.prev)
      item.prev.next = item.next;
    if (item.next)
      item.next.prev = item.prev;
    if (item === this._last)
      this._last = item.prev;
    if (item === this._first)
      this._first = item.next;
    item.prev = null;
    item.next = null;
  }
  shift() {
    const remove = this._first;
    if (!remove)
      return null;
    this._first = remove.next;
    if (this._first)
      this._first.prev = null;
    this._last = this._first ? this._last : null;
    return remove.value;
  }
}
const Animator = {
  nextDraw: null,
  frames: new Queue(),
  timeouts: new Queue(),
  immediates: new Queue(),
  timer: () => globals.window.performance || globals.window.Date,
  transforms: [],
  frame(fn) {
    const node = Animator.frames.push({ run: fn });
    if (Animator.nextDraw === null) {
      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw);
    }
    return node;
  },
  timeout(fn, delay) {
    delay = delay || 0;
    const time = Animator.timer().now() + delay;
    const node = Animator.timeouts.push({ run: fn, time });
    if (Animator.nextDraw === null) {
      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw);
    }
    return node;
  },
  immediate(fn) {
    const node = Animator.immediates.push(fn);
    if (Animator.nextDraw === null) {
      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw);
    }
    return node;
  },
  cancelFrame(node) {
    node != null && Animator.frames.remove(node);
  },
  clearTimeout(node) {
    node != null && Animator.timeouts.remove(node);
  },
  cancelImmediate(node) {
    node != null && Animator.immediates.remove(node);
  },
  _draw(now) {
    let nextTimeout = null;
    const lastTimeout = Animator.timeouts.last();
    while (nextTimeout = Animator.timeouts.shift()) {
      if (now >= nextTimeout.time) {
        nextTimeout.run();
      } else {
        Animator.timeouts.push(nextTimeout);
      }
      if (nextTimeout === lastTimeout)
        break;
    }
    let nextFrame = null;
    const lastFrame = Animator.frames.last();
    while (nextFrame !== lastFrame && (nextFrame = Animator.frames.shift())) {
      nextFrame.run(now);
    }
    let nextImmediate = null;
    while (nextImmediate = Animator.immediates.shift()) {
      nextImmediate();
    }
    Animator.nextDraw = Animator.timeouts.first() || Animator.frames.first() ? globals.window.requestAnimationFrame(Animator._draw) : null;
  }
};
const makeSchedule = function(runnerInfo) {
  const start = runnerInfo.start;
  const duration = runnerInfo.runner.duration();
  const end = start + duration;
  return {
    start,
    duration,
    end,
    runner: runnerInfo.runner
  };
};
const defaultSource = function() {
  const w = globals.window;
  return (w.performance || w.Date).now();
};
class Timeline extends EventTarget {
  // Construct a new timeline on the given element
  constructor(timeSource = defaultSource) {
    super();
    this._timeSource = timeSource;
    this.terminate();
  }
  active() {
    return !!this._nextFrame;
  }
  finish() {
    this.time(this.getEndTimeOfTimeline() + 1);
    return this.pause();
  }
  // Calculates the end of the timeline
  getEndTime() {
    const lastRunnerInfo = this.getLastRunnerInfo();
    const lastDuration = lastRunnerInfo ? lastRunnerInfo.runner.duration() : 0;
    const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time;
    return lastStartTime + lastDuration;
  }
  getEndTimeOfTimeline() {
    const endTimes = this._runners.map((i) => i.start + i.runner.duration());
    return Math.max(0, ...endTimes);
  }
  getLastRunnerInfo() {
    return this.getRunnerInfoById(this._lastRunnerId);
  }
  getRunnerInfoById(id) {
    return this._runners[this._runnerIds.indexOf(id)] || null;
  }
  pause() {
    this._paused = true;
    return this._continue();
  }
  persist(dtOrForever) {
    if (dtOrForever == null)
      return this._persist;
    this._persist = dtOrForever;
    return this;
  }
  play() {
    this._paused = false;
    return this.updateTime()._continue();
  }
  reverse(yes) {
    const currentSpeed = this.speed();
    if (yes == null)
      return this.speed(-currentSpeed);
    const positive = Math.abs(currentSpeed);
    return this.speed(yes ? -positive : positive);
  }
  // schedules a runner on the timeline
  schedule(runner, delay, when) {
    if (runner == null) {
      return this._runners.map(makeSchedule);
    }
    let absoluteStartTime = 0;
    const endTime = this.getEndTime();
    delay = delay || 0;
    if (when == null || when === "last" || when === "after") {
      absoluteStartTime = endTime;
    } else if (when === "absolute" || when === "start") {
      absoluteStartTime = delay;
      delay = 0;
    } else if (when === "now") {
      absoluteStartTime = this._time;
    } else if (when === "relative") {
      const runnerInfo2 = this.getRunnerInfoById(runner.id);
      if (runnerInfo2) {
        absoluteStartTime = runnerInfo2.start + delay;
        delay = 0;
      }
    } else if (when === "with-last") {
      const lastRunnerInfo = this.getLastRunnerInfo();
      const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time;
      absoluteStartTime = lastStartTime;
    } else {
      throw new Error('Invalid value for the "when" parameter');
    }
    runner.unschedule();
    runner.timeline(this);
    const persist = runner.persist();
    const runnerInfo = {
      persist: persist === null ? this._persist : persist,
      start: absoluteStartTime + delay,
      runner
    };
    this._lastRunnerId = runner.id;
    this._runners.push(runnerInfo);
    this._runners.sort((a, b) => a.start - b.start);
    this._runnerIds = this._runners.map((info) => info.runner.id);
    this.updateTime()._continue();
    return this;
  }
  seek(dt) {
    return this.time(this._time + dt);
  }
  source(fn) {
    if (fn == null)
      return this._timeSource;
    this._timeSource = fn;
    return this;
  }
  speed(speed) {
    if (speed == null)
      return this._speed;
    this._speed = speed;
    return this;
  }
  stop() {
    this.time(0);
    return this.pause();
  }
  time(time) {
    if (time == null)
      return this._time;
    this._time = time;
    return this._continue(true);
  }
  // Remove the runner from this timeline
  unschedule(runner) {
    const index = this._runnerIds.indexOf(runner.id);
    if (index < 0)
      return this;
    this._runners.splice(index, 1);
    this._runnerIds.splice(index, 1);
    runner.timeline(null);
    return this;
  }
  // Makes sure, that after pausing the time doesn't jump
  updateTime() {
    if (!this.active()) {
      this._lastSourceTime = this._timeSource();
    }
    return this;
  }
  // Checks if we are running and continues the animation
  _continue(immediateStep = false) {
    Animator.cancelFrame(this._nextFrame);
    this._nextFrame = null;
    if (immediateStep)
      return this._stepImmediate();
    if (this._paused)
      return this;
    this._nextFrame = Animator.frame(this._step);
    return this;
  }
  _stepFn(immediateStep = false) {
    const time = this._timeSource();
    let dtSource = time - this._lastSourceTime;
    if (immediateStep)
      dtSource = 0;
    const dtTime = this._speed * dtSource + (this._time - this._lastStepTime);
    this._lastSourceTime = time;
    if (!immediateStep) {
      this._time += dtTime;
      this._time = this._time < 0 ? 0 : this._time;
    }
    this._lastStepTime = this._time;
    this.fire("time", this._time);
    for (let k = this._runners.length; k--; ) {
      const runnerInfo = this._runners[k];
      const runner = runnerInfo.runner;
      const dtToStart = this._time - runnerInfo.start;
      if (dtToStart <= 0) {
        runner.reset();
      }
    }
    let runnersLeft = false;
    for (let i = 0, len = this._runners.length; i < len; i++) {
      const runnerInfo = this._runners[i];
      const runner = runnerInfo.runner;
      let dt = dtTime;
      const dtToStart = this._time - runnerInfo.start;
      if (dtToStart <= 0) {
        runnersLeft = true;
        continue;
      } else if (dtToStart < dt) {
        dt = dtToStart;
      }
      if (!runner.active())
        continue;
      const finished = runner.step(dt).done;
      if (!finished) {
        runnersLeft = true;
      } else if (runnerInfo.persist !== true) {
        const endTime = runner.duration() - runner.time() + this._time;
        if (endTime + runnerInfo.persist < this._time) {
          runner.unschedule();
          --i;
          --len;
        }
      }
    }
    if (runnersLeft && !(this._speed < 0 && this._time === 0) || this._runnerIds.length && this._speed < 0 && this._time > 0) {
      this._continue();
    } else {
      this.pause();
      this.fire("finished");
    }
    return this;
  }
  terminate() {
    this._startTime = 0;
    this._speed = 1;
    this._persist = 0;
    this._nextFrame = null;
    this._paused = true;
    this._runners = [];
    this._runnerIds = [];
    this._lastRunnerId = -1;
    this._time = 0;
    this._lastSourceTime = 0;
    this._lastStepTime = 0;
    this._step = this._stepFn.bind(this, false);
    this._stepImmediate = this._stepFn.bind(this, true);
  }
}
registerMethods({
  Element: {
    timeline: function(timeline2) {
      if (timeline2 == null) {
        this._timeline = this._timeline || new Timeline();
        return this._timeline;
      } else {
        this._timeline = timeline2;
        return this;
      }
    }
  }
});
class Runner extends EventTarget {
  constructor(options) {
    super();
    this.id = Runner.id++;
    options = options == null ? timeline.duration : options;
    options = typeof options === "function" ? new Controller(options) : options;
    this._element = null;
    this._timeline = null;
    this.done = false;
    this._queue = [];
    this._duration = typeof options === "number" && options;
    this._isDeclarative = options instanceof Controller;
    this._stepper = this._isDeclarative ? options : new Ease();
    this._history = {};
    this.enabled = true;
    this._time = 0;
    this._lastTime = 0;
    this._reseted = true;
    this.transforms = new Matrix();
    this.transformId = 1;
    this._haveReversed = false;
    this._reverse = false;
    this._loopsDone = 0;
    this._swing = false;
    this._wait = 0;
    this._times = 1;
    this._frameId = null;
    this._persist = this._isDeclarative ? true : null;
  }
  static sanitise(duration, delay, when) {
    let times = 1;
    let swing = false;
    let wait = 0;
    duration = duration ?? timeline.duration;
    delay = delay ?? timeline.delay;
    when = when || "last";
    if (typeof duration === "object" && !(duration instanceof Stepper)) {
      delay = duration.delay ?? delay;
      when = duration.when ?? when;
      swing = duration.swing || swing;
      times = duration.times ?? times;
      wait = duration.wait ?? wait;
      duration = duration.duration ?? timeline.duration;
    }
    return {
      duration,
      delay,
      swing,
      times,
      wait,
      when
    };
  }
  active(enabled) {
    if (enabled == null)
      return this.enabled;
    this.enabled = enabled;
    return this;
  }
  /*
  Private Methods
  ===============
  Methods that shouldn't be used externally
  */
  addTransform(transform2) {
    this.transforms.lmultiplyO(transform2);
    return this;
  }
  after(fn) {
    return this.on("finished", fn);
  }
  animate(duration, delay, when) {
    const o = Runner.sanitise(duration, delay, when);
    const runner = new Runner(o.duration);
    if (this._timeline)
      runner.timeline(this._timeline);
    if (this._element)
      runner.element(this._element);
    return runner.loop(o).schedule(o.delay, o.when);
  }
  clearTransform() {
    this.transforms = new Matrix();
    return this;
  }
  // TODO: Keep track of all transformations so that deletion is faster
  clearTransformsFromQueue() {
    if (!this.done || !this._timeline || !this._timeline._runnerIds.includes(this.id)) {
      this._queue = this._queue.filter((item) => {
        return !item.isTransform;
      });
    }
  }
  delay(delay) {
    return this.animate(0, delay);
  }
  duration() {
    return this._times * (this._wait + this._duration) - this._wait;
  }
  during(fn) {
    return this.queue(null, fn);
  }
  ease(fn) {
    this._stepper = new Ease(fn);
    return this;
  }
  /*
  Runner Definitions
  ==================
  These methods help us define the runtime behaviour of the Runner or they
  help us make new runners from the current runner
  */
  element(element) {
    if (element == null)
      return this._element;
    this._element = element;
    element._prepareRunner();
    return this;
  }
  finish() {
    return this.step(Infinity);
  }
  loop(times, swing, wait) {
    if (typeof times === "object") {
      swing = times.swing;
      wait = times.wait;
      times = times.times;
    }
    this._times = times || Infinity;
    this._swing = swing || false;
    this._wait = wait || 0;
    if (this._times === true) {
      this._times = Infinity;
    }
    return this;
  }
  loops(p) {
    const loopDuration = this._duration + this._wait;
    if (p == null) {
      const loopsDone = Math.floor(this._time / loopDuration);
      const relativeTime = this._time - loopsDone * loopDuration;
      const position2 = relativeTime / this._duration;
      return Math.min(loopsDone + position2, this._times);
    }
    const whole = Math.floor(p);
    const partial = p % 1;
    const time = loopDuration * whole + this._duration * partial;
    return this.time(time);
  }
  persist(dtOrForever) {
    if (dtOrForever == null)
      return this._persist;
    this._persist = dtOrForever;
    return this;
  }
  position(p) {
    const x2 = this._time;
    const d = this._duration;
    const w = this._wait;
    const t = this._times;
    const s = this._swing;
    const r = this._reverse;
    let position2;
    if (p == null) {
      const f = function(x3) {
        const swinging = s * Math.floor(x3 % (2 * (w + d)) / (w + d));
        const backwards = swinging && !r || !swinging && r;
        const uncliped = Math.pow(-1, backwards) * (x3 % (w + d)) / d + backwards;
        const clipped = Math.max(Math.min(uncliped, 1), 0);
        return clipped;
      };
      const endTime = t * (w + d) - w;
      position2 = x2 <= 0 ? Math.round(f(1e-5)) : x2 < endTime ? f(x2) : Math.round(f(endTime - 1e-5));
      return position2;
    }
    const loopsDone = Math.floor(this.loops());
    const swingForward = s && loopsDone % 2 === 0;
    const forwards = swingForward && !r || r && swingForward;
    position2 = loopsDone + (forwards ? p : 1 - p);
    return this.loops(position2);
  }
  progress(p) {
    if (p == null) {
      return Math.min(1, this._time / this.duration());
    }
    return this.time(p * this.duration());
  }
  /*
  Basic Functionality
  ===================
  These methods allow us to attach basic functions to the runner directly
  */
  queue(initFn, runFn, retargetFn, isTransform) {
    this._queue.push({
      initialiser: initFn || noop,
      runner: runFn || noop,
      retarget: retargetFn,
      isTransform,
      initialised: false,
      finished: false
    });
    const timeline2 = this.timeline();
    timeline2 && this.timeline()._continue();
    return this;
  }
  reset() {
    if (this._reseted)
      return this;
    this.time(0);
    this._reseted = true;
    return this;
  }
  reverse(reverse) {
    this._reverse = reverse == null ? !this._reverse : reverse;
    return this;
  }
  schedule(timeline2, delay, when) {
    if (!(timeline2 instanceof Timeline)) {
      when = delay;
      delay = timeline2;
      timeline2 = this.timeline();
    }
    if (!timeline2) {
      throw Error("Runner cannot be scheduled without timeline");
    }
    timeline2.schedule(this, delay, when);
    return this;
  }
  step(dt) {
    if (!this.enabled)
      return this;
    dt = dt == null ? 16 : dt;
    this._time += dt;
    const position2 = this.position();
    const running = this._lastPosition !== position2 && this._time >= 0;
    this._lastPosition = position2;
    const duration = this.duration();
    const justStarted = this._lastTime <= 0 && this._time > 0;
    const justFinished = this._lastTime < duration && this._time >= duration;
    this._lastTime = this._time;
    if (justStarted) {
      this.fire("start", this);
    }
    const declarative = this._isDeclarative;
    this.done = !declarative && !justFinished && this._time >= duration;
    this._reseted = false;
    let converged = false;
    if (running || declarative) {
      this._initialise(running);
      this.transforms = new Matrix();
      converged = this._run(declarative ? dt : position2);
      this.fire("step", this);
    }
    this.done = this.done || converged && declarative;
    if (justFinished) {
      this.fire("finished", this);
    }
    return this;
  }
  /*
  Runner animation methods
  ========================
  Control how the animation plays
  */
  time(time) {
    if (time == null) {
      return this._time;
    }
    const dt = time - this._time;
    this.step(dt);
    return this;
  }
  timeline(timeline2) {
    if (typeof timeline2 === "undefined")
      return this._timeline;
    this._timeline = timeline2;
    return this;
  }
  unschedule() {
    const timeline2 = this.timeline();
    timeline2 && timeline2.unschedule(this);
    return this;
  }
  // Run each initialise function in the runner if required
  _initialise(running) {
    if (!running && !this._isDeclarative)
      return;
    for (let i = 0, len = this._queue.length; i < len; ++i) {
      const current = this._queue[i];
      const needsIt = this._isDeclarative || !current.initialised && running;
      running = !current.finished;
      if (needsIt && running) {
        current.initialiser.call(this);
        current.initialised = true;
      }
    }
  }
  // Save a morpher to the morpher list so that we can retarget it later
  _rememberMorpher(method, morpher) {
    this._history[method] = {
      morpher,
      caller: this._queue[this._queue.length - 1]
    };
    if (this._isDeclarative) {
      const timeline2 = this.timeline();
      timeline2 && timeline2.play();
    }
  }
  // Try to set the target for a morpher if the morpher exists, otherwise
  // Run each run function for the position or dt given
  _run(positionOrDt) {
    let allfinished = true;
    for (let i = 0, len = this._queue.length; i < len; ++i) {
      const current = this._queue[i];
      const converged = current.runner.call(this, positionOrDt);
      current.finished = current.finished || converged === true;
      allfinished = allfinished && current.finished;
    }
    return allfinished;
  }
  // do nothing and return false
  _tryRetarget(method, target, extra) {
    if (this._history[method]) {
      if (!this._history[method].caller.initialised) {
        const index = this._queue.indexOf(this._history[method].caller);
        this._queue.splice(index, 1);
        return false;
      }
      if (this._history[method].caller.retarget) {
        this._history[method].caller.retarget.call(this, target, extra);
      } else {
        this._history[method].morpher.to(target);
      }
      this._history[method].caller.finished = false;
      const timeline2 = this.timeline();
      timeline2 && timeline2.play();
      return true;
    }
    return false;
  }
}
Runner.id = 0;
class FakeRunner {
  constructor(transforms2 = new Matrix(), id = -1, done = true) {
    this.transforms = transforms2;
    this.id = id;
    this.done = done;
  }
  clearTransformsFromQueue() {
  }
}
extend([Runner, FakeRunner], {
  mergeWith(runner) {
    return new FakeRunner(
      runner.transforms.lmultiply(this.transforms),
      runner.id
    );
  }
});
const lmultiply = (last, curr) => last.lmultiplyO(curr);
const getRunnerTransform = (runner) => runner.transforms;
function mergeTransforms() {
  const runners = this._transformationRunners.runners;
  const netTransform = runners.map(getRunnerTransform).reduce(lmultiply, new Matrix());
  this.transform(netTransform);
  this._transformationRunners.merge();
  if (this._transformationRunners.length() === 1) {
    this._frameId = null;
  }
}
class RunnerArray {
  constructor() {
    this.runners = [];
    this.ids = [];
  }
  add(runner) {
    if (this.runners.includes(runner))
      return;
    const id = runner.id + 1;
    this.runners.push(runner);
    this.ids.push(id);
    return this;
  }
  clearBefore(id) {
    const deleteCnt = this.ids.indexOf(id + 1) || 1;
    this.ids.splice(0, deleteCnt, 0);
    this.runners.splice(0, deleteCnt, new FakeRunner()).forEach((r) => r.clearTransformsFromQueue());
    return this;
  }
  edit(id, newRunner) {
    const index = this.ids.indexOf(id + 1);
    this.ids.splice(index, 1, id + 1);
    this.runners.splice(index, 1, newRunner);
    return this;
  }
  getByID(id) {
    return this.runners[this.ids.indexOf(id + 1)];
  }
  length() {
    return this.ids.length;
  }
  merge() {
    let lastRunner = null;
    for (let i = 0; i < this.runners.length; ++i) {
      const runner = this.runners[i];
      const condition = lastRunner && runner.done && lastRunner.done && // don't merge runner when persisted on timeline
      (!runner._timeline || !runner._timeline._runnerIds.includes(runner.id)) && (!lastRunner._timeline || !lastRunner._timeline._runnerIds.includes(lastRunner.id));
      if (condition) {
        this.remove(runner.id);
        const newRunner = runner.mergeWith(lastRunner);
        this.edit(lastRunner.id, newRunner);
        lastRunner = newRunner;
        --i;
      } else {
        lastRunner = runner;
      }
    }
    return this;
  }
  remove(id) {
    const index = this.ids.indexOf(id + 1);
    this.ids.splice(index, 1);
    this.runners.splice(index, 1);
    return this;
  }
}
registerMethods({
  Element: {
    animate(duration, delay, when) {
      const o = Runner.sanitise(duration, delay, when);
      const timeline2 = this.timeline();
      return new Runner(o.duration).loop(o).element(this).timeline(timeline2.play()).schedule(o.delay, o.when);
    },
    delay(by, when) {
      return this.animate(0, by, when);
    },
    // this function searches for all runners on the element and deletes the ones
    // which run before the current one. This is because absolute transformations
    // overwrite anything anyway so there is no need to waste time computing
    // other runners
    _clearTransformRunnersBefore(currentRunner) {
      this._transformationRunners.clearBefore(currentRunner.id);
    },
    _currentTransform(current) {
      return this._transformationRunners.runners.filter((runner) => runner.id <= current.id).map(getRunnerTransform).reduce(lmultiply, new Matrix());
    },
    _addRunner(runner) {
      this._transformationRunners.add(runner);
      Animator.cancelImmediate(this._frameId);
      this._frameId = Animator.immediate(mergeTransforms.bind(this));
    },
    _prepareRunner() {
      if (this._frameId == null) {
        this._transformationRunners = new RunnerArray().add(
          new FakeRunner(new Matrix(this))
        );
      }
    }
  }
});
const difference = (a, b) => a.filter((x2) => !b.includes(x2));
extend(Runner, {
  attr(a, v) {
    return this.styleAttr("attr", a, v);
  },
  // Add animatable styles
  css(s, v) {
    return this.styleAttr("css", s, v);
  },
  styleAttr(type, nameOrAttrs, val) {
    if (typeof nameOrAttrs === "string") {
      return this.styleAttr(type, { [nameOrAttrs]: val });
    }
    let attrs2 = nameOrAttrs;
    if (this._tryRetarget(type, attrs2))
      return this;
    let morpher = new Morphable(this._stepper).to(attrs2);
    let keys2 = Object.keys(attrs2);
    this.queue(
      function() {
        morpher = morpher.from(this.element()[type](keys2));
      },
      function(pos) {
        this.element()[type](morpher.at(pos).valueOf());
        return morpher.done();
      },
      function(newToAttrs) {
        const newKeys = Object.keys(newToAttrs);
        const differences = difference(newKeys, keys2);
        if (differences.length) {
          const addedFromAttrs = this.element()[type](differences);
          const oldFromAttrs = new ObjectBag(morpher.from()).valueOf();
          Object.assign(oldFromAttrs, addedFromAttrs);
          morpher.from(oldFromAttrs);
        }
        const oldToAttrs = new ObjectBag(morpher.to()).valueOf();
        Object.assign(oldToAttrs, newToAttrs);
        morpher.to(oldToAttrs);
        keys2 = newKeys;
        attrs2 = newToAttrs;
      }
    );
    this._rememberMorpher(type, morpher);
    return this;
  },
  zoom(level, point2) {
    if (this._tryRetarget("zoom", level, point2))
      return this;
    let morpher = new Morphable(this._stepper).to(new SVGNumber(level));
    this.queue(
      function() {
        morpher = morpher.from(this.element().zoom());
      },
      function(pos) {
        this.element().zoom(morpher.at(pos), point2);
        return morpher.done();
      },
      function(newLevel, newPoint) {
        point2 = newPoint;
        morpher.to(newLevel);
      }
    );
    this._rememberMorpher("zoom", morpher);
    return this;
  },
  /**
   ** absolute transformations
   **/
  //
  // M v -----|-----(D M v = F v)------|----->  T v
  //
  // 1. define the final state (T) and decompose it (once)
  //    t = [tx, ty, the, lam, sy, sx]
  // 2. on every frame: pull the current state of all previous transforms
  //    (M - m can change)
  //   and then write this as m = [tx0, ty0, the0, lam0, sy0, sx0]
  // 3. Find the interpolated matrix F(pos) = m + pos * (t - m)
  //   - Note F(0) = M
  //   - Note F(1) = T
  // 4. Now you get the delta matrix as a result: D = F * inv(M)
  transform(transforms2, relative, affine) {
    relative = transforms2.relative || relative;
    if (this._isDeclarative && !relative && this._tryRetarget("transform", transforms2)) {
      return this;
    }
    const isMatrix = Matrix.isMatrixLike(transforms2);
    affine = transforms2.affine != null ? transforms2.affine : affine != null ? affine : !isMatrix;
    const morpher = new Morphable(this._stepper).type(
      affine ? TransformBag : Matrix
    );
    let origin;
    let element;
    let current;
    let currentAngle;
    let startTransform;
    function setup() {
      element = element || this.element();
      origin = origin || getOrigin(transforms2, element);
      startTransform = new Matrix(relative ? void 0 : element);
      element._addRunner(this);
      if (!relative) {
        element._clearTransformRunnersBefore(this);
      }
    }
    function run(pos) {
      if (!relative)
        this.clearTransform();
      const { x: x2, y: y2 } = new Point(origin).transform(
        element._currentTransform(this)
      );
      let target = new Matrix({ ...transforms2, origin: [x2, y2] });
      let start = this._isDeclarative && current ? current : startTransform;
      if (affine) {
        target = target.decompose(x2, y2);
        start = start.decompose(x2, y2);
        const rTarget = target.rotate;
        const rCurrent = start.rotate;
        const possibilities = [rTarget - 360, rTarget, rTarget + 360];
        const distances = possibilities.map((a) => Math.abs(a - rCurrent));
        const shortest = Math.min(...distances);
        const index = distances.indexOf(shortest);
        target.rotate = possibilities[index];
      }
      if (relative) {
        if (!isMatrix) {
          target.rotate = transforms2.rotate || 0;
        }
        if (this._isDeclarative && currentAngle) {
          start.rotate = currentAngle;
        }
      }
      morpher.from(start);
      morpher.to(target);
      const affineParameters = morpher.at(pos);
      currentAngle = affineParameters.rotate;
      current = new Matrix(affineParameters);
      this.addTransform(current);
      element._addRunner(this);
      return morpher.done();
    }
    function retarget(newTransforms) {
      if ((newTransforms.origin || "center").toString() !== (transforms2.origin || "center").toString()) {
        origin = getOrigin(newTransforms, element);
      }
      transforms2 = { ...newTransforms, origin };
    }
    this.queue(setup, run, retarget, true);
    this._isDeclarative && this._rememberMorpher("transform", morpher);
    return this;
  },
  // Animatable x-axis
  x(x2) {
    return this._queueNumber("x", x2);
  },
  // Animatable y-axis
  y(y2) {
    return this._queueNumber("y", y2);
  },
  ax(x2) {
    return this._queueNumber("ax", x2);
  },
  ay(y2) {
    return this._queueNumber("ay", y2);
  },
  dx(x2 = 0) {
    return this._queueNumberDelta("x", x2);
  },
  dy(y2 = 0) {
    return this._queueNumberDelta("y", y2);
  },
  dmove(x2, y2) {
    return this.dx(x2).dy(y2);
  },
  _queueNumberDelta(method, to2) {
    to2 = new SVGNumber(to2);
    if (this._tryRetarget(method, to2))
      return this;
    const morpher = new Morphable(this._stepper).to(to2);
    let from2 = null;
    this.queue(
      function() {
        from2 = this.element()[method]();
        morpher.from(from2);
        morpher.to(from2 + to2);
      },
      function(pos) {
        this.element()[method](morpher.at(pos));
        return morpher.done();
      },
      function(newTo) {
        morpher.to(from2 + new SVGNumber(newTo));
      }
    );
    this._rememberMorpher(method, morpher);
    return this;
  },
  _queueObject(method, to2) {
    if (this._tryRetarget(method, to2))
      return this;
    const morpher = new Morphable(this._stepper).to(to2);
    this.queue(
      function() {
        morpher.from(this.element()[method]());
      },
      function(pos) {
        this.element()[method](morpher.at(pos));
        return morpher.done();
      }
    );
    this._rememberMorpher(method, morpher);
    return this;
  },
  _queueNumber(method, value) {
    return this._queueObject(method, new SVGNumber(value));
  },
  // Animatable center x-axis
  cx(x2) {
    return this._queueNumber("cx", x2);
  },
  // Animatable center y-axis
  cy(y2) {
    return this._queueNumber("cy", y2);
  },
  // Add animatable move
  move(x2, y2) {
    return this.x(x2).y(y2);
  },
  amove(x2, y2) {
    return this.ax(x2).ay(y2);
  },
  // Add animatable center
  center(x2, y2) {
    return this.cx(x2).cy(y2);
  },
  // Add animatable size
  size(width2, height2) {
    let box;
    if (!width2 || !height2) {
      box = this._element.bbox();
    }
    if (!width2) {
      width2 = box.width / box.height * height2;
    }
    if (!height2) {
      height2 = box.height / box.width * width2;
    }
    return this.width(width2).height(height2);
  },
  // Add animatable width
  width(width2) {
    return this._queueNumber("width", width2);
  },
  // Add animatable height
  height(height2) {
    return this._queueNumber("height", height2);
  },
  // Add animatable plot
  plot(a, b, c, d) {
    if (arguments.length === 4) {
      return this.plot([a, b, c, d]);
    }
    if (this._tryRetarget("plot", a))
      return this;
    const morpher = new Morphable(this._stepper).type(this._element.MorphArray).to(a);
    this.queue(
      function() {
        morpher.from(this._element.array());
      },
      function(pos) {
        this._element.plot(morpher.at(pos));
        return morpher.done();
      }
    );
    this._rememberMorpher("plot", morpher);
    return this;
  },
  // Add leading method
  leading(value) {
    return this._queueNumber("leading", value);
  },
  // Add animatable viewbox
  viewbox(x2, y2, width2, height2) {
    return this._queueObject("viewbox", new Box(x2, y2, width2, height2));
  },
  update(o) {
    if (typeof o !== "object") {
      return this.update({
        offset: arguments[0],
        color: arguments[1],
        opacity: arguments[2]
      });
    }
    if (o.opacity != null)
      this.attr("stop-opacity", o.opacity);
    if (o.color != null)
      this.attr("stop-color", o.color);
    if (o.offset != null)
      this.attr("offset", o.offset);
    return this;
  }
});
extend(Runner, { rx, ry, from, to });
register(Runner, "Runner");
class Svg extends Container {
  constructor(node, attrs2 = node) {
    super(nodeOrNew("svg", node), attrs2);
    this.namespace();
  }
  // Creates and returns defs element
  defs() {
    if (!this.isRoot())
      return this.root().defs();
    return adopt(this.node.querySelector("defs")) || this.put(new Defs());
  }
  isRoot() {
    return !this.node.parentNode || !(this.node.parentNode instanceof globals.window.SVGElement) && this.node.parentNode.nodeName !== "#document-fragment";
  }
  // Add namespaces
  namespace() {
    if (!this.isRoot())
      return this.root().namespace();
    return this.attr({ xmlns: svg, version: "1.1" }).attr(
      "xmlns:xlink",
      xlink,
      xmlns
    );
  }
  removeNamespace() {
    return this.attr({ xmlns: null, version: null }).attr("xmlns:xlink", null, xmlns).attr("xmlns:svgjs", null, xmlns);
  }
  // Check if this is a root svg
  // If not, call root() from this element
  root() {
    if (this.isRoot())
      return this;
    return super.root();
  }
}
registerMethods({
  Container: {
    // Create nested svg document
    nested: wrapWithAttrCheck(function() {
      return this.put(new Svg());
    })
  }
});
register(Svg, "Svg", true);
let Symbol$2 = class Symbol2 extends Container {
  // Initialize node
  constructor(node, attrs2 = node) {
    super(nodeOrNew("symbol", node), attrs2);
  }
};
registerMethods({
  Container: {
    symbol: wrapWithAttrCheck(function() {
      return this.put(new Symbol$2());
    })
  }
});
register(Symbol$2, "Symbol");
function plain(text) {
  if (this._build === false) {
    this.clear();
  }
  this.node.appendChild(globals.document.createTextNode(text));
  return this;
}
function length() {
  return this.node.getComputedTextLength();
}
function x$1(x2, box = this.bbox()) {
  if (x2 == null) {
    return box.x;
  }
  return this.attr("x", this.attr("x") + x2 - box.x);
}
function y$1(y2, box = this.bbox()) {
  if (y2 == null) {
    return box.y;
  }
  return this.attr("y", this.attr("y") + y2 - box.y);
}
function move$1(x2, y2, box = this.bbox()) {
  return this.x(x2, box).y(y2, box);
}
function cx(x2, box = this.bbox()) {
  if (x2 == null) {
    return box.cx;
  }
  return this.attr("x", this.attr("x") + x2 - box.cx);
}
function cy(y2, box = this.bbox()) {
  if (y2 == null) {
    return box.cy;
  }
  return this.attr("y", this.attr("y") + y2 - box.cy);
}
function center(x2, y2, box = this.bbox()) {
  return this.cx(x2, box).cy(y2, box);
}
function ax(x2) {
  return this.attr("x", x2);
}
function ay(y2) {
  return this.attr("y", y2);
}
function amove(x2, y2) {
  return this.ax(x2).ay(y2);
}
function build(build2) {
  this._build = !!build2;
  return this;
}
const textable = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  amove,
  ax,
  ay,
  build,
  center,
  cx,
  cy,
  length,
  move: move$1,
  plain,
  x: x$1,
  y: y$1
}, Symbol.toStringTag, { value: "Module" }));
class Text extends Shape {
  // Initialize node
  constructor(node, attrs2 = node) {
    super(nodeOrNew("text", node), attrs2);
    this.dom.leading = this.dom.leading ?? new SVGNumber(1.3);
    this._rebuild = true;
    this._build = false;
  }
  // Set / get leading
  leading(value) {
    if (value == null) {
      return this.dom.leading;
    }
    this.dom.leading = new SVGNumber(value);
    return this.rebuild();
  }
  // Rebuild appearance type
  rebuild(rebuild) {
    if (typeof rebuild === "boolean") {
      this._rebuild = rebuild;
    }
    if (this._rebuild) {
      const self2 = this;
      let blankLineOffset = 0;
      const leading = this.dom.leading;
      this.each(function(i) {
        if (isDescriptive(this.node))
          return;
        const fontSize = globals.window.getComputedStyle(this.node).getPropertyValue("font-size");
        const dy2 = leading * new SVGNumber(fontSize);
        if (this.dom.newLined) {
          this.attr("x", self2.attr("x"));
          if (this.text() === "\n") {
            blankLineOffset += dy2;
          } else {
            this.attr("dy", i ? dy2 + blankLineOffset : 0);
            blankLineOffset = 0;
          }
        }
      });
      this.fire("rebuild");
    }
    return this;
  }
  // overwrite method from parent to set data properly
  setData(o) {
    this.dom = o;
    this.dom.leading = new SVGNumber(o.leading || 1.3);
    return this;
  }
  writeDataToDom() {
    writeDataToDom(this, this.dom, { leading: 1.3 });
    return this;
  }
  // Set the text content
  text(text) {
    if (text === void 0) {
      const children = this.node.childNodes;
      let firstLine = 0;
      text = "";
      for (let i = 0, len = children.length; i < len; ++i) {
        if (children[i].nodeName === "textPath" || isDescriptive(children[i])) {
          if (i === 0)
            firstLine = i + 1;
          continue;
        }
        if (i !== firstLine && children[i].nodeType !== 3 && adopt(children[i]).dom.newLined === true) {
          text += "\n";
        }
        text += children[i].textContent;
      }
      return text;
    }
    this.clear().build(true);
    if (typeof text === "function") {
      text.call(this, this);
    } else {
      text = (text + "").split("\n");
      for (let j = 0, jl = text.length; j < jl; j++) {
        this.newLine(text[j]);
      }
    }
    return this.build(false).rebuild();
  }
}
extend(Text, textable);
registerMethods({
  Container: {
    // Create text element
    text: wrapWithAttrCheck(function(text = "") {
      return this.put(new Text()).text(text);
    }),
    // Create plain text element
    plain: wrapWithAttrCheck(function(text = "") {
      return this.put(new Text()).plain(text);
    })
  }
});
register(Text, "Text");
class Tspan extends Shape {
  // Initialize node
  constructor(node, attrs2 = node) {
    super(nodeOrNew("tspan", node), attrs2);
    this._build = false;
  }
  // Shortcut dx
  dx(dx2) {
    return this.attr("dx", dx2);
  }
  // Shortcut dy
  dy(dy2) {
    return this.attr("dy", dy2);
  }
  // Create new line
  newLine() {
    this.dom.newLined = true;
    const text = this.parent();
    if (!(text instanceof Text)) {
      return this;
    }
    const i = text.index(this);
    const fontSize = globals.window.getComputedStyle(this.node).getPropertyValue("font-size");
    const dy2 = text.dom.leading * new SVGNumber(fontSize);
    return this.dy(i ? dy2 : 0).attr("x", text.x());
  }
  // Set text content
  text(text) {
    if (text == null)
      return this.node.textContent + (this.dom.newLined ? "\n" : "");
    if (typeof text === "function") {
      this.clear().build(true);
      text.call(this, this);
      this.build(false);
    } else {
      this.plain(text);
    }
    return this;
  }
}
extend(Tspan, textable);
registerMethods({
  Tspan: {
    tspan: wrapWithAttrCheck(function(text = "") {
      const tspan = new Tspan();
      if (!this._build) {
        this.clear();
      }
      return this.put(tspan).text(text);
    })
  },
  Text: {
    newLine: function(text = "") {
      return this.tspan(text).newLine();
    }
  }
});
register(Tspan, "Tspan");
class Circle extends Shape {
  constructor(node, attrs2 = node) {
    super(nodeOrNew("circle", node), attrs2);
  }
  radius(r) {
    return this.attr("r", r);
  }
  // Radius x value
  rx(rx2) {
    return this.attr("r", rx2);
  }
  // Alias radius x value
  ry(ry2) {
    return this.rx(ry2);
  }
  size(size2) {
    return this.radius(new SVGNumber(size2).divide(2));
  }
}
extend(Circle, { x: x$3, y: y$3, cx: cx$1, cy: cy$1, width: width$2, height: height$2 });
registerMethods({
  Container: {
    // Create circle element
    circle: wrapWithAttrCheck(function(size2 = 0) {
      return this.put(new Circle()).size(size2).move(0, 0);
    })
  }
});
register(Circle, "Circle");
class ClipPath extends Container {
  constructor(node, attrs2 = node) {
    super(nodeOrNew("clipPath", node), attrs2);
  }
  // Unclip all clipped elements and remove itself
  remove() {
    this.targets().forEach(function(el) {
      el.unclip();
    });
    return super.remove();
  }
  targets() {
    return baseFind("svg [clip-path*=" + this.id() + "]");
  }
}
registerMethods({
  Container: {
    // Create clipping element
    clip: wrapWithAttrCheck(function() {
      return this.defs().put(new ClipPath());
    })
  },
  Element: {
    // Distribute clipPath to svg element
    clipper() {
      return this.reference("clip-path");
    },
    clipWith(element) {
      const clipper = element instanceof ClipPath ? element : this.parent().clip().add(element);
      return this.attr("clip-path", "url(#" + clipper.id() + ")");
    },
    // Unclip element
    unclip() {
      return this.attr("clip-path", null);
    }
  }
});
register(ClipPath, "ClipPath");
class ForeignObject extends Element {
  constructor(node, attrs2 = node) {
    super(nodeOrNew("foreignObject", node), attrs2);
  }
}
registerMethods({
  Container: {
    foreignObject: wrapWithAttrCheck(function(width2, height2) {
      return this.put(new ForeignObject()).size(width2, height2);
    })
  }
});
register(ForeignObject, "ForeignObject");
function dmove(dx2, dy2) {
  this.children().forEach((child) => {
    let bbox2;
    try {
      bbox2 = child.node instanceof getWindow().SVGSVGElement ? new Box(child.attr(["x", "y", "width", "height"])) : child.bbox();
    } catch (e) {
      return;
    }
    const m = new Matrix(child);
    const matrix = m.translate(dx2, dy2).transform(m.inverse());
    const p = new Point(bbox2.x, bbox2.y).transform(matrix);
    child.move(p.x, p.y);
  });
  return this;
}
function dx(dx2) {
  return this.dmove(dx2, 0);
}
function dy(dy2) {
  return this.dmove(0, dy2);
}
function height(height2, box = this.bbox()) {
  if (height2 == null)
    return box.height;
  return this.size(box.width, height2, box);
}
function move(x2 = 0, y2 = 0, box = this.bbox()) {
  const dx2 = x2 - box.x;
  const dy2 = y2 - box.y;
  return this.dmove(dx2, dy2);
}
function size(width2, height2, box = this.bbox()) {
  const p = proportionalSize(this, width2, height2, box);
  const scaleX = p.width / box.width;
  const scaleY = p.height / box.height;
  this.children().forEach((child) => {
    const o = new Point(box).transform(new Matrix(child).inverse());
    child.scale(scaleX, scaleY, o.x, o.y);
  });
  return this;
}
function width(width2, box = this.bbox()) {
  if (width2 == null)
    return box.width;
  return this.size(width2, box.height, box);
}
function x(x2, box = this.bbox()) {
  if (x2 == null)
    return box.x;
  return this.move(x2, box.y, box);
}
function y(y2, box = this.bbox()) {
  if (y2 == null)
    return box.y;
  return this.move(box.x, y2, box);
}
const containerGeometry = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  dmove,
  dx,
  dy,
  height,
  move,
  size,
  width,
  x,
  y
}, Symbol.toStringTag, { value: "Module" }));
class G extends Container {
  constructor(node, attrs2 = node) {
    super(nodeOrNew("g", node), attrs2);
  }
}
extend(G, containerGeometry);
registerMethods({
  Container: {
    // Create a group element
    group: wrapWithAttrCheck(function() {
      return this.put(new G());
    })
  }
});
register(G, "G");
class A extends Container {
  constructor(node, attrs2 = node) {
    super(nodeOrNew("a", node), attrs2);
  }
  // Link target attribute
  target(target) {
    return this.attr("target", target);
  }
  // Link url
  to(url) {
    return this.attr("href", url, xlink);
  }
}
extend(A, containerGeometry);
registerMethods({
  Container: {
    // Create a hyperlink element
    link: wrapWithAttrCheck(function(url) {
      return this.put(new A()).to(url);
    })
  },
  Element: {
    unlink() {
      const link = this.linker();
      if (!link)
        return this;
      const parent = link.parent();
      if (!parent) {
        return this.remove();
      }
      const index = parent.index(link);
      parent.add(this, index);
      link.remove();
      return this;
    },
    linkTo(url) {
      let link = this.linker();
      if (!link) {
        link = new A();
        this.wrap(link);
      }
      if (typeof url === "function") {
        url.call(link, link);
      } else {
        link.to(url);
      }
      return this;
    },
    linker() {
      const link = this.parent();
      if (link && link.node.nodeName.toLowerCase() === "a") {
        return link;
      }
      return null;
    }
  }
});
register(A, "A");
class Mask extends Container {
  // Initialize node
  constructor(node, attrs2 = node) {
    super(nodeOrNew("mask", node), attrs2);
  }
  // Unmask all masked elements and remove itself
  remove() {
    this.targets().forEach(function(el) {
      el.unmask();
    });
    return super.remove();
  }
  targets() {
    return baseFind("svg [mask*=" + this.id() + "]");
  }
}
registerMethods({
  Container: {
    mask: wrapWithAttrCheck(function() {
      return this.defs().put(new Mask());
    })
  },
  Element: {
    // Distribute mask to svg element
    masker() {
      return this.reference("mask");
    },
    maskWith(element) {
      const masker = element instanceof Mask ? element : this.parent().mask().add(element);
      return this.attr("mask", "url(#" + masker.id() + ")");
    },
    // Unmask element
    unmask() {
      return this.attr("mask", null);
    }
  }
});
register(Mask, "Mask");
class Stop extends Element {
  constructor(node, attrs2 = node) {
    super(nodeOrNew("stop", node), attrs2);
  }
  // add color stops
  update(o) {
    if (typeof o === "number" || o instanceof SVGNumber) {
      o = {
        offset: arguments[0],
        color: arguments[1],
        opacity: arguments[2]
      };
    }
    if (o.opacity != null)
      this.attr("stop-opacity", o.opacity);
    if (o.color != null)
      this.attr("stop-color", o.color);
    if (o.offset != null)
      this.attr("offset", new SVGNumber(o.offset));
    return this;
  }
}
registerMethods({
  Gradient: {
    // Add a color stop
    stop: function(offset, color, opacity) {
      return this.put(new Stop()).update(offset, color, opacity);
    }
  }
});
register(Stop, "Stop");
function cssRule(selector, rule) {
  if (!selector)
    return "";
  if (!rule)
    return selector;
  let ret = selector + "{";
  for (const i in rule) {
    ret += unCamelCase(i) + ":" + rule[i] + ";";
  }
  ret += "}";
  return ret;
}
class Style extends Element {
  constructor(node, attrs2 = node) {
    super(nodeOrNew("style", node), attrs2);
  }
  addText(w = "") {
    this.node.textContent += w;
    return this;
  }
  font(name, src, params = {}) {
    return this.rule("@font-face", {
      fontFamily: name,
      src,
      ...params
    });
  }
  rule(selector, obj) {
    return this.addText(cssRule(selector, obj));
  }
}
registerMethods("Dom", {
  style(selector, obj) {
    return this.put(new Style()).rule(selector, obj);
  },
  fontface(name, src, params) {
    return this.put(new Style()).font(name, src, params);
  }
});
register(Style, "Style");
class TextPath extends Text {
  // Initialize node
  constructor(node, attrs2 = node) {
    super(nodeOrNew("textPath", node), attrs2);
  }
  // return the array of the path track element
  array() {
    const track = this.track();
    return track ? track.array() : null;
  }
  // Plot path if any
  plot(d) {
    const track = this.track();
    let pathArray = null;
    if (track) {
      pathArray = track.plot(d);
    }
    return d == null ? pathArray : this;
  }
  // Get the path element
  track() {
    return this.reference("href");
  }
}
registerMethods({
  Container: {
    textPath: wrapWithAttrCheck(function(text, path) {
      if (!(text instanceof Text)) {
        text = this.text(text);
      }
      return text.path(path);
    })
  },
  Text: {
    // Create path for text to run on
    path: wrapWithAttrCheck(function(track, importNodes = true) {
      const textPath = new TextPath();
      if (!(track instanceof Path)) {
        track = this.defs().path(track);
      }
      textPath.attr("href", "#" + track, xlink);
      let node;
      if (importNodes) {
        while (node = this.node.firstChild) {
          textPath.node.appendChild(node);
        }
      }
      return this.put(textPath);
    }),
    // Get the textPath children
    textPath() {
      return this.findOne("textPath");
    }
  },
  Path: {
    // creates a textPath from this path
    text: wrapWithAttrCheck(function(text) {
      if (!(text instanceof Text)) {
        text = new Text().addTo(this.parent()).text(text);
      }
      return text.path(this);
    }),
    targets() {
      return baseFind("svg textPath").filter((node) => {
        return (node.attr("href") || "").includes(this.id());
      });
    }
  }
});
TextPath.prototype.MorphArray = PathArray;
register(TextPath, "TextPath");
class Use extends Shape {
  constructor(node, attrs2 = node) {
    super(nodeOrNew("use", node), attrs2);
  }
  // Use element as a reference
  use(element, file) {
    return this.attr("href", (file || "") + "#" + element, xlink);
  }
}
registerMethods({
  Container: {
    // Create a use element
    use: wrapWithAttrCheck(function(element, file) {
      return this.put(new Use()).use(element, file);
    })
  }
});
register(Use, "Use");
extend([Svg, Symbol$2, Image, Pattern, Marker], getMethodsFor("viewbox"));
extend([Line, Polyline, Polygon, Path], getMethodsFor("marker"));
extend(Text, getMethodsFor("Text"));
extend(Path, getMethodsFor("Path"));
extend(Defs, getMethodsFor("Defs"));
extend([Text, Tspan], getMethodsFor("Tspan"));
extend([Rect, Ellipse, Gradient, Runner], getMethodsFor("radius"));
extend(EventTarget, getMethodsFor("EventTarget"));
extend(Dom, getMethodsFor("Dom"));
extend(Element, getMethodsFor("Element"));
extend(Shape, getMethodsFor("Shape"));
extend([Container, Fragment], getMethodsFor("Container"));
extend(Gradient, getMethodsFor("Gradient"));
extend(Runner, getMethodsFor("Runner"));
List.extend(getMethodNames());
registerMorphableType([
  SVGNumber,
  Color,
  Box,
  Matrix,
  SVGArray,
  PointArray,
  PathArray,
  Point
]);
makeMorphable();
const _Watermark = class _Watermark {
  /**
   * Add watermark to a container element
   */
  static add(container) {
    this.remove(container);
    const watermark = document.createElement("div");
    watermark.className = this.WATERMARK_CLASS;
    watermark.textContent = this.WATERMARK_TEXT;
    Object.assign(watermark.style, {
      bottom: "5px",
      color: "#666",
      fontFamily: "Arial, sans-serif",
      fontSize: "14px",
      msUserSelect: "none",
      pointerEvents: "none",
      position: "absolute",
      right: "5px",
      userSelect: "none",
      webkitUserSelect: "none",
      zIndex: "1000"
    });
    if (getComputedStyle(container).position === "static") {
      container.style.position = "relative";
    }
    container.appendChild(watermark);
  }
  /**
   * Check if watermark exists in container
   */
  static exists(container) {
    return !!container.querySelector(`.${this.WATERMARK_CLASS}`);
  }
  /**
   * Remove watermark from a container element
   */
  static remove(container) {
    const existingWatermark = container.querySelector(`.${this.WATERMARK_CLASS}`);
    if (existingWatermark) {
      existingWatermark.remove();
    }
  }
};
_Watermark.WATERMARK_CLASS = "apexgantt-watermark";
_Watermark.WATERMARK_TEXT = "Powered by apexcharts.com";
let Watermark = _Watermark;
function getCumulativeTransform(element) {
  let scaleX = 1;
  let scaleY = 1;
  let translateX = 0;
  let translateY = 0;
  let currentElement = element.parentElement;
  while (currentElement && currentElement !== document.body && currentElement !== document.documentElement) {
    const style = window.getComputedStyle(currentElement);
    const cssScale = style.scale;
    if (cssScale && cssScale !== "none") {
      const scaleValues = cssScale.split(" ").map(parseFloat);
      if (scaleValues.length === 1) {
        scaleX *= scaleValues[0];
        scaleY *= scaleValues[0];
      } else if (scaleValues.length >= 2) {
        scaleX *= scaleValues[0];
        scaleY *= scaleValues[1];
      }
    }
    const transform2 = style.transform;
    if (transform2 && transform2 !== "none") {
      try {
        const matrix = new DOMMatrix(transform2);
        scaleX *= matrix.a;
        scaleY *= matrix.d;
        translateX += matrix.e;
        translateY += matrix.f;
      } catch (e) {
        console.warn("Failed to parse transform matrix:", transform2, e);
      }
    }
    currentElement = currentElement.parentElement;
  }
  return { scaleX, scaleY, translateX, translateY };
}
function getElementTransform(element) {
  const style = window.getComputedStyle(element);
  let scaleX = 1;
  let scaleY = 1;
  let translateX = 0;
  let translateY = 0;
  let rotation = 0;
  const cssScale = style.scale;
  if (cssScale && cssScale !== "none") {
    const scaleValues = cssScale.split(" ").map(parseFloat);
    if (scaleValues.length === 1) {
      scaleX = scaleValues[0];
      scaleY = scaleValues[0];
    } else if (scaleValues.length >= 2) {
      scaleX = scaleValues[0];
      scaleY = scaleValues[1];
    }
  }
  const transform2 = style.transform;
  if (transform2 && transform2 !== "none") {
    try {
      const matrix = new DOMMatrix(transform2);
      scaleX *= matrix.a;
      scaleY *= matrix.d;
      translateX = matrix.e;
      translateY = matrix.f;
      rotation = Math.atan2(matrix.b, matrix.a);
    } catch (e) {
      console.warn("Failed to parse transform matrix:", transform2, e);
    }
  }
  return { scaleX, scaleY, translateX, translateY, rotation };
}
function getTransformAwareBoundingRect(element, relativeTo) {
  const elementRect = element.getBoundingClientRect();
  const relativeRect = relativeTo.getBoundingClientRect();
  const containerTransform = getCumulativeTransform(relativeTo);
  const elementOwnTransform = getElementTransform(element);
  const scaleX = containerTransform.scaleX || 1;
  const scaleY = containerTransform.scaleY || 1;
  const left = (elementRect.left - relativeRect.left) / scaleX;
  const top = (elementRect.top - relativeRect.top) / scaleY;
  const width2 = elementRect.width / scaleX;
  const height2 = elementRect.height / scaleY;
  if (Math.abs(elementOwnTransform.rotation) > 0.01) {
    const centerX = left + width2 / 2;
    const centerY = top + height2 / 2;
    return {
      left: centerX,
      right: centerX,
      top: centerY,
      bottom: centerY,
      width: 0,
      height: 0
    };
  }
  return {
    left,
    right: left + width2,
    top,
    bottom: top + height2,
    width: width2,
    height: height2
  };
}
function arrayReduce(array2, iteratee, accumulator, initAccum) {
  var index = -1, length2 = array2 == null ? 0 : array2.length;
  while (++index < length2) {
    accumulator = iteratee(accumulator, array2[index], index, array2);
  }
  return accumulator;
}
function basePropertyOf(object) {
  return function(key) {
    return object == null ? void 0 : object[key];
  };
}
var deburredLetters = {
  // Latin-1 Supplement block.
  "À": "A",
  "Á": "A",
  "Â": "A",
  "Ã": "A",
  "Ä": "A",
  "Å": "A",
  "à": "a",
  "á": "a",
  "â": "a",
  "ã": "a",
  "ä": "a",
  "å": "a",
  "Ç": "C",
  "ç": "c",
  "Ð": "D",
  "ð": "d",
  "È": "E",
  "É": "E",
  "Ê": "E",
  "Ë": "E",
  "è": "e",
  "é": "e",
  "ê": "e",
  "ë": "e",
  "Ì": "I",
  "Í": "I",
  "Î": "I",
  "Ï": "I",
  "ì": "i",
  "í": "i",
  "î": "i",
  "ï": "i",
  "Ñ": "N",
  "ñ": "n",
  "Ò": "O",
  "Ó": "O",
  "Ô": "O",
  "Õ": "O",
  "Ö": "O",
  "Ø": "O",
  "ò": "o",
  "ó": "o",
  "ô": "o",
  "õ": "o",
  "ö": "o",
  "ø": "o",
  "Ù": "U",
  "Ú": "U",
  "Û": "U",
  "Ü": "U",
  "ù": "u",
  "ú": "u",
  "û": "u",
  "ü": "u",
  "Ý": "Y",
  "ý": "y",
  "ÿ": "y",
  "Æ": "Ae",
  "æ": "ae",
  "Þ": "Th",
  "þ": "th",
  "ß": "ss",
  // Latin Extended-A block.
  "Ā": "A",
  "Ă": "A",
  "Ą": "A",
  "ā": "a",
  "ă": "a",
  "ą": "a",
  "Ć": "C",
  "Ĉ": "C",
  "Ċ": "C",
  "Č": "C",
  "ć": "c",
  "ĉ": "c",
  "ċ": "c",
  "č": "c",
  "Ď": "D",
  "Đ": "D",
  "ď": "d",
  "đ": "d",
  "Ē": "E",
  "Ĕ": "E",
  "Ė": "E",
  "Ę": "E",
  "Ě": "E",
  "ē": "e",
  "ĕ": "e",
  "ė": "e",
  "ę": "e",
  "ě": "e",
  "Ĝ": "G",
  "Ğ": "G",
  "Ġ": "G",
  "Ģ": "G",
  "ĝ": "g",
  "ğ": "g",
  "ġ": "g",
  "ģ": "g",
  "Ĥ": "H",
  "Ħ": "H",
  "ĥ": "h",
  "ħ": "h",
  "Ĩ": "I",
  "Ī": "I",
  "Ĭ": "I",
  "Į": "I",
  "İ": "I",
  "ĩ": "i",
  "ī": "i",
  "ĭ": "i",
  "į": "i",
  "ı": "i",
  "Ĵ": "J",
  "ĵ": "j",
  "Ķ": "K",
  "ķ": "k",
  "ĸ": "k",
  "Ĺ": "L",
  "Ļ": "L",
  "Ľ": "L",
  "Ŀ": "L",
  "Ł": "L",
  "ĺ": "l",
  "ļ": "l",
  "ľ": "l",
  "ŀ": "l",
  "ł": "l",
  "Ń": "N",
  "Ņ": "N",
  "Ň": "N",
  "Ŋ": "N",
  "ń": "n",
  "ņ": "n",
  "ň": "n",
  "ŋ": "n",
  "Ō": "O",
  "Ŏ": "O",
  "Ő": "O",
  "ō": "o",
  "ŏ": "o",
  "ő": "o",
  "Ŕ": "R",
  "Ŗ": "R",
  "Ř": "R",
  "ŕ": "r",
  "ŗ": "r",
  "ř": "r",
  "Ś": "S",
  "Ŝ": "S",
  "Ş": "S",
  "Š": "S",
  "ś": "s",
  "ŝ": "s",
  "ş": "s",
  "š": "s",
  "Ţ": "T",
  "Ť": "T",
  "Ŧ": "T",
  "ţ": "t",
  "ť": "t",
  "ŧ": "t",
  "Ũ": "U",
  "Ū": "U",
  "Ŭ": "U",
  "Ů": "U",
  "Ű": "U",
  "Ų": "U",
  "ũ": "u",
  "ū": "u",
  "ŭ": "u",
  "ů": "u",
  "ű": "u",
  "ų": "u",
  "Ŵ": "W",
  "ŵ": "w",
  "Ŷ": "Y",
  "ŷ": "y",
  "Ÿ": "Y",
  "Ź": "Z",
  "Ż": "Z",
  "Ž": "Z",
  "ź": "z",
  "ż": "z",
  "ž": "z",
  "Ĳ": "IJ",
  "ĳ": "ij",
  "Œ": "Oe",
  "œ": "oe",
  "ŉ": "'n",
  "ſ": "s"
};
var deburrLetter = basePropertyOf(deburredLetters);
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal || freeSelf || Function("return this")();
var Symbol$1 = root.Symbol;
function arrayMap(array2, iteratee) {
  var index = -1, length2 = array2 == null ? 0 : array2.length, result = Array(length2);
  while (++index < length2) {
    result[index] = iteratee(array2[index], index, array2);
  }
  return result;
}
var isArray = Array.isArray;
var objectProto$5 = Object.prototype;
var hasOwnProperty$3 = objectProto$5.hasOwnProperty;
var nativeObjectToString$1 = objectProto$5.toString;
var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty$3.call(value, symToStringTag$1), tag = value[symToStringTag$1];
  try {
    value[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}
var objectProto$4 = Object.prototype;
var nativeObjectToString = objectProto$4.toString;
function objectToString(value) {
  return nativeObjectToString.call(value);
}
var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : void 0;
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var symbolTag = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
}
var INFINITY = 1 / 0;
var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isArray(value)) {
    return arrayMap(value, baseToString) + "";
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
function toString(value) {
  return value == null ? "" : baseToString(value);
}
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
var rsComboMarksRange$3 = "\\u0300-\\u036f", reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$3 = "\\u20d0-\\u20ff", rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3;
var rsCombo$2 = "[" + rsComboRange$3 + "]";
var reComboMark = RegExp(rsCombo$2, "g");
function deburr(string) {
  string = toString(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
}
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}
var rsAstralRange$2 = "\\ud800-\\udfff", rsComboMarksRange$2 = "\\u0300-\\u036f", reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$2 = "\\u20d0-\\u20ff", rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange$2 = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
var rsApos$1 = "['’]", rsBreak = "[" + rsBreakRange + "]", rsCombo$1 = "[" + rsComboRange$2 + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange$2 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz$1 = "\\ud83c[\\udffb-\\udfff]", rsModifier$1 = "(?:" + rsCombo$1 + "|" + rsFitz$1 + ")", rsNonAstral$1 = "[^" + rsAstralRange$2 + "]", rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ$2 = "\\u200d";
var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos$1 + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos$1 + "(?:D|LL|M|RE|S|T|VE))?", reOptMod$1 = rsModifier$1 + "?", rsOptVar$1 = "[" + rsVarRange$2 + "]?", rsOptJoin$1 = "(?:" + rsZWJ$2 + "(?:" + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join("|") + ")" + rsOptVar$1 + reOptMod$1 + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1, rsEmoji = "(?:" + [rsDingbat, rsRegional$1, rsSurrPair$1].join("|") + ")" + rsSeq$1;
var reUnicodeWord = RegExp([
  rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
  rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
  rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
  rsUpper + "+" + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join("|"), "g");
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}
function words(string, pattern, guard) {
  string = toString(string);
  pattern = pattern;
  if (pattern === void 0) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}
var rsApos = "['’]";
var reApos = RegExp(rsApos, "g");
function createCompounder(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
  };
}
var kebabCase = createCompounder(function(result, word, index) {
  return result + (index ? "-" : "") + word.toLowerCase();
});
const getTooltip = (context, tooltipId = "apex-tooltip-container") => {
  let tooltipElement = context.getElementById(tooltipId);
  if (!tooltipElement) {
    tooltipElement = context.createElement("div");
    tooltipElement.id = tooltipId;
    tooltipElement.setAttribute("role", "tooltip");
    tooltipElement.setAttribute("aria-hidden", "true");
    const appendContainer = context.getAppendContainer();
    appendContainer.appendChild(tooltipElement);
  }
  return tooltipElement;
};
const updateTooltip = (context, id = "", styles, content = "") => {
  const tooltipElement = context.getElementById(id);
  if (!tooltipElement) {
    console.warn("Tooltip: Element not found, creating it");
    getTooltip(context, id);
    return updateTooltip(context, id, styles, content);
  }
  if (styles && content) {
    const hasTooltipContent = content.includes("tooltip-content");
    const bgColorMatch = styles.match(/background-color:\s*([^;]+);?/);
    const colorMatch = styles.match(/color:\s*([^;]+);?/);
    const bgColor = bgColorMatch ? bgColorMatch[1] : "#333";
    const textColor = colorMatch ? colorMatch[1] : "white";
    if (hasTooltipContent) {
      tooltipElement.innerHTML = content;
    } else {
      tooltipElement.innerHTML = `<div class="tooltip-content" style="background-color: ${bgColor}; color: ${textColor};">${content}</div>`;
    }
    const enhancedStyles = styles + "; display: block !important; visibility: visible !important; opacity: 1 !important;";
    tooltipElement.setAttribute("style", enhancedStyles);
    tooltipElement.classList.add("visible");
    tooltipElement.setAttribute("aria-hidden", "false");
  } else {
    tooltipElement.removeAttribute("style");
    tooltipElement.classList.remove("visible");
    tooltipElement.setAttribute("aria-hidden", "true");
    tooltipElement.innerHTML = "";
  }
};
const calculateCursorFollowingTooltip = (mouseX, mouseY, tooltipWidth = 300, tooltipHeight = 120, offsetX = 20, offsetY = 20) => {
  const viewportWidth = window.innerWidth;
  const viewportHeight = window.innerHeight;
  const scrollX = window.scrollX || document.documentElement.scrollLeft;
  const scrollY = window.scrollY || document.documentElement.scrollTop;
  let x2 = mouseX + offsetX + scrollX;
  let y2 = mouseY + offsetY + scrollY;
  if (mouseX + offsetX + tooltipWidth > viewportWidth) {
    x2 = mouseX - tooltipWidth - offsetX + scrollX;
  }
  if (mouseY + offsetY + tooltipHeight > viewportHeight) {
    y2 = mouseY - tooltipHeight - offsetY + scrollY;
  }
  x2 = Math.max(scrollX + 5, x2);
  y2 = Math.max(scrollY + 5, y2);
  return { x: x2, y: y2 };
};
const getCursorFollowingTooltipStyles = ({
  bgColor,
  borderColor,
  fontColor,
  fontFamily,
  fontSize,
  fontWeight,
  maxWidth = 300,
  padding,
  x: x2,
  y: y2
}) => {
  const styles = ["position: absolute;", "z-index: 1000;", "pointer-events: none;"];
  styles.push(`width: ${maxWidth}px;`);
  styles.push(`max-width: ${maxWidth}px;`);
  styles.push("box-sizing: border-box;");
  styles.push("word-wrap: break-word;");
  styles.push("overflow-wrap: break-word;");
  styles.push(`left: ${x2}px;`);
  styles.push(`top: ${y2}px;`);
  if (borderColor) {
    styles.push(`border: 1px solid ${borderColor};`);
  }
  styles.push("border-radius: 6px;");
  styles.push("box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);");
  styles.push("transition: opacity 0.2s ease;");
  styles.push(`color: ${fontColor || "#000000"};`);
  styles.push(`font-family: ${fontFamily || "sans-serif"};`);
  styles.push(`font-weight: ${fontWeight || "400"};`);
  styles.push(`font-size: ${fontSize || "14px"};`);
  styles.push(`background-color: ${bgColor || "#FFFFFF"};`);
  if (padding !== void 0) {
    styles.push(`padding: ${padding}px;`);
  }
  return styles.join(" ");
};
const generateStyles = (styleObject = {}) => {
  const styles = [];
  for (const styleKey in styleObject) {
    const styleString = `${kebabCase(styleKey)}: ${styleObject[styleKey]};`;
    styles.push(styleString);
  }
  return styles.join(" ");
};
function createBox(context, { className = "", content, style = {} } = {}) {
  const box = createElement(context, "div", { className, innerHTML: content || "" });
  box.setAttribute("style", generateStyles(style));
  return box;
}
function createElement(context, name, options = {}) {
  const element = context.createElement(name);
  return Object.assign(element, options);
}
function adjustColorBrightness(hex2, amount) {
  if (!hex2) {
    return "#000000";
  }
  hex2 = hex2.replace(/^#/, "");
  if (hex2.length === 3) {
    hex2 = hex2.split("").map((c) => c + c).join("");
  }
  const num = parseInt(hex2, 16);
  let r = num >> 16 & 255;
  let g = num >> 8 & 255;
  let b = num & 255;
  const luminance = 0.299 * r + 0.587 * g + 0.114 * b;
  const modifier = luminance < 100 ? -1 : 1;
  amount *= modifier;
  r = Math.min(255, Math.max(0, r + amount));
  g = Math.min(255, Math.max(0, g + amount));
  b = Math.min(255, Math.max(0, b + amount));
  return `#${(1 << 24 | r << 16 | g << 8 | b).toString(16).slice(1)}`;
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
var dayjs_min = { exports: {} };
(function(module2, exports2) {
  !function(t, e) {
    module2.exports = e();
  }(commonjsGlobal, function() {
    var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", c = "month", f = "quarter", h = "year", d = "date", l = "Invalid Date", $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y2 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t2) {
      var e2 = ["th", "st", "nd", "rd"], n2 = t2 % 100;
      return "[" + t2 + (e2[(n2 - 20) % 10] || e2[n2] || e2[0]) + "]";
    } }, m = function(t2, e2, n2) {
      var r2 = String(t2);
      return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
    }, v = { s: m, z: function(t2) {
      var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i2 = n2 % 60;
      return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
    }, m: function t2(e2, n2) {
      if (e2.date() < n2.date())
        return -t2(n2, e2);
      var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r2, c), s2 = n2 - i2 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), c);
      return +(-(r2 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
    }, a: function(t2) {
      return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
    }, p: function(t2) {
      return { M: c, y: h, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: f }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
    }, u: function(t2) {
      return void 0 === t2;
    } }, g = "en", D = {};
    D[g] = M;
    var p = "$isDayjsObject", S = function(t2) {
      return t2 instanceof _ || !(!t2 || !t2[p]);
    }, w = function t2(e2, n2, r2) {
      var i2;
      if (!e2)
        return g;
      if ("string" == typeof e2) {
        var s2 = e2.toLowerCase();
        D[s2] && (i2 = s2), n2 && (D[s2] = n2, i2 = s2);
        var u2 = e2.split("-");
        if (!i2 && u2.length > 1)
          return t2(u2[0]);
      } else {
        var a2 = e2.name;
        D[a2] = e2, i2 = a2;
      }
      return !r2 && i2 && (g = i2), i2 || !r2 && g;
    }, O = function(t2, e2) {
      if (S(t2))
        return t2.clone();
      var n2 = "object" == typeof e2 ? e2 : {};
      return n2.date = t2, n2.args = arguments, new _(n2);
    }, b = v;
    b.l = w, b.i = S, b.w = function(t2, e2) {
      return O(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
    };
    var _ = function() {
      function M2(t2) {
        this.$L = w(t2.locale, null, true), this.parse(t2), this.$x = this.$x || t2.x || {}, this[p] = true;
      }
      var m2 = M2.prototype;
      return m2.parse = function(t2) {
        this.$d = function(t3) {
          var e2 = t3.date, n2 = t3.utc;
          if (null === e2)
            return /* @__PURE__ */ new Date(NaN);
          if (b.u(e2))
            return /* @__PURE__ */ new Date();
          if (e2 instanceof Date)
            return new Date(e2);
          if ("string" == typeof e2 && !/Z$/i.test(e2)) {
            var r2 = e2.match($);
            if (r2) {
              var i2 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
              return n2 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
            }
          }
          return new Date(e2);
        }(t2), this.init();
      }, m2.init = function() {
        var t2 = this.$d;
        this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
      }, m2.$utils = function() {
        return b;
      }, m2.isValid = function() {
        return !(this.$d.toString() === l);
      }, m2.isSame = function(t2, e2) {
        var n2 = O(t2);
        return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
      }, m2.isAfter = function(t2, e2) {
        return O(t2) < this.startOf(e2);
      }, m2.isBefore = function(t2, e2) {
        return this.endOf(e2) < O(t2);
      }, m2.$g = function(t2, e2, n2) {
        return b.u(t2) ? this[e2] : this.set(n2, t2);
      }, m2.unix = function() {
        return Math.floor(this.valueOf() / 1e3);
      }, m2.valueOf = function() {
        return this.$d.getTime();
      }, m2.startOf = function(t2, e2) {
        var n2 = this, r2 = !!b.u(e2) || e2, f2 = b.p(t2), l2 = function(t3, e3) {
          var i2 = b.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
          return r2 ? i2 : i2.endOf(a);
        }, $2 = function(t3, e3) {
          return b.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
        }, y3 = this.$W, M3 = this.$M, m3 = this.$D, v2 = "set" + (this.$u ? "UTC" : "");
        switch (f2) {
          case h:
            return r2 ? l2(1, 0) : l2(31, 11);
          case c:
            return r2 ? l2(1, M3) : l2(0, M3 + 1);
          case o:
            var g2 = this.$locale().weekStart || 0, D2 = (y3 < g2 ? y3 + 7 : y3) - g2;
            return l2(r2 ? m3 - D2 : m3 + (6 - D2), M3);
          case a:
          case d:
            return $2(v2 + "Hours", 0);
          case u:
            return $2(v2 + "Minutes", 1);
          case s:
            return $2(v2 + "Seconds", 2);
          case i:
            return $2(v2 + "Milliseconds", 3);
          default:
            return this.clone();
        }
      }, m2.endOf = function(t2) {
        return this.startOf(t2, false);
      }, m2.$set = function(t2, e2) {
        var n2, o2 = b.p(t2), f2 = "set" + (this.$u ? "UTC" : ""), l2 = (n2 = {}, n2[a] = f2 + "Date", n2[d] = f2 + "Date", n2[c] = f2 + "Month", n2[h] = f2 + "FullYear", n2[u] = f2 + "Hours", n2[s] = f2 + "Minutes", n2[i] = f2 + "Seconds", n2[r] = f2 + "Milliseconds", n2)[o2], $2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
        if (o2 === c || o2 === h) {
          var y3 = this.clone().set(d, 1);
          y3.$d[l2]($2), y3.init(), this.$d = y3.set(d, Math.min(this.$D, y3.daysInMonth())).$d;
        } else
          l2 && this.$d[l2]($2);
        return this.init(), this;
      }, m2.set = function(t2, e2) {
        return this.clone().$set(t2, e2);
      }, m2.get = function(t2) {
        return this[b.p(t2)]();
      }, m2.add = function(r2, f2) {
        var d2, l2 = this;
        r2 = Number(r2);
        var $2 = b.p(f2), y3 = function(t2) {
          var e2 = O(l2);
          return b.w(e2.date(e2.date() + Math.round(t2 * r2)), l2);
        };
        if ($2 === c)
          return this.set(c, this.$M + r2);
        if ($2 === h)
          return this.set(h, this.$y + r2);
        if ($2 === a)
          return y3(1);
        if ($2 === o)
          return y3(7);
        var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i] = t, d2)[$2] || 1, m3 = this.$d.getTime() + r2 * M3;
        return b.w(m3, this);
      }, m2.subtract = function(t2, e2) {
        return this.add(-1 * t2, e2);
      }, m2.format = function(t2) {
        var e2 = this, n2 = this.$locale();
        if (!this.isValid())
          return n2.invalidDate || l;
        var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = b.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, c2 = n2.months, f2 = n2.meridiem, h2 = function(t3, n3, i3, s3) {
          return t3 && (t3[n3] || t3(e2, r2)) || i3[n3].slice(0, s3);
        }, d2 = function(t3) {
          return b.s(s2 % 12 || 12, t3, "0");
        }, $2 = f2 || function(t3, e3, n3) {
          var r3 = t3 < 12 ? "AM" : "PM";
          return n3 ? r3.toLowerCase() : r3;
        };
        return r2.replace(y2, function(t3, r3) {
          return r3 || function(t4) {
            switch (t4) {
              case "YY":
                return String(e2.$y).slice(-2);
              case "YYYY":
                return b.s(e2.$y, 4, "0");
              case "M":
                return a2 + 1;
              case "MM":
                return b.s(a2 + 1, 2, "0");
              case "MMM":
                return h2(n2.monthsShort, a2, c2, 3);
              case "MMMM":
                return h2(c2, a2);
              case "D":
                return e2.$D;
              case "DD":
                return b.s(e2.$D, 2, "0");
              case "d":
                return String(e2.$W);
              case "dd":
                return h2(n2.weekdaysMin, e2.$W, o2, 2);
              case "ddd":
                return h2(n2.weekdaysShort, e2.$W, o2, 3);
              case "dddd":
                return o2[e2.$W];
              case "H":
                return String(s2);
              case "HH":
                return b.s(s2, 2, "0");
              case "h":
                return d2(1);
              case "hh":
                return d2(2);
              case "a":
                return $2(s2, u2, true);
              case "A":
                return $2(s2, u2, false);
              case "m":
                return String(u2);
              case "mm":
                return b.s(u2, 2, "0");
              case "s":
                return String(e2.$s);
              case "ss":
                return b.s(e2.$s, 2, "0");
              case "SSS":
                return b.s(e2.$ms, 3, "0");
              case "Z":
                return i2;
            }
            return null;
          }(t3) || i2.replace(":", "");
        });
      }, m2.utcOffset = function() {
        return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
      }, m2.diff = function(r2, d2, l2) {
        var $2, y3 = this, M3 = b.p(d2), m3 = O(r2), v2 = (m3.utcOffset() - this.utcOffset()) * e, g2 = this - m3, D2 = function() {
          return b.m(y3, m3);
        };
        switch (M3) {
          case h:
            $2 = D2() / 12;
            break;
          case c:
            $2 = D2();
            break;
          case f:
            $2 = D2() / 3;
            break;
          case o:
            $2 = (g2 - v2) / 6048e5;
            break;
          case a:
            $2 = (g2 - v2) / 864e5;
            break;
          case u:
            $2 = g2 / n;
            break;
          case s:
            $2 = g2 / e;
            break;
          case i:
            $2 = g2 / t;
            break;
          default:
            $2 = g2;
        }
        return l2 ? $2 : b.a($2);
      }, m2.daysInMonth = function() {
        return this.endOf(c).$D;
      }, m2.$locale = function() {
        return D[this.$L];
      }, m2.locale = function(t2, e2) {
        if (!t2)
          return this.$L;
        var n2 = this.clone(), r2 = w(t2, e2, true);
        return r2 && (n2.$L = r2), n2;
      }, m2.clone = function() {
        return b.w(this.$d, this);
      }, m2.toDate = function() {
        return new Date(this.valueOf());
      }, m2.toJSON = function() {
        return this.isValid() ? this.toISOString() : null;
      }, m2.toISOString = function() {
        return this.$d.toISOString();
      }, m2.toString = function() {
        return this.$d.toUTCString();
      }, M2;
    }(), k = _.prototype;
    return O.prototype = k, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", c], ["$y", h], ["$D", d]].forEach(function(t2) {
      k[t2[1]] = function(e2) {
        return this.$g(e2, t2[0], t2[1]);
      };
    }), O.extend = function(t2, e2) {
      return t2.$i || (t2(e2, _, O), t2.$i = true), O;
    }, O.locale = w, O.isDayjs = S, O.unix = function(t2) {
      return O(1e3 * t2);
    }, O.en = D[g], O.Ls = D, O.p = {}, O;
  });
})(dayjs_min);
var dayjs_minExports = dayjs_min.exports;
const dayjs = /* @__PURE__ */ getDefaultExportFromCjs(dayjs_minExports);
var isSameOrBefore$1 = { exports: {} };
(function(module2, exports2) {
  !function(e, i) {
    module2.exports = i();
  }(commonjsGlobal, function() {
    return function(e, i) {
      i.prototype.isSameOrBefore = function(e2, i2) {
        return this.isSame(e2, i2) || this.isBefore(e2, i2);
      };
    };
  });
})(isSameOrBefore$1);
var isSameOrBeforeExports = isSameOrBefore$1.exports;
const isSameOrBefore = /* @__PURE__ */ getDefaultExportFromCjs(isSameOrBeforeExports);
var minMax$1 = { exports: {} };
(function(module2, exports2) {
  !function(e, n) {
    module2.exports = n();
  }(commonjsGlobal, function() {
    return function(e, n, t) {
      var i = function(e2, n2) {
        if (!n2 || !n2.length || 1 === n2.length && !n2[0] || 1 === n2.length && Array.isArray(n2[0]) && !n2[0].length)
          return null;
        var t2;
        1 === n2.length && n2[0].length > 0 && (n2 = n2[0]);
        t2 = (n2 = n2.filter(function(e3) {
          return e3;
        }))[0];
        for (var i2 = 1; i2 < n2.length; i2 += 1)
          n2[i2].isValid() && !n2[i2][e2](t2) || (t2 = n2[i2]);
        return t2;
      };
      t.max = function() {
        var e2 = [].slice.call(arguments, 0);
        return i("isAfter", e2);
      }, t.min = function() {
        var e2 = [].slice.call(arguments, 0);
        return i("isBefore", e2);
      };
    };
  });
})(minMax$1);
var minMaxExports = minMax$1.exports;
const minMax = /* @__PURE__ */ getDefaultExportFromCjs(minMaxExports);
var quarterOfYear$1 = { exports: {} };
(function(module2, exports2) {
  !function(t, n) {
    module2.exports = n();
  }(commonjsGlobal, function() {
    var t = "month", n = "quarter";
    return function(e, i) {
      var r = i.prototype;
      r.quarter = function(t2) {
        return this.$utils().u(t2) ? Math.ceil((this.month() + 1) / 3) : this.month(this.month() % 3 + 3 * (t2 - 1));
      };
      var s = r.add;
      r.add = function(e2, i2) {
        return e2 = Number(e2), this.$utils().p(i2) === n ? this.add(3 * e2, t) : s.bind(this)(e2, i2);
      };
      var u = r.startOf;
      r.startOf = function(e2, i2) {
        var r2 = this.$utils(), s2 = !!r2.u(i2) || i2;
        if (r2.p(e2) === n) {
          var o = this.quarter() - 1;
          return s2 ? this.month(3 * o).startOf(t).startOf("day") : this.month(3 * o + 2).endOf(t).endOf("day");
        }
        return u.bind(this)(e2, i2);
      };
    };
  });
})(quarterOfYear$1);
var quarterOfYearExports = quarterOfYear$1.exports;
const quarterOfYear = /* @__PURE__ */ getDefaultExportFromCjs(quarterOfYearExports);
var weekday$1 = { exports: {} };
(function(module2, exports2) {
  !function(e, t) {
    module2.exports = t();
  }(commonjsGlobal, function() {
    return function(e, t) {
      t.prototype.weekday = function(e2) {
        var t2 = this.$locale().weekStart || 0, i = this.$W, n = (i < t2 ? i + 7 : i) - t2;
        return this.$utils().u(e2) ? n : this.subtract(n, "day").add(e2, "day");
      };
    };
  });
})(weekday$1);
var weekdayExports = weekday$1.exports;
const weekday = /* @__PURE__ */ getDefaultExportFromCjs(weekdayExports);
var weekOfYear$1 = { exports: {} };
(function(module2, exports2) {
  !function(e, t) {
    module2.exports = t();
  }(commonjsGlobal, function() {
    var e = "week", t = "year";
    return function(i, n, r) {
      var f = n.prototype;
      f.week = function(i2) {
        if (void 0 === i2 && (i2 = null), null !== i2)
          return this.add(7 * (i2 - this.week()), "day");
        var n2 = this.$locale().yearStart || 1;
        if (11 === this.month() && this.date() > 25) {
          var f2 = r(this).startOf(t).add(1, t).date(n2), s = r(this).endOf(e);
          if (f2.isBefore(s))
            return 1;
        }
        var a = r(this).startOf(t).date(n2).startOf(e).subtract(1, "millisecond"), o = this.diff(a, e, true);
        return o < 0 ? r(this).startOf("week").week() : Math.ceil(o);
      }, f.weeks = function(e2) {
        return void 0 === e2 && (e2 = null), this.week(e2);
      };
    };
  });
})(weekOfYear$1);
var weekOfYearExports = weekOfYear$1.exports;
const weekOfYear = /* @__PURE__ */ getDefaultExportFromCjs(weekOfYearExports);
function baseSlice(array2, start, end) {
  var index = -1, length2 = array2.length;
  if (start < 0) {
    start = -start > length2 ? 0 : length2 + start;
  }
  end = end > length2 ? length2 : end;
  if (end < 0) {
    end += length2;
  }
  length2 = start > end ? 0 : end - start >>> 0;
  start >>>= 0;
  var result = Array(length2);
  while (++index < length2) {
    result[index] = array2[index + start];
  }
  return result;
}
function castSlice(array2, start, end) {
  var length2 = array2.length;
  end = end === void 0 ? length2 : end;
  return !start && end >= length2 ? array2 : baseSlice(array2, start, end);
}
var rsAstralRange$1 = "\\ud800-\\udfff", rsComboMarksRange$1 = "\\u0300-\\u036f", reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$1 = "\\u20d0-\\u20ff", rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1, rsVarRange$1 = "\\ufe0e\\ufe0f";
var rsZWJ$1 = "\\u200d";
var reHasUnicode = RegExp("[" + rsZWJ$1 + rsAstralRange$1 + rsComboRange$1 + rsVarRange$1 + "]");
function hasUnicode(string) {
  return reHasUnicode.test(string);
}
function asciiToArray(string) {
  return string.split("");
}
var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
var rsAstral = "[" + rsAstralRange + "]", rsCombo = "[" + rsComboRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ = "\\u200d";
var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}
function stringToArray(string) {
  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
}
function createCaseFirst(methodName) {
  return function(string) {
    string = toString(string);
    var strSymbols = hasUnicode(string) ? stringToArray(string) : void 0;
    var chr = strSymbols ? strSymbols[0] : string.charAt(0);
    var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
    return chr[methodName]() + trailing;
  };
}
var upperFirst = createCaseFirst("toUpperCase");
function capitalize(string) {
  return upperFirst(toString(string).toLowerCase());
}
function arrayEach(array2, iteratee) {
  var index = -1, length2 = array2 == null ? 0 : array2.length;
  while (++index < length2) {
    if (iteratee(array2[index], index, array2) === false) {
      break;
    }
  }
  return array2;
}
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1, iterable = Object(object), props = keysFunc(object), length2 = props.length;
    while (length2--) {
      var key = props[++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}
var baseFor = createBaseFor();
function baseTimes(n, iteratee) {
  var index = -1, result = Array(n);
  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}
var argsTag$1 = "[object Arguments]";
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag$1;
}
var objectProto$3 = Object.prototype;
var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
var isArguments = baseIsArguments(/* @__PURE__ */ function() {
  return arguments;
}()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty$2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
};
function stubFalse() {
  return false;
}
var freeExports$1 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$1 = freeExports$1 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
var Buffer = moduleExports$1 ? root.Buffer : void 0;
var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
var isBuffer = nativeIsBuffer || stubFalse;
var MAX_SAFE_INTEGER$1 = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value, length2) {
  var type = typeof value;
  length2 = length2 == null ? MAX_SAFE_INTEGER$1 : length2;
  return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
}
var MAX_SAFE_INTEGER = 9007199254740991;
function isLength(value) {
  return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag$1 = "[object Function]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", weakMapTag = "[object WeakMap]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
function baseIsTypedArray(value) {
  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var freeProcess = moduleExports && freeGlobal.process;
var nodeUtil = function() {
  try {
    var types = freeModule && freeModule.require && freeModule.require("util").types;
    if (types) {
      return types;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e) {
  }
}();
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
var objectProto$2 = Object.prototype;
var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length2 = result.length;
  for (var key in value) {
    if (hasOwnProperty$1.call(value, key) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
    isIndex(key, length2)))) {
      result.push(key);
    }
  }
  return result;
}
var objectProto$1 = Object.prototype;
function isPrototype(value) {
  var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$1;
  return value === proto;
}
function overArg(func, transform2) {
  return function(arg) {
    return func(transform2(arg));
  };
}
var nativeKeys = overArg(Object.keys, Object);
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != "constructor") {
      result.push(key);
    }
  }
  return result;
}
function isObject(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var asyncTag = "[object AsyncFunction]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length2 = collection.length, index = -1, iterable = Object(collection);
    while (++index < length2) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}
var baseEach = createBaseEach(baseForOwn);
function identity(value) {
  return value;
}
function castFunction(value) {
  return typeof value == "function" ? value : identity;
}
function forEach(collection, iteratee) {
  var func = isArray(collection) ? arrayEach : baseEach;
  return func(collection, castFunction(iteratee));
}
var lodash = { exports: {} };
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
lodash.exports;
(function(module2, exports2) {
  (function() {
    var undefined$1;
    var VERSION = "4.17.21";
    var LARGE_ARRAY_SIZE = 200;
    var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var MAX_MEMOIZE_SIZE = 500;
    var PLACEHOLDER = "__lodash_placeholder__";
    var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
    var HOT_COUNT = 800, HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    var INFINITY2 = 1 / 0, MAX_SAFE_INTEGER2 = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var wrapFlags = [
      ["ary", WRAP_ARY_FLAG],
      ["bind", WRAP_BIND_FLAG],
      ["bindKey", WRAP_BIND_KEY_FLAG],
      ["curry", WRAP_CURRY_FLAG],
      ["curryRight", WRAP_CURRY_RIGHT_FLAG],
      ["flip", WRAP_FLIP_FLAG],
      ["partial", WRAP_PARTIAL_FLAG],
      ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
      ["rearg", WRAP_REARG_FLAG]
    ];
    var argsTag2 = "[object Arguments]", arrayTag2 = "[object Array]", asyncTag2 = "[object AsyncFunction]", boolTag2 = "[object Boolean]", dateTag2 = "[object Date]", domExcTag = "[object DOMException]", errorTag2 = "[object Error]", funcTag2 = "[object Function]", genTag2 = "[object GeneratorFunction]", mapTag2 = "[object Map]", numberTag2 = "[object Number]", nullTag2 = "[object Null]", objectTag2 = "[object Object]", promiseTag = "[object Promise]", proxyTag2 = "[object Proxy]", regexpTag2 = "[object RegExp]", setTag2 = "[object Set]", stringTag2 = "[object String]", symbolTag2 = "[object Symbol]", undefinedTag2 = "[object Undefined]", weakMapTag2 = "[object WeakMap]", weakSetTag = "[object WeakSet]";
    var arrayBufferTag2 = "[object ArrayBuffer]", dataViewTag2 = "[object DataView]", float32Tag2 = "[object Float32Array]", float64Tag2 = "[object Float64Array]", int8Tag2 = "[object Int8Array]", int16Tag2 = "[object Int16Array]", int32Tag2 = "[object Int32Array]", uint8Tag2 = "[object Uint8Array]", uint8ClampedTag2 = "[object Uint8ClampedArray]", uint16Tag2 = "[object Uint16Array]", uint32Tag2 = "[object Uint32Array]";
    var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrimStart = /^\s+/;
    var reWhitespace = /\s/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
    var reAsciiWord2 = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint2 = /^(?:0|[1-9]\d*)$/;
    var reLatin2 = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange2 = "\\ud800-\\udfff", rsComboMarksRange2 = "\\u0300-\\u036f", reComboHalfMarksRange2 = "\\ufe20-\\ufe2f", rsComboSymbolsRange2 = "\\u20d0-\\u20ff", rsComboRange2 = rsComboMarksRange2 + reComboHalfMarksRange2 + rsComboSymbolsRange2, rsDingbatRange2 = "\\u2700-\\u27bf", rsLowerRange2 = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange2 = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange2 = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange2 = "\\u2000-\\u206f", rsSpaceRange2 = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange2 = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange2 = "\\ufe0e\\ufe0f", rsBreakRange2 = rsMathOpRange2 + rsNonCharRange2 + rsPunctuationRange2 + rsSpaceRange2;
    var rsApos2 = "['’]", rsAstral2 = "[" + rsAstralRange2 + "]", rsBreak2 = "[" + rsBreakRange2 + "]", rsCombo2 = "[" + rsComboRange2 + "]", rsDigits2 = "\\d+", rsDingbat2 = "[" + rsDingbatRange2 + "]", rsLower2 = "[" + rsLowerRange2 + "]", rsMisc2 = "[^" + rsAstralRange2 + rsBreakRange2 + rsDigits2 + rsDingbatRange2 + rsLowerRange2 + rsUpperRange2 + "]", rsFitz2 = "\\ud83c[\\udffb-\\udfff]", rsModifier2 = "(?:" + rsCombo2 + "|" + rsFitz2 + ")", rsNonAstral2 = "[^" + rsAstralRange2 + "]", rsRegional2 = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair2 = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper2 = "[" + rsUpperRange2 + "]", rsZWJ2 = "\\u200d";
    var rsMiscLower2 = "(?:" + rsLower2 + "|" + rsMisc2 + ")", rsMiscUpper2 = "(?:" + rsUpper2 + "|" + rsMisc2 + ")", rsOptContrLower2 = "(?:" + rsApos2 + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper2 = "(?:" + rsApos2 + "(?:D|LL|M|RE|S|T|VE))?", reOptMod2 = rsModifier2 + "?", rsOptVar2 = "[" + rsVarRange2 + "]?", rsOptJoin2 = "(?:" + rsZWJ2 + "(?:" + [rsNonAstral2, rsRegional2, rsSurrPair2].join("|") + ")" + rsOptVar2 + reOptMod2 + ")*", rsOrdLower2 = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper2 = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq2 = rsOptVar2 + reOptMod2 + rsOptJoin2, rsEmoji2 = "(?:" + [rsDingbat2, rsRegional2, rsSurrPair2].join("|") + ")" + rsSeq2, rsSymbol2 = "(?:" + [rsNonAstral2 + rsCombo2 + "?", rsCombo2, rsRegional2, rsSurrPair2, rsAstral2].join("|") + ")";
    var reApos2 = RegExp(rsApos2, "g");
    var reComboMark2 = RegExp(rsCombo2, "g");
    var reUnicode2 = RegExp(rsFitz2 + "(?=" + rsFitz2 + ")|" + rsSymbol2 + rsSeq2, "g");
    var reUnicodeWord2 = RegExp([
      rsUpper2 + "?" + rsLower2 + "+" + rsOptContrLower2 + "(?=" + [rsBreak2, rsUpper2, "$"].join("|") + ")",
      rsMiscUpper2 + "+" + rsOptContrUpper2 + "(?=" + [rsBreak2, rsUpper2 + rsMiscLower2, "$"].join("|") + ")",
      rsUpper2 + "?" + rsMiscLower2 + "+" + rsOptContrLower2,
      rsUpper2 + "+" + rsOptContrUpper2,
      rsOrdUpper2,
      rsOrdLower2,
      rsDigits2,
      rsEmoji2
    ].join("|"), "g");
    var reHasUnicode2 = RegExp("[" + rsZWJ2 + rsAstralRange2 + rsComboRange2 + rsVarRange2 + "]");
    var reHasUnicodeWord2 = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = [
      "Array",
      "Buffer",
      "DataView",
      "Date",
      "Error",
      "Float32Array",
      "Float64Array",
      "Function",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Map",
      "Math",
      "Object",
      "Promise",
      "RegExp",
      "Set",
      "String",
      "Symbol",
      "TypeError",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "WeakMap",
      "_",
      "clearTimeout",
      "isFinite",
      "parseInt",
      "setTimeout"
    ];
    var templateCounter = -1;
    var typedArrayTags2 = {};
    typedArrayTags2[float32Tag2] = typedArrayTags2[float64Tag2] = typedArrayTags2[int8Tag2] = typedArrayTags2[int16Tag2] = typedArrayTags2[int32Tag2] = typedArrayTags2[uint8Tag2] = typedArrayTags2[uint8ClampedTag2] = typedArrayTags2[uint16Tag2] = typedArrayTags2[uint32Tag2] = true;
    typedArrayTags2[argsTag2] = typedArrayTags2[arrayTag2] = typedArrayTags2[arrayBufferTag2] = typedArrayTags2[boolTag2] = typedArrayTags2[dataViewTag2] = typedArrayTags2[dateTag2] = typedArrayTags2[errorTag2] = typedArrayTags2[funcTag2] = typedArrayTags2[mapTag2] = typedArrayTags2[numberTag2] = typedArrayTags2[objectTag2] = typedArrayTags2[regexpTag2] = typedArrayTags2[setTag2] = typedArrayTags2[stringTag2] = typedArrayTags2[weakMapTag2] = false;
    var cloneableTags = {};
    cloneableTags[argsTag2] = cloneableTags[arrayTag2] = cloneableTags[arrayBufferTag2] = cloneableTags[dataViewTag2] = cloneableTags[boolTag2] = cloneableTags[dateTag2] = cloneableTags[float32Tag2] = cloneableTags[float64Tag2] = cloneableTags[int8Tag2] = cloneableTags[int16Tag2] = cloneableTags[int32Tag2] = cloneableTags[mapTag2] = cloneableTags[numberTag2] = cloneableTags[objectTag2] = cloneableTags[regexpTag2] = cloneableTags[setTag2] = cloneableTags[stringTag2] = cloneableTags[symbolTag2] = cloneableTags[uint8Tag2] = cloneableTags[uint8ClampedTag2] = cloneableTags[uint16Tag2] = cloneableTags[uint32Tag2] = true;
    cloneableTags[errorTag2] = cloneableTags[funcTag2] = cloneableTags[weakMapTag2] = false;
    var deburredLetters2 = {
      // Latin-1 Supplement block.
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ã": "A",
      "Ä": "A",
      "Å": "A",
      "à": "a",
      "á": "a",
      "â": "a",
      "ã": "a",
      "ä": "a",
      "å": "a",
      "Ç": "C",
      "ç": "c",
      "Ð": "D",
      "ð": "d",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ë": "E",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ë": "e",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ï": "I",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ï": "i",
      "Ñ": "N",
      "ñ": "n",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Õ": "O",
      "Ö": "O",
      "Ø": "O",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "õ": "o",
      "ö": "o",
      "ø": "o",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ü": "U",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ü": "u",
      "Ý": "Y",
      "ý": "y",
      "ÿ": "y",
      "Æ": "Ae",
      "æ": "ae",
      "Þ": "Th",
      "þ": "th",
      "ß": "ss",
      // Latin Extended-A block.
      "Ā": "A",
      "Ă": "A",
      "Ą": "A",
      "ā": "a",
      "ă": "a",
      "ą": "a",
      "Ć": "C",
      "Ĉ": "C",
      "Ċ": "C",
      "Č": "C",
      "ć": "c",
      "ĉ": "c",
      "ċ": "c",
      "č": "c",
      "Ď": "D",
      "Đ": "D",
      "ď": "d",
      "đ": "d",
      "Ē": "E",
      "Ĕ": "E",
      "Ė": "E",
      "Ę": "E",
      "Ě": "E",
      "ē": "e",
      "ĕ": "e",
      "ė": "e",
      "ę": "e",
      "ě": "e",
      "Ĝ": "G",
      "Ğ": "G",
      "Ġ": "G",
      "Ģ": "G",
      "ĝ": "g",
      "ğ": "g",
      "ġ": "g",
      "ģ": "g",
      "Ĥ": "H",
      "Ħ": "H",
      "ĥ": "h",
      "ħ": "h",
      "Ĩ": "I",
      "Ī": "I",
      "Ĭ": "I",
      "Į": "I",
      "İ": "I",
      "ĩ": "i",
      "ī": "i",
      "ĭ": "i",
      "į": "i",
      "ı": "i",
      "Ĵ": "J",
      "ĵ": "j",
      "Ķ": "K",
      "ķ": "k",
      "ĸ": "k",
      "Ĺ": "L",
      "Ļ": "L",
      "Ľ": "L",
      "Ŀ": "L",
      "Ł": "L",
      "ĺ": "l",
      "ļ": "l",
      "ľ": "l",
      "ŀ": "l",
      "ł": "l",
      "Ń": "N",
      "Ņ": "N",
      "Ň": "N",
      "Ŋ": "N",
      "ń": "n",
      "ņ": "n",
      "ň": "n",
      "ŋ": "n",
      "Ō": "O",
      "Ŏ": "O",
      "Ő": "O",
      "ō": "o",
      "ŏ": "o",
      "ő": "o",
      "Ŕ": "R",
      "Ŗ": "R",
      "Ř": "R",
      "ŕ": "r",
      "ŗ": "r",
      "ř": "r",
      "Ś": "S",
      "Ŝ": "S",
      "Ş": "S",
      "Š": "S",
      "ś": "s",
      "ŝ": "s",
      "ş": "s",
      "š": "s",
      "Ţ": "T",
      "Ť": "T",
      "Ŧ": "T",
      "ţ": "t",
      "ť": "t",
      "ŧ": "t",
      "Ũ": "U",
      "Ū": "U",
      "Ŭ": "U",
      "Ů": "U",
      "Ű": "U",
      "Ų": "U",
      "ũ": "u",
      "ū": "u",
      "ŭ": "u",
      "ů": "u",
      "ű": "u",
      "ų": "u",
      "Ŵ": "W",
      "ŵ": "w",
      "Ŷ": "Y",
      "ŷ": "y",
      "Ÿ": "Y",
      "Ź": "Z",
      "Ż": "Z",
      "Ž": "Z",
      "ź": "z",
      "ż": "z",
      "ž": "z",
      "Ĳ": "IJ",
      "ĳ": "ij",
      "Œ": "Oe",
      "œ": "oe",
      "ŉ": "'n",
      "ſ": "s"
    };
    var htmlEscapes = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    var htmlUnescapes = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&#39;": "'"
    };
    var stringEscapes = {
      "\\": "\\",
      "'": "'",
      "\n": "n",
      "\r": "r",
      "\u2028": "u2028",
      "\u2029": "u2029"
    };
    var freeParseFloat = parseFloat, freeParseInt = parseInt;
    var freeGlobal2 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
    var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
    var freeExports2 = exports2 && !exports2.nodeType && exports2;
    var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
    var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
    var freeProcess2 = moduleExports2 && freeGlobal2.process;
    var nodeUtil2 = function() {
      try {
        var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsArrayBuffer = nodeUtil2 && nodeUtil2.isArrayBuffer, nodeIsDate = nodeUtil2 && nodeUtil2.isDate, nodeIsMap = nodeUtil2 && nodeUtil2.isMap, nodeIsRegExp = nodeUtil2 && nodeUtil2.isRegExp, nodeIsSet = nodeUtil2 && nodeUtil2.isSet, nodeIsTypedArray2 = nodeUtil2 && nodeUtil2.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayAggregator(array2, setter, iteratee, accumulator) {
      var index = -1, length2 = array2 == null ? 0 : array2.length;
      while (++index < length2) {
        var value = array2[index];
        setter(accumulator, value, iteratee(value), array2);
      }
      return accumulator;
    }
    function arrayEach2(array2, iteratee) {
      var index = -1, length2 = array2 == null ? 0 : array2.length;
      while (++index < length2) {
        if (iteratee(array2[index], index, array2) === false) {
          break;
        }
      }
      return array2;
    }
    function arrayEachRight(array2, iteratee) {
      var length2 = array2 == null ? 0 : array2.length;
      while (length2--) {
        if (iteratee(array2[length2], length2, array2) === false) {
          break;
        }
      }
      return array2;
    }
    function arrayEvery(array2, predicate) {
      var index = -1, length2 = array2 == null ? 0 : array2.length;
      while (++index < length2) {
        if (!predicate(array2[index], index, array2)) {
          return false;
        }
      }
      return true;
    }
    function arrayFilter(array2, predicate) {
      var index = -1, length2 = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
      while (++index < length2) {
        var value = array2[index];
        if (predicate(value, index, array2)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayIncludes(array2, value) {
      var length2 = array2 == null ? 0 : array2.length;
      return !!length2 && baseIndexOf(array2, value, 0) > -1;
    }
    function arrayIncludesWith(array2, value, comparator) {
      var index = -1, length2 = array2 == null ? 0 : array2.length;
      while (++index < length2) {
        if (comparator(value, array2[index])) {
          return true;
        }
      }
      return false;
    }
    function arrayMap2(array2, iteratee) {
      var index = -1, length2 = array2 == null ? 0 : array2.length, result = Array(length2);
      while (++index < length2) {
        result[index] = iteratee(array2[index], index, array2);
      }
      return result;
    }
    function arrayPush(array2, values) {
      var index = -1, length2 = values.length, offset = array2.length;
      while (++index < length2) {
        array2[offset + index] = values[index];
      }
      return array2;
    }
    function arrayReduce2(array2, iteratee, accumulator, initAccum) {
      var index = -1, length2 = array2 == null ? 0 : array2.length;
      if (initAccum && length2) {
        accumulator = array2[++index];
      }
      while (++index < length2) {
        accumulator = iteratee(accumulator, array2[index], index, array2);
      }
      return accumulator;
    }
    function arrayReduceRight(array2, iteratee, accumulator, initAccum) {
      var length2 = array2 == null ? 0 : array2.length;
      if (initAccum && length2) {
        accumulator = array2[--length2];
      }
      while (length2--) {
        accumulator = iteratee(accumulator, array2[length2], length2, array2);
      }
      return accumulator;
    }
    function arraySome(array2, predicate) {
      var index = -1, length2 = array2 == null ? 0 : array2.length;
      while (++index < length2) {
        if (predicate(array2[index], index, array2)) {
          return true;
        }
      }
      return false;
    }
    var asciiSize = baseProperty("length");
    function asciiToArray2(string) {
      return string.split("");
    }
    function asciiWords2(string) {
      return string.match(reAsciiWord2) || [];
    }
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function(value, key, collection2) {
        if (predicate(value, key, collection2)) {
          result = key;
          return false;
        }
      });
      return result;
    }
    function baseFindIndex(array2, predicate, fromIndex, fromRight) {
      var length2 = array2.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length2) {
        if (predicate(array2[index], index, array2)) {
          return index;
        }
      }
      return -1;
    }
    function baseIndexOf(array2, value, fromIndex) {
      return value === value ? strictIndexOf(array2, value, fromIndex) : baseFindIndex(array2, baseIsNaN, fromIndex);
    }
    function baseIndexOfWith(array2, value, fromIndex, comparator) {
      var index = fromIndex - 1, length2 = array2.length;
      while (++index < length2) {
        if (comparator(array2[index], value)) {
          return index;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseMean(array2, iteratee) {
      var length2 = array2 == null ? 0 : array2.length;
      return length2 ? baseSum(array2, iteratee) / length2 : NAN;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined$1 : object[key];
      };
    }
    function basePropertyOf2(object) {
      return function(key) {
        return object == null ? undefined$1 : object[key];
      };
    }
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection2) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
      });
      return accumulator;
    }
    function baseSortBy(array2, comparer) {
      var length2 = array2.length;
      array2.sort(comparer);
      while (length2--) {
        array2[length2] = array2[length2].value;
      }
      return array2;
    }
    function baseSum(array2, iteratee) {
      var result, index = -1, length2 = array2.length;
      while (++index < length2) {
        var current = iteratee(array2[index]);
        if (current !== undefined$1) {
          result = result === undefined$1 ? current : result + current;
        }
      }
      return result;
    }
    function baseTimes2(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseToPairs(object, props) {
      return arrayMap2(props, function(key) {
        return [key, object[key]];
      });
    }
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    function baseUnary2(func) {
      return function(value) {
        return func(value);
      };
    }
    function baseValues(object, props) {
      return arrayMap2(props, function(key) {
        return object[key];
      });
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1, length2 = strSymbols.length;
      while (++index < length2 && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
      }
      return index;
    }
    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;
      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
      }
      return index;
    }
    function countHolders(array2, placeholder) {
      var length2 = array2.length, result = 0;
      while (length2--) {
        if (array2[length2] === placeholder) {
          ++result;
        }
      }
      return result;
    }
    var deburrLetter2 = basePropertyOf2(deburredLetters2);
    var escapeHtmlChar = basePropertyOf2(htmlEscapes);
    function escapeStringChar(chr) {
      return "\\" + stringEscapes[chr];
    }
    function getValue(object, key) {
      return object == null ? undefined$1 : object[key];
    }
    function hasUnicode2(string) {
      return reHasUnicode2.test(string);
    }
    function hasUnicodeWord2(string) {
      return reHasUnicodeWord2.test(string);
    }
    function iteratorToArray(iterator) {
      var data2, result = [];
      while (!(data2 = iterator.next()).done) {
        result.push(data2.value);
      }
      return result;
    }
    function mapToArray(map2) {
      var index = -1, result = Array(map2.size);
      map2.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg2(func, transform2) {
      return function(arg) {
        return func(transform2(arg));
      };
    }
    function replaceHolders(array2, placeholder) {
      var index = -1, length2 = array2.length, resIndex = 0, result = [];
      while (++index < length2) {
        var value = array2[index];
        if (value === placeholder || value === PLACEHOLDER) {
          array2[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }
      return result;
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    function setToPairs(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = [value, value];
      });
      return result;
    }
    function strictIndexOf(array2, value, fromIndex) {
      var index = fromIndex - 1, length2 = array2.length;
      while (++index < length2) {
        if (array2[index] === value) {
          return index;
        }
      }
      return -1;
    }
    function strictLastIndexOf(array2, value, fromIndex) {
      var index = fromIndex + 1;
      while (index--) {
        if (array2[index] === value) {
          return index;
        }
      }
      return index;
    }
    function stringSize(string) {
      return hasUnicode2(string) ? unicodeSize(string) : asciiSize(string);
    }
    function stringToArray2(string) {
      return hasUnicode2(string) ? unicodeToArray2(string) : asciiToArray2(string);
    }
    function trimmedEndIndex(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    var unescapeHtmlChar = basePropertyOf2(htmlUnescapes);
    function unicodeSize(string) {
      var result = reUnicode2.lastIndex = 0;
      while (reUnicode2.test(string)) {
        ++result;
      }
      return result;
    }
    function unicodeToArray2(string) {
      return string.match(reUnicode2) || [];
    }
    function unicodeWords2(string) {
      return string.match(reUnicodeWord2) || [];
    }
    var runInContext = function runInContext2(context) {
      context = context == null ? root2 : _.defaults(root2.Object(), context, _.pick(root2, contextProps));
      var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError = context.TypeError;
      var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto2 = Object2.prototype;
      var coreJsData = context["__core-js_shared__"];
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto2.hasOwnProperty;
      var idCounter = 0;
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var nativeObjectToString2 = objectProto2.toString;
      var objectCtorString = funcToString.call(Object2);
      var oldDash = root2._;
      var reIsNative = RegExp2(
        "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      var Buffer2 = moduleExports2 ? context.Buffer : undefined$1, Symbol3 = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined$1, getPrototype = overArg2(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable2 = objectProto2.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol3 ? Symbol3.isConcatSpreadable : undefined$1, symIterator = Symbol3 ? Symbol3.iterator : undefined$1, symToStringTag2 = Symbol3 ? Symbol3.toStringTag : undefined$1;
      var defineProperty = function() {
        try {
          var func = getNative(Object2, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e) {
        }
      }();
      var ctxClearTimeout = context.clearTimeout !== root2.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root2.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root2.setTimeout && context.setTimeout;
      var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer2 = Buffer2 ? Buffer2.isBuffer : undefined$1, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys2 = overArg2(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
      var DataView = getNative(context, "DataView"), Map = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
      var metaMap = WeakMap && new WeakMap();
      var realNames = {};
      var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap);
      var symbolProto2 = Symbol3 ? Symbol3.prototype : undefined$1, symbolValueOf = symbolProto2 ? symbolProto2.valueOf : undefined$1, symbolToString2 = symbolProto2 ? symbolProto2.toString : undefined$1;
      function lodash2(value) {
        if (isObjectLike2(value) && !isArray2(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }
          if (hasOwnProperty2.call(value, "__wrapped__")) {
            return wrapperClone(value);
          }
        }
        return new LodashWrapper(value);
      }
      var baseCreate = /* @__PURE__ */ function() {
        function object() {
        }
        return function(proto) {
          if (!isObject2(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result2 = new object();
          object.prototype = undefined$1;
          return result2;
        };
      }();
      function baseLodash() {
      }
      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined$1;
      }
      lodash2.templateSettings = {
        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        "escape": reEscape,
        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        "evaluate": reEvaluate,
        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        "interpolate": reInterpolate,
        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */
        "variable": "",
        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */
        "imports": {
          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */
          "_": lodash2
        }
      };
      lodash2.prototype = baseLodash.prototype;
      lodash2.prototype.constructor = lodash2;
      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;
      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }
      function lazyClone() {
        var result2 = new LazyWrapper(this.__wrapped__);
        result2.__actions__ = copyArray(this.__actions__);
        result2.__dir__ = this.__dir__;
        result2.__filtered__ = this.__filtered__;
        result2.__iteratees__ = copyArray(this.__iteratees__);
        result2.__takeCount__ = this.__takeCount__;
        result2.__views__ = copyArray(this.__views__);
        return result2;
      }
      function lazyReverse() {
        if (this.__filtered__) {
          var result2 = new LazyWrapper(this);
          result2.__dir__ = -1;
          result2.__filtered__ = true;
        } else {
          result2 = this.clone();
          result2.__dir__ *= -1;
        }
        return result2;
      }
      function lazyValue() {
        var array2 = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray2(array2), isRight = dir < 0, arrLength = isArr ? array2.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length2 = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length2, this.__takeCount__);
        if (!isArr || !isRight && arrLength == length2 && takeCount == length2) {
          return baseWrapperValue(array2, this.__actions__);
        }
        var result2 = [];
        outer:
          while (length2-- && resIndex < takeCount) {
            index += dir;
            var iterIndex = -1, value = array2[index];
            while (++iterIndex < iterLength) {
              var data2 = iteratees[iterIndex], iteratee2 = data2.iteratee, type = data2.type, computed = iteratee2(value);
              if (type == LAZY_MAP_FLAG) {
                value = computed;
              } else if (!computed) {
                if (type == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result2[resIndex++] = value;
          }
        return result2;
      }
      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;
      function Hash(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      function hashDelete(key) {
        var result2 = this.has(key) && delete this.__data__[key];
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      function hashGet(key) {
        var data2 = this.__data__;
        if (nativeCreate) {
          var result2 = data2[key];
          return result2 === HASH_UNDEFINED ? undefined$1 : result2;
        }
        return hasOwnProperty2.call(data2, key) ? data2[key] : undefined$1;
      }
      function hashHas(key) {
        var data2 = this.__data__;
        return nativeCreate ? data2[key] !== undefined$1 : hasOwnProperty2.call(data2, key);
      }
      function hashSet(key, value) {
        var data2 = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data2[key] = nativeCreate && value === undefined$1 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      function listCacheDelete(key) {
        var data2 = this.__data__, index = assocIndexOf(data2, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data2.length - 1;
        if (index == lastIndex) {
          data2.pop();
        } else {
          splice.call(data2, index, 1);
        }
        --this.size;
        return true;
      }
      function listCacheGet(key) {
        var data2 = this.__data__, index = assocIndexOf(data2, key);
        return index < 0 ? undefined$1 : data2[index][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data2 = this.__data__, index = assocIndexOf(data2, key);
        if (index < 0) {
          ++this.size;
          data2.push([key, value]);
        } else {
          data2[index][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        var result2 = getMapData(this, key)["delete"](key);
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        var data2 = getMapData(this, key), size3 = data2.size;
        data2.set(key, value);
        this.size += data2.size == size3 ? 0 : 1;
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function SetCache(values2) {
        var index = -1, length2 = values2 == null ? 0 : values2.length;
        this.__data__ = new MapCache();
        while (++index < length2) {
          this.add(values2[index]);
        }
      }
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      function Stack(entries) {
        var data2 = this.__data__ = new ListCache(entries);
        this.size = data2.size;
      }
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      function stackDelete(key) {
        var data2 = this.__data__, result2 = data2["delete"](key);
        this.size = data2.size;
        return result2;
      }
      function stackGet(key) {
        return this.__data__.get(key);
      }
      function stackHas(key) {
        return this.__data__.has(key);
      }
      function stackSet(key, value) {
        var data2 = this.__data__;
        if (data2 instanceof ListCache) {
          var pairs = data2.__data__;
          if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data2.size;
            return this;
          }
          data2 = this.__data__ = new MapCache(pairs);
        }
        data2.set(key, value);
        this.size = data2.size;
        return this;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      function arrayLikeKeys2(value, inherited) {
        var isArr = isArray2(value), isArg = !isArr && isArguments2(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray2(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes2(value.length, String2) : [], length2 = result2.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
          (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
          isIndex2(key, length2)))) {
            result2.push(key);
          }
        }
        return result2;
      }
      function arraySample(array2) {
        var length2 = array2.length;
        return length2 ? array2[baseRandom(0, length2 - 1)] : undefined$1;
      }
      function arraySampleSize(array2, n) {
        return shuffleSelf(copyArray(array2), baseClamp(n, 0, array2.length));
      }
      function arrayShuffle(array2) {
        return shuffleSelf(copyArray(array2));
      }
      function assignMergeValue(object, key, value) {
        if (value !== undefined$1 && !eq(object[key], value) || value === undefined$1 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === undefined$1 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assocIndexOf(array2, key) {
        var length2 = array2.length;
        while (length2--) {
          if (eq(array2[length2][0], key)) {
            return length2;
          }
        }
        return -1;
      }
      function baseAggregator(collection, setter, iteratee2, accumulator) {
        baseEach2(collection, function(value, key, collection2) {
          setter(accumulator, value, iteratee2(value), collection2);
        });
        return accumulator;
      }
      function baseAssign(object, source) {
        return object && copyObject(source, keys2(source), object);
      }
      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      function baseAt(object, paths) {
        var index = -1, length2 = paths.length, result2 = Array2(length2), skip = object == null;
        while (++index < length2) {
          result2[index] = skip ? undefined$1 : get(object, paths[index]);
        }
        return result2;
      }
      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined$1) {
            number = number <= upper ? number : upper;
          }
          if (lower !== undefined$1) {
            number = number >= lower ? number : lower;
          }
        }
        return number;
      }
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
        if (customizer) {
          result2 = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result2 !== undefined$1) {
          return result2;
        }
        if (!isObject2(value)) {
          return value;
        }
        var isArr = isArray2(value);
        if (isArr) {
          result2 = initCloneArray(value);
          if (!isDeep) {
            return copyArray(value, result2);
          }
        } else {
          var tag = getTag(value), isFunc = tag == funcTag2 || tag == genTag2;
          if (isBuffer2(value)) {
            return cloneBuffer(value, isDeep);
          }
          if (tag == objectTag2 || tag == argsTag2 || isFunc && !object) {
            result2 = isFlat || isFunc ? {} : initCloneObject(value);
            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result2 = initCloneByTag(value, tag, isDeep);
          }
        }
        stack || (stack = new Stack());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result2);
        if (isSet(value)) {
          value.forEach(function(subValue) {
            result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap(value)) {
          value.forEach(function(subValue, key2) {
            result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys2;
        var props = isArr ? undefined$1 : keysFunc(value);
        arrayEach2(props || value, function(subValue, key2) {
          if (props) {
            key2 = subValue;
            subValue = value[key2];
          }
          assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
        return result2;
      }
      function baseConforms(source) {
        var props = keys2(source);
        return function(object) {
          return baseConformsTo(object, source, props);
        };
      }
      function baseConformsTo(object, source, props) {
        var length2 = props.length;
        if (object == null) {
          return !length2;
        }
        object = Object2(object);
        while (length2--) {
          var key = props[length2], predicate = source[key], value = object[key];
          if (value === undefined$1 && !(key in object) || !predicate(value)) {
            return false;
          }
        }
        return true;
      }
      function baseDelay(func, wait, args) {
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return setTimeout2(function() {
          func.apply(undefined$1, args);
        }, wait);
      }
      function baseDifference(array2, values2, iteratee2, comparator) {
        var index = -1, includes2 = arrayIncludes, isCommon = true, length2 = array2.length, result2 = [], valuesLength = values2.length;
        if (!length2) {
          return result2;
        }
        if (iteratee2) {
          values2 = arrayMap2(values2, baseUnary2(iteratee2));
        }
        if (comparator) {
          includes2 = arrayIncludesWith;
          isCommon = false;
        } else if (values2.length >= LARGE_ARRAY_SIZE) {
          includes2 = cacheHas;
          isCommon = false;
          values2 = new SetCache(values2);
        }
        outer:
          while (++index < length2) {
            var value = array2[index], computed = iteratee2 == null ? value : iteratee2(value);
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values2[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result2.push(value);
            } else if (!includes2(values2, computed, comparator)) {
              result2.push(value);
            }
          }
        return result2;
      }
      var baseEach2 = createBaseEach2(baseForOwn2);
      var baseEachRight = createBaseEach2(baseForOwnRight, true);
      function baseEvery(collection, predicate) {
        var result2 = true;
        baseEach2(collection, function(value, index, collection2) {
          result2 = !!predicate(value, index, collection2);
          return result2;
        });
        return result2;
      }
      function baseExtremum(array2, iteratee2, comparator) {
        var index = -1, length2 = array2.length;
        while (++index < length2) {
          var value = array2[index], current = iteratee2(value);
          if (current != null && (computed === undefined$1 ? current === current && !isSymbol2(current) : comparator(current, computed))) {
            var computed = current, result2 = value;
          }
        }
        return result2;
      }
      function baseFill(array2, value, start, end) {
        var length2 = array2.length;
        start = toInteger(start);
        if (start < 0) {
          start = -start > length2 ? 0 : length2 + start;
        }
        end = end === undefined$1 || end > length2 ? length2 : toInteger(end);
        if (end < 0) {
          end += length2;
        }
        end = start > end ? 0 : toLength(end);
        while (start < end) {
          array2[start++] = value;
        }
        return array2;
      }
      function baseFilter(collection, predicate) {
        var result2 = [];
        baseEach2(collection, function(value, index, collection2) {
          if (predicate(value, index, collection2)) {
            result2.push(value);
          }
        });
        return result2;
      }
      function baseFlatten(array2, depth, predicate, isStrict, result2) {
        var index = -1, length2 = array2.length;
        predicate || (predicate = isFlattenable);
        result2 || (result2 = []);
        while (++index < length2) {
          var value = array2[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result2);
            } else {
              arrayPush(result2, value);
            }
          } else if (!isStrict) {
            result2[result2.length] = value;
          }
        }
        return result2;
      }
      var baseFor2 = createBaseFor2();
      var baseForRight = createBaseFor2(true);
      function baseForOwn2(object, iteratee2) {
        return object && baseFor2(object, iteratee2, keys2);
      }
      function baseForOwnRight(object, iteratee2) {
        return object && baseForRight(object, iteratee2, keys2);
      }
      function baseFunctions(object, props) {
        return arrayFilter(props, function(key) {
          return isFunction2(object[key]);
        });
      }
      function baseGet(object, path) {
        path = castPath(path, object);
        var index = 0, length2 = path.length;
        while (object != null && index < length2) {
          object = object[toKey(path[index++])];
        }
        return index && index == length2 ? object : undefined$1;
      }
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result2 = keysFunc(object);
        return isArray2(object) ? result2 : arrayPush(result2, symbolsFunc(object));
      }
      function baseGetTag2(value) {
        if (value == null) {
          return value === undefined$1 ? undefinedTag2 : nullTag2;
        }
        return symToStringTag2 && symToStringTag2 in Object2(value) ? getRawTag2(value) : objectToString2(value);
      }
      function baseGt(value, other) {
        return value > other;
      }
      function baseHas(object, key) {
        return object != null && hasOwnProperty2.call(object, key);
      }
      function baseHasIn(object, key) {
        return object != null && key in Object2(object);
      }
      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }
      function baseIntersection(arrays, iteratee2, comparator) {
        var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length2 = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
        while (othIndex--) {
          var array2 = arrays[othIndex];
          if (othIndex && iteratee2) {
            array2 = arrayMap2(array2, baseUnary2(iteratee2));
          }
          maxLength = nativeMin(array2.length, maxLength);
          caches[othIndex] = !comparator && (iteratee2 || length2 >= 120 && array2.length >= 120) ? new SetCache(othIndex && array2) : undefined$1;
        }
        array2 = arrays[0];
        var index = -1, seen = caches[0];
        outer:
          while (++index < length2 && result2.length < maxLength) {
            var value = array2[index], computed = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result2.push(value);
            }
          }
        return result2;
      }
      function baseInverter(object, setter, iteratee2, accumulator) {
        baseForOwn2(object, function(value, key, object2) {
          setter(accumulator, iteratee2(value), key, object2);
        });
        return accumulator;
      }
      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined$1 : apply(func, object, args);
      }
      function baseIsArguments2(value) {
        return isObjectLike2(value) && baseGetTag2(value) == argsTag2;
      }
      function baseIsArrayBuffer(value) {
        return isObjectLike2(value) && baseGetTag2(value) == arrayBufferTag2;
      }
      function baseIsDate(value) {
        return isObjectLike2(value) && baseGetTag2(value) == dateTag2;
      }
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike2(value) && !isObjectLike2(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag2 : getTag(object), othTag = othIsArr ? arrayTag2 : getTag(other);
        objTag = objTag == argsTag2 ? objectTag2 : objTag;
        othTag = othTag == argsTag2 ? objectTag2 : othTag;
        var objIsObj = objTag == objectTag2, othIsObj = othTag == objectTag2, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer2(object)) {
          if (!isBuffer2(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray2(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }
      function baseIsMap(value) {
        return isObjectLike2(value) && getTag(value) == mapTag2;
      }
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length, length2 = index, noCustomizer = !customizer;
        if (object == null) {
          return !length2;
        }
        object = Object2(object);
        while (index--) {
          var data2 = matchData[index];
          if (noCustomizer && data2[2] ? data2[1] !== object[data2[0]] : !(data2[0] in object)) {
            return false;
          }
        }
        while (++index < length2) {
          data2 = matchData[index];
          var key = data2[0], objValue = object[key], srcValue = data2[1];
          if (noCustomizer && data2[2]) {
            if (objValue === undefined$1 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();
            if (customizer) {
              var result2 = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result2 === undefined$1 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
              return false;
            }
          }
        }
        return true;
      }
      function baseIsNative(value) {
        if (!isObject2(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseIsRegExp(value) {
        return isObjectLike2(value) && baseGetTag2(value) == regexpTag2;
      }
      function baseIsSet(value) {
        return isObjectLike2(value) && getTag(value) == setTag2;
      }
      function baseIsTypedArray2(value) {
        return isObjectLike2(value) && isLength2(value.length) && !!typedArrayTags2[baseGetTag2(value)];
      }
      function baseIteratee(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity2;
        }
        if (typeof value == "object") {
          return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }
        return property(value);
      }
      function baseKeys2(object) {
        if (!isPrototype2(object)) {
          return nativeKeys2(object);
        }
        var result2 = [];
        for (var key in Object2(object)) {
          if (hasOwnProperty2.call(object, key) && key != "constructor") {
            result2.push(key);
          }
        }
        return result2;
      }
      function baseKeysIn(object) {
        if (!isObject2(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype2(object), result2 = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
            result2.push(key);
          }
        }
        return result2;
      }
      function baseLt(value, other) {
        return value < other;
      }
      function baseMap(collection, iteratee2) {
        var index = -1, result2 = isArrayLike2(collection) ? Array2(collection.length) : [];
        baseEach2(collection, function(value, key, collection2) {
          result2[++index] = iteratee2(value, key, collection2);
        });
        return result2;
      }
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }
      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function(object) {
          var objValue = get(object, path);
          return objValue === undefined$1 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor2(source, function(srcValue, key) {
          stack || (stack = new Stack());
          if (isObject2(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined$1;
            if (newValue === undefined$1) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined$1;
        var isCommon = newValue === undefined$1;
        if (isCommon) {
          var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray2(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray2(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments2(srcValue)) {
            newValue = objValue;
            if (isArguments2(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject2(objValue) || isFunction2(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }
      function baseNth(array2, n) {
        var length2 = array2.length;
        if (!length2) {
          return;
        }
        n += n < 0 ? length2 : 0;
        return isIndex2(n, length2) ? array2[n] : undefined$1;
      }
      function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
          iteratees = arrayMap2(iteratees, function(iteratee2) {
            if (isArray2(iteratee2)) {
              return function(value) {
                return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
              };
            }
            return iteratee2;
          });
        } else {
          iteratees = [identity2];
        }
        var index = -1;
        iteratees = arrayMap2(iteratees, baseUnary2(getIteratee()));
        var result2 = baseMap(collection, function(value, key, collection2) {
          var criteria = arrayMap2(iteratees, function(iteratee2) {
            return iteratee2(value);
          });
          return { "criteria": criteria, "index": ++index, "value": value };
        });
        return baseSortBy(result2, function(object, other) {
          return compareMultiple(object, other, orders);
        });
      }
      function basePick(object, paths) {
        return basePickBy(object, paths, function(value, path) {
          return hasIn(object, path);
        });
      }
      function basePickBy(object, paths, predicate) {
        var index = -1, length2 = paths.length, result2 = {};
        while (++index < length2) {
          var path = paths[index], value = baseGet(object, path);
          if (predicate(value, path)) {
            baseSet(result2, castPath(path, object), value);
          }
        }
        return result2;
      }
      function basePropertyDeep(path) {
        return function(object) {
          return baseGet(object, path);
        };
      }
      function basePullAll(array2, values2, iteratee2, comparator) {
        var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length2 = values2.length, seen = array2;
        if (array2 === values2) {
          values2 = copyArray(values2);
        }
        if (iteratee2) {
          seen = arrayMap2(array2, baseUnary2(iteratee2));
        }
        while (++index < length2) {
          var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
          while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array2) {
              splice.call(seen, fromIndex, 1);
            }
            splice.call(array2, fromIndex, 1);
          }
        }
        return array2;
      }
      function basePullAt(array2, indexes) {
        var length2 = array2 ? indexes.length : 0, lastIndex = length2 - 1;
        while (length2--) {
          var index = indexes[length2];
          if (length2 == lastIndex || index !== previous) {
            var previous = index;
            if (isIndex2(index)) {
              splice.call(array2, index, 1);
            } else {
              baseUnset(array2, index);
            }
          }
        }
        return array2;
      }
      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }
      function baseRange(start, end, step, fromRight) {
        var index = -1, length2 = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length2);
        while (length2--) {
          result2[fromRight ? length2 : ++index] = start;
          start += step;
        }
        return result2;
      }
      function baseRepeat(string, n) {
        var result2 = "";
        if (!string || n < 1 || n > MAX_SAFE_INTEGER2) {
          return result2;
        }
        do {
          if (n % 2) {
            result2 += string;
          }
          n = nativeFloor(n / 2);
          if (n) {
            string += string;
          }
        } while (n);
        return result2;
      }
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity2), func + "");
      }
      function baseSample(collection) {
        return arraySample(values(collection));
      }
      function baseSampleSize(collection, n) {
        var array2 = values(collection);
        return shuffleSelf(array2, baseClamp(n, 0, array2.length));
      }
      function baseSet(object, path, value, customizer) {
        if (!isObject2(object)) {
          return object;
        }
        path = castPath(path, object);
        var index = -1, length2 = path.length, lastIndex = length2 - 1, nested = object;
        while (nested != null && ++index < length2) {
          var key = toKey(path[index]), newValue = value;
          if (key === "__proto__" || key === "constructor" || key === "prototype") {
            return object;
          }
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
            if (newValue === undefined$1) {
              newValue = isObject2(objValue) ? objValue : isIndex2(path[index + 1]) ? [] : {};
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }
      var baseSetData = !metaMap ? identity2 : function(func, data2) {
        metaMap.set(func, data2);
        return func;
      };
      var baseSetToString = !defineProperty ? identity2 : function(func, string) {
        return defineProperty(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant(string),
          "writable": true
        });
      };
      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }
      function baseSlice2(array2, start, end) {
        var index = -1, length2 = array2.length;
        if (start < 0) {
          start = -start > length2 ? 0 : length2 + start;
        }
        end = end > length2 ? length2 : end;
        if (end < 0) {
          end += length2;
        }
        length2 = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result2 = Array2(length2);
        while (++index < length2) {
          result2[index] = array2[index + start];
        }
        return result2;
      }
      function baseSome(collection, predicate) {
        var result2;
        baseEach2(collection, function(value, index, collection2) {
          result2 = predicate(value, index, collection2);
          return !result2;
        });
        return !!result2;
      }
      function baseSortedIndex(array2, value, retHighest) {
        var low = 0, high = array2 == null ? low : array2.length;
        if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1, computed = array2[mid];
            if (computed !== null && !isSymbol2(computed) && (retHighest ? computed <= value : computed < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return baseSortedIndexBy(array2, value, identity2, retHighest);
      }
      function baseSortedIndexBy(array2, value, iteratee2, retHighest) {
        var low = 0, high = array2 == null ? 0 : array2.length;
        if (high === 0) {
          return 0;
        }
        value = iteratee2(value);
        var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol2(value), valIsUndefined = value === undefined$1;
        while (low < high) {
          var mid = nativeFloor((low + high) / 2), computed = iteratee2(array2[mid]), othIsDefined = computed !== undefined$1, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol2(computed);
          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value : computed < value;
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }
      function baseSortedUniq(array2, iteratee2) {
        var index = -1, length2 = array2.length, resIndex = 0, result2 = [];
        while (++index < length2) {
          var value = array2[index], computed = iteratee2 ? iteratee2(value) : value;
          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result2[resIndex++] = value === 0 ? 0 : value;
          }
        }
        return result2;
      }
      function baseToNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol2(value)) {
          return NAN;
        }
        return +value;
      }
      function baseToString2(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray2(value)) {
          return arrayMap2(value, baseToString2) + "";
        }
        if (isSymbol2(value)) {
          return symbolToString2 ? symbolToString2.call(value) : "";
        }
        var result2 = value + "";
        return result2 == "0" && 1 / value == -INFINITY2 ? "-0" : result2;
      }
      function baseUniq(array2, iteratee2, comparator) {
        var index = -1, includes2 = arrayIncludes, length2 = array2.length, isCommon = true, result2 = [], seen = result2;
        if (comparator) {
          isCommon = false;
          includes2 = arrayIncludesWith;
        } else if (length2 >= LARGE_ARRAY_SIZE) {
          var set2 = iteratee2 ? null : createSet(array2);
          if (set2) {
            return setToArray(set2);
          }
          isCommon = false;
          includes2 = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee2 ? [] : result2;
        }
        outer:
          while (++index < length2) {
            var value = array2[index], computed = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee2) {
                seen.push(computed);
              }
              result2.push(value);
            } else if (!includes2(seen, computed, comparator)) {
              if (seen !== result2) {
                seen.push(computed);
              }
              result2.push(value);
            }
          }
        return result2;
      }
      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }
      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }
      function baseWhile(array2, predicate, isDrop, fromRight) {
        var length2 = array2.length, index = fromRight ? length2 : -1;
        while ((fromRight ? index-- : ++index < length2) && predicate(array2[index], index, array2)) {
        }
        return isDrop ? baseSlice2(array2, fromRight ? 0 : index, fromRight ? index + 1 : length2) : baseSlice2(array2, fromRight ? index + 1 : 0, fromRight ? length2 : index);
      }
      function baseWrapperValue(value, actions) {
        var result2 = value;
        if (result2 instanceof LazyWrapper) {
          result2 = result2.value();
        }
        return arrayReduce2(actions, function(result3, action) {
          return action.func.apply(action.thisArg, arrayPush([result3], action.args));
        }, result2);
      }
      function baseXor(arrays, iteratee2, comparator) {
        var length2 = arrays.length;
        if (length2 < 2) {
          return length2 ? baseUniq(arrays[0]) : [];
        }
        var index = -1, result2 = Array2(length2);
        while (++index < length2) {
          var array2 = arrays[index], othIndex = -1;
          while (++othIndex < length2) {
            if (othIndex != index) {
              result2[index] = baseDifference(result2[index] || array2, arrays[othIndex], iteratee2, comparator);
            }
          }
        }
        return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
      }
      function baseZipObject(props, values2, assignFunc) {
        var index = -1, length2 = props.length, valsLength = values2.length, result2 = {};
        while (++index < length2) {
          var value = index < valsLength ? values2[index] : undefined$1;
          assignFunc(result2, props[index], value);
        }
        return result2;
      }
      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }
      function castFunction2(value) {
        return typeof value == "function" ? value : identity2;
      }
      function castPath(value, object) {
        if (isArray2(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString2(value));
      }
      var castRest = baseRest;
      function castSlice2(array2, start, end) {
        var length2 = array2.length;
        end = end === undefined$1 ? length2 : end;
        return !start && end >= length2 ? array2 : baseSlice2(array2, start, end);
      }
      var clearTimeout2 = ctxClearTimeout || function(id) {
        return root2.clearTimeout(id);
      };
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length2 = buffer.length, result2 = allocUnsafe ? allocUnsafe(length2) : new buffer.constructor(length2);
        buffer.copy(result2);
        return result2;
      }
      function cloneArrayBuffer(arrayBuffer) {
        var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result2).set(new Uint8Array(arrayBuffer));
        return result2;
      }
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }
      function cloneRegExp(regexp) {
        var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result2.lastIndex = regexp.lastIndex;
        return result2;
      }
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
      }
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined$1, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol2(value);
          var othIsDefined = other !== undefined$1, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol2(other);
          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }
          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }
      function compareMultiple(object, other, orders) {
        var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length2 = objCriteria.length, ordersLength = orders.length;
        while (++index < length2) {
          var result2 = compareAscending(objCriteria[index], othCriteria[index]);
          if (result2) {
            if (index >= ordersLength) {
              return result2;
            }
            var order = orders[index];
            return result2 * (order == "desc" ? -1 : 1);
          }
        }
        return object.index - other.index;
      }
      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
        while (++leftIndex < leftLength) {
          result2[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result2[holders[argsIndex]] = args[argsIndex];
          }
        }
        while (rangeLength--) {
          result2[leftIndex++] = args[argsIndex++];
        }
        return result2;
      }
      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
        while (++argsIndex < rangeLength) {
          result2[argsIndex] = args[argsIndex];
        }
        var offset = argsIndex;
        while (++rightIndex < rightLength) {
          result2[offset + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result2[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }
        return result2;
      }
      function copyArray(source, array2) {
        var index = -1, length2 = source.length;
        array2 || (array2 = Array2(length2));
        while (++index < length2) {
          array2[index] = source[index];
        }
        return array2;
      }
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length2 = props.length;
        while (++index < length2) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined$1;
          if (newValue === undefined$1) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }
      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }
      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }
      function createAggregator(setter, initializer) {
        return function(collection, iteratee2) {
          var func = isArray2(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
        };
      }
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1, length2 = sources.length, customizer = length2 > 1 ? sources[length2 - 1] : undefined$1, guard = length2 > 2 ? sources[2] : undefined$1;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length2--, customizer) : undefined$1;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length2 < 3 ? undefined$1 : customizer;
            length2 = 1;
          }
          object = Object2(object);
          while (++index < length2) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }
      function createBaseEach2(eachFunc, fromRight) {
        return function(collection, iteratee2) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike2(collection)) {
            return eachFunc(collection, iteratee2);
          }
          var length2 = collection.length, index = fromRight ? length2 : -1, iterable = Object2(collection);
          while (fromRight ? index-- : ++index < length2) {
            if (iteratee2(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      function createBaseFor2(fromRight) {
        return function(object, iteratee2, keysFunc) {
          var index = -1, iterable = Object2(object), props = keysFunc(object), length2 = props.length;
          while (length2--) {
            var key = props[fromRight ? length2 : ++index];
            if (iteratee2(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
          var fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }
        return wrapper;
      }
      function createCaseFirst2(methodName) {
        return function(string) {
          string = toString2(string);
          var strSymbols = hasUnicode2(string) ? stringToArray2(string) : undefined$1;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice2(strSymbols, 1).join("") : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }
      function createCompounder2(callback) {
        return function(string) {
          return arrayReduce2(words2(deburr2(string).replace(reApos2, "")), callback, "");
        };
      }
      function createCtor(Ctor) {
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0:
              return new Ctor();
            case 1:
              return new Ctor(args[0]);
            case 2:
              return new Ctor(args[0], args[1]);
            case 3:
              return new Ctor(args[0], args[1], args[2]);
            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);
            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
          return isObject2(result2) ? result2 : thisBinding;
        };
      }
      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);
        function wrapper() {
          var length2 = arguments.length, args = Array2(length2), index = length2, placeholder = getHolder(wrapper);
          while (index--) {
            args[index] = arguments[index];
          }
          var holders = length2 < 3 && args[0] !== placeholder && args[length2 - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
          length2 -= holders.length;
          if (length2 < arity) {
            return createRecurry(
              func,
              bitmask,
              createHybrid,
              wrapper.placeholder,
              undefined$1,
              args,
              holders,
              undefined$1,
              undefined$1,
              arity - length2
            );
          }
          var fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
          return apply(fn, this, args);
        }
        return wrapper;
      }
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object2(collection);
          if (!isArrayLike2(collection)) {
            var iteratee2 = getIteratee(predicate, 3);
            collection = keys2(collection);
            predicate = function(key) {
              return iteratee2(iterable[key], key, iterable);
            };
          }
          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined$1;
        };
      }
      function createFlow(fromRight) {
        return flatRest(function(funcs) {
          var length2 = funcs.length, index = length2, prereq = LodashWrapper.prototype.thru;
          if (fromRight) {
            funcs.reverse();
          }
          while (index--) {
            var func = funcs[index];
            if (typeof func != "function") {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (prereq && !wrapper && getFuncName(func) == "wrapper") {
              var wrapper = new LodashWrapper([], true);
            }
          }
          index = wrapper ? index : length2;
          while (++index < length2) {
            func = funcs[index];
            var funcName = getFuncName(func), data2 = funcName == "wrapper" ? getData(func) : undefined$1;
            if (data2 && isLaziable(data2[0]) && data2[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data2[4].length && data2[9] == 1) {
              wrapper = wrapper[getFuncName(data2[0])].apply(wrapper, data2[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }
          return function() {
            var args = arguments, value = args[0];
            if (wrapper && args.length == 1 && isArray2(value)) {
              return wrapper.plant(value).value();
            }
            var index2 = 0, result2 = length2 ? funcs[index2].apply(this, args) : value;
            while (++index2 < length2) {
              result2 = funcs[index2].call(this, result2);
            }
            return result2;
          };
        });
      }
      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined$1 : createCtor(func);
        function wrapper() {
          var length2 = arguments.length, args = Array2(length2), index = length2;
          while (index--) {
            args[index] = arguments[index];
          }
          if (isCurried) {
            var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
          }
          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }
          length2 -= holdersCount;
          if (isCurried && length2 < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(
              func,
              bitmask,
              createHybrid,
              wrapper.placeholder,
              thisArg,
              args,
              newHolders,
              argPos,
              ary2,
              arity - length2
            );
          }
          var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
          length2 = args.length;
          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length2 > 1) {
            args.reverse();
          }
          if (isAry && ary2 < length2) {
            args.length = ary2;
          }
          if (this && this !== root2 && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }
          return fn.apply(thisBinding, args);
        }
        return wrapper;
      }
      function createInverter(setter, toIteratee) {
        return function(object, iteratee2) {
          return baseInverter(object, setter, toIteratee(iteratee2), {});
        };
      }
      function createMathOperation(operator, defaultValue) {
        return function(value, other) {
          var result2;
          if (value === undefined$1 && other === undefined$1) {
            return defaultValue;
          }
          if (value !== undefined$1) {
            result2 = value;
          }
          if (other !== undefined$1) {
            if (result2 === undefined$1) {
              return other;
            }
            if (typeof value == "string" || typeof other == "string") {
              value = baseToString2(value);
              other = baseToString2(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }
            result2 = operator(value, other);
          }
          return result2;
        };
      }
      function createOver(arrayFunc) {
        return flatRest(function(iteratees) {
          iteratees = arrayMap2(iteratees, baseUnary2(getIteratee()));
          return baseRest(function(args) {
            var thisArg = this;
            return arrayFunc(iteratees, function(iteratee2) {
              return apply(iteratee2, thisArg, args);
            });
          });
        });
      }
      function createPadding(length2, chars) {
        chars = chars === undefined$1 ? " " : baseToString2(chars);
        var charsLength = chars.length;
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length2) : chars;
        }
        var result2 = baseRepeat(chars, nativeCeil(length2 / stringSize(chars)));
        return hasUnicode2(chars) ? castSlice2(stringToArray2(result2), 0, length2).join("") : result2.slice(0, length2);
      }
      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
          var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }
          return apply(fn, isBind ? thisArg : this, args);
        }
        return wrapper;
      }
      function createRange(fromRight) {
        return function(start, end, step) {
          if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
            end = step = undefined$1;
          }
          start = toFinite(start);
          if (end === undefined$1) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === undefined$1 ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }
      function createRelationalOperation(operator) {
        return function(value, other) {
          if (!(typeof value == "string" && typeof other == "string")) {
            value = toNumber(value);
            other = toNumber(other);
          }
          return operator(value, other);
        };
      }
      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined$1, newHoldersRight = isCurry ? undefined$1 : holders, newPartials = isCurry ? partials : undefined$1, newPartialsRight = isCurry ? undefined$1 : partials;
        bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }
        var newData = [
          func,
          bitmask,
          thisArg,
          newPartials,
          newHolders,
          newPartialsRight,
          newHoldersRight,
          argPos,
          ary2,
          arity
        ];
        var result2 = wrapFunc.apply(undefined$1, newData);
        if (isLaziable(func)) {
          setData(result2, newData);
        }
        result2.placeholder = placeholder;
        return setWrapToString(result2, func, bitmask);
      }
      function createRound(methodName) {
        var func = Math2[methodName];
        return function(number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
          if (precision && nativeIsFinite(number)) {
            var pair = (toString2(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
            pair = (toString2(value) + "e").split("e");
            return +(pair[0] + "e" + (+pair[1] - precision));
          }
          return func(number);
        };
      }
      var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY2) ? noop2 : function(values2) {
        return new Set2(values2);
      };
      function createToPairs(keysFunc) {
        return function(object) {
          var tag = getTag(object);
          if (tag == mapTag2) {
            return mapToArray(object);
          }
          if (tag == setTag2) {
            return setToPairs(object);
          }
          return baseToPairs(object, keysFunc(object));
        };
      }
      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
        if (!isBindKey && typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var length2 = partials ? partials.length : 0;
        if (!length2) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined$1;
        }
        ary2 = ary2 === undefined$1 ? ary2 : nativeMax(toInteger(ary2), 0);
        arity = arity === undefined$1 ? arity : toInteger(arity);
        length2 -= holders ? holders.length : 0;
        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials, holdersRight = holders;
          partials = holders = undefined$1;
        }
        var data2 = isBindKey ? undefined$1 : getData(func);
        var newData = [
          func,
          bitmask,
          thisArg,
          partials,
          holders,
          partialsRight,
          holdersRight,
          argPos,
          ary2,
          arity
        ];
        if (data2) {
          mergeData(newData, data2);
        }
        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined$1 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length2, 0);
        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }
        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result2 = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result2 = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result2 = createPartial(func, bitmask, thisArg, partials);
        } else {
          result2 = createHybrid.apply(undefined$1, newData);
        }
        var setter = data2 ? baseSetData : setData;
        return setWrapToString(setter(result2, newData), func, bitmask);
      }
      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined$1 || eq(objValue, objectProto2[key]) && !hasOwnProperty2.call(object, key)) {
          return srcValue;
        }
        return objValue;
      }
      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject2(objValue) && isObject2(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
          stack["delete"](srcValue);
        }
        return objValue;
      }
      function customOmitClone(value) {
        return isPlainObject(value) ? undefined$1 : value;
      }
      function equalArrays(array2, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array2.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array2);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array2;
        }
        var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined$1;
        stack.set(array2, other);
        stack.set(other, array2);
        while (++index < arrLength) {
          var arrValue = array2[index], othValue = other[index];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array2, stack) : customizer(arrValue, othValue, index, array2, other, stack);
          }
          if (compared !== undefined$1) {
            if (compared) {
              continue;
            }
            result2 = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result2 = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result2 = false;
            break;
          }
        }
        stack["delete"](array2);
        stack["delete"](other);
        return result2;
      }
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag2:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag2:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }
            return true;
          case boolTag2:
          case dateTag2:
          case numberTag2:
            return eq(+object, +other);
          case errorTag2:
            return object.name == other.name && object.message == other.message;
          case regexpTag2:
          case stringTag2:
            return object == other + "";
          case mapTag2:
            var convert = mapToArray;
          case setTag2:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result2;
          case symbolTag2:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result2 = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === undefined$1 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result2 = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result2 && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result2 = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result2;
      }
      function flatRest(func) {
        return setToString(overRest(func, undefined$1, flatten), func + "");
      }
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys2, getSymbols);
      }
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }
      var getData = !metaMap ? noop2 : function(func) {
        return metaMap.get(func);
      };
      function getFuncName(func) {
        var result2 = func.name + "", array2 = realNames[result2], length2 = hasOwnProperty2.call(realNames, result2) ? array2.length : 0;
        while (length2--) {
          var data2 = array2[length2], otherFunc = data2.func;
          if (otherFunc == null || otherFunc == func) {
            return data2.name;
          }
        }
        return result2;
      }
      function getHolder(func) {
        var object = hasOwnProperty2.call(lodash2, "placeholder") ? lodash2 : func;
        return object.placeholder;
      }
      function getIteratee() {
        var result2 = lodash2.iteratee || iteratee;
        result2 = result2 === iteratee ? baseIteratee : result2;
        return arguments.length ? result2(arguments[0], arguments[1]) : result2;
      }
      function getMapData(map3, key) {
        var data2 = map3.__data__;
        return isKeyable(key) ? data2[typeof key == "string" ? "string" : "hash"] : data2.map;
      }
      function getMatchData(object) {
        var result2 = keys2(object), length2 = result2.length;
        while (length2--) {
          var key = result2[length2], value = object[key];
          result2[length2] = [key, value, isStrictComparable(value)];
        }
        return result2;
      }
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined$1;
      }
      function getRawTag2(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag2), tag = value[symToStringTag2];
        try {
          value[symToStringTag2] = undefined$1;
          var unmasked = true;
        } catch (e) {
        }
        var result2 = nativeObjectToString2.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag2] = tag;
          } else {
            delete value[symToStringTag2];
          }
        }
        return result2;
      }
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object2(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable2.call(object, symbol);
        });
      };
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
        var result2 = [];
        while (object) {
          arrayPush(result2, getSymbols(object));
          object = getPrototype(object);
        }
        return result2;
      };
      var getTag = baseGetTag2;
      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag2 || Map && getTag(new Map()) != mapTag2 || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag2 || WeakMap && getTag(new WeakMap()) != weakMapTag2) {
        getTag = function(value) {
          var result2 = baseGetTag2(value), Ctor = result2 == objectTag2 ? value.constructor : undefined$1, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag2;
              case mapCtorString:
                return mapTag2;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag2;
              case weakMapCtorString:
                return weakMapTag2;
            }
          }
          return result2;
        };
      }
      function getView(start, end, transforms2) {
        var index = -1, length2 = transforms2.length;
        while (++index < length2) {
          var data2 = transforms2[index], size3 = data2.size;
          switch (data2.type) {
            case "drop":
              start += size3;
              break;
            case "dropRight":
              end -= size3;
              break;
            case "take":
              end = nativeMin(end, start + size3);
              break;
            case "takeRight":
              start = nativeMax(start, end - size3);
              break;
          }
        }
        return { "start": start, "end": end };
      }
      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }
      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);
        var index = -1, length2 = path.length, result2 = false;
        while (++index < length2) {
          var key = toKey(path[index]);
          if (!(result2 = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result2 || ++index != length2) {
          return result2;
        }
        length2 = object == null ? 0 : object.length;
        return !!length2 && isLength2(length2) && isIndex2(key, length2) && (isArray2(object) || isArguments2(object));
      }
      function initCloneArray(array2) {
        var length2 = array2.length, result2 = new array2.constructor(length2);
        if (length2 && typeof array2[0] == "string" && hasOwnProperty2.call(array2, "index")) {
          result2.index = array2.index;
          result2.input = array2.input;
        }
        return result2;
      }
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype2(object) ? baseCreate(getPrototype(object)) : {};
      }
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag2:
            return cloneArrayBuffer(object);
          case boolTag2:
          case dateTag2:
            return new Ctor(+object);
          case dataViewTag2:
            return cloneDataView(object, isDeep);
          case float32Tag2:
          case float64Tag2:
          case int8Tag2:
          case int16Tag2:
          case int32Tag2:
          case uint8Tag2:
          case uint8ClampedTag2:
          case uint16Tag2:
          case uint32Tag2:
            return cloneTypedArray(object, isDeep);
          case mapTag2:
            return new Ctor();
          case numberTag2:
          case stringTag2:
            return new Ctor(object);
          case regexpTag2:
            return cloneRegExp(object);
          case setTag2:
            return new Ctor();
          case symbolTag2:
            return cloneSymbol(object);
        }
      }
      function insertWrapDetails(source, details) {
        var length2 = details.length;
        if (!length2) {
          return source;
        }
        var lastIndex = length2 - 1;
        details[lastIndex] = (length2 > 1 ? "& " : "") + details[lastIndex];
        details = details.join(length2 > 2 ? ", " : " ");
        return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
      }
      function isFlattenable(value) {
        return isArray2(value) || isArguments2(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }
      function isIndex2(value, length2) {
        var type = typeof value;
        length2 = length2 == null ? MAX_SAFE_INTEGER2 : length2;
        return !!length2 && (type == "number" || type != "symbol" && reIsUint2.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
      }
      function isIterateeCall(value, index, object) {
        if (!isObject2(object)) {
          return false;
        }
        var type = typeof index;
        if (type == "number" ? isArrayLike2(object) && isIndex2(index, object.length) : type == "string" && index in object) {
          return eq(object[index], value);
        }
        return false;
      }
      function isKey(value, object) {
        if (isArray2(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol2(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isLaziable(func) {
        var funcName = getFuncName(func), other = lodash2[funcName];
        if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
          return false;
        }
        if (func === other) {
          return true;
        }
        var data2 = getData(other);
        return !!data2 && func === data2[0];
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      var isMaskable = coreJsData ? isFunction2 : stubFalse2;
      function isPrototype2(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto2;
        return value === proto;
      }
      function isStrictComparable(value) {
        return value === value && !isObject2(value);
      }
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== undefined$1 || key in Object2(object));
        };
      }
      function memoizeCapped(func) {
        var result2 = memoize(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });
        var cache = result2.cache;
        return result2;
      }
      function mergeData(data2, source) {
        var bitmask = data2[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
        var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data2[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
        if (!(isCommon || isCombo)) {
          return data2;
        }
        if (srcBitmask & WRAP_BIND_FLAG) {
          data2[2] = source[2];
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }
        var value = source[3];
        if (value) {
          var partials = data2[3];
          data2[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data2[4] = partials ? replaceHolders(data2[3], PLACEHOLDER) : source[4];
        }
        value = source[5];
        if (value) {
          partials = data2[5];
          data2[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data2[6] = partials ? replaceHolders(data2[5], PLACEHOLDER) : source[6];
        }
        value = source[7];
        if (value) {
          data2[7] = value;
        }
        if (srcBitmask & WRAP_ARY_FLAG) {
          data2[8] = data2[8] == null ? source[8] : nativeMin(data2[8], source[8]);
        }
        if (data2[9] == null) {
          data2[9] = source[9];
        }
        data2[0] = source[0];
        data2[1] = newBitmask;
        return data2;
      }
      function nativeKeysIn(object) {
        var result2 = [];
        if (object != null) {
          for (var key in Object2(object)) {
            result2.push(key);
          }
        }
        return result2;
      }
      function objectToString2(value) {
        return nativeObjectToString2.call(value);
      }
      function overRest(func, start, transform3) {
        start = nativeMax(start === undefined$1 ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index = -1, length2 = nativeMax(args.length - start, 0), array2 = Array2(length2);
          while (++index < length2) {
            array2[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array2(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform3(array2);
          return apply(func, this, otherArgs);
        };
      }
      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice2(path, 0, -1));
      }
      function reorder(array2, indexes) {
        var arrLength = array2.length, length2 = nativeMin(indexes.length, arrLength), oldArray = copyArray(array2);
        while (length2--) {
          var index = indexes[length2];
          array2[length2] = isIndex2(index, arrLength) ? oldArray[index] : undefined$1;
        }
        return array2;
      }
      function safeGet(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      var setData = shortOut(baseSetData);
      var setTimeout2 = ctxSetTimeout || function(func, wait) {
        return root2.setTimeout(func, wait);
      };
      var setToString = shortOut(baseSetToString);
      function setWrapToString(wrapper, reference2, bitmask) {
        var source = reference2 + "";
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }
      function shortOut(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined$1, arguments);
        };
      }
      function shuffleSelf(array2, size3) {
        var index = -1, length2 = array2.length, lastIndex = length2 - 1;
        size3 = size3 === undefined$1 ? length2 : size3;
        while (++index < size3) {
          var rand = baseRandom(index, lastIndex), value = array2[rand];
          array2[rand] = array2[index];
          array2[index] = value;
        }
        array2.length = size3;
        return array2;
      }
      var stringToPath = memoizeCapped(function(string) {
        var result2 = [];
        if (string.charCodeAt(0) === 46) {
          result2.push("");
        }
        string.replace(rePropName, function(match, number, quote, subString) {
          result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
        });
        return result2;
      });
      function toKey(value) {
        if (typeof value == "string" || isSymbol2(value)) {
          return value;
        }
        var result2 = value + "";
        return result2 == "0" && 1 / value == -INFINITY2 ? "-0" : result2;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function updateWrapDetails(details, bitmask) {
        arrayEach2(wrapFlags, function(pair) {
          var value = "_." + pair[0];
          if (bitmask & pair[1] && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }
      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }
        var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result2.__actions__ = copyArray(wrapper.__actions__);
        result2.__index__ = wrapper.__index__;
        result2.__values__ = wrapper.__values__;
        return result2;
      }
      function chunk(array2, size3, guard) {
        if (guard ? isIterateeCall(array2, size3, guard) : size3 === undefined$1) {
          size3 = 1;
        } else {
          size3 = nativeMax(toInteger(size3), 0);
        }
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2 || size3 < 1) {
          return [];
        }
        var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length2 / size3));
        while (index < length2) {
          result2[resIndex++] = baseSlice2(array2, index, index += size3);
        }
        return result2;
      }
      function compact(array2) {
        var index = -1, length2 = array2 == null ? 0 : array2.length, resIndex = 0, result2 = [];
        while (++index < length2) {
          var value = array2[index];
          if (value) {
            result2[resIndex++] = value;
          }
        }
        return result2;
      }
      function concat() {
        var length2 = arguments.length;
        if (!length2) {
          return [];
        }
        var args = Array2(length2 - 1), array2 = arguments[0], index = length2;
        while (index--) {
          args[index - 1] = arguments[index];
        }
        return arrayPush(isArray2(array2) ? copyArray(array2) : [array2], baseFlatten(args, 1));
      }
      var difference2 = baseRest(function(array2, values2) {
        return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = baseRest(function(array2, values2) {
        var iteratee2 = last(values2);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined$1;
        }
        return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
      });
      var differenceWith = baseRest(function(array2, values2) {
        var comparator = last(values2);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined$1;
        }
        return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true), undefined$1, comparator) : [];
      });
      function drop(array2, n, guard) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return [];
        }
        n = guard || n === undefined$1 ? 1 : toInteger(n);
        return baseSlice2(array2, n < 0 ? 0 : n, length2);
      }
      function dropRight(array2, n, guard) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return [];
        }
        n = guard || n === undefined$1 ? 1 : toInteger(n);
        n = length2 - n;
        return baseSlice2(array2, 0, n < 0 ? 0 : n);
      }
      function dropRightWhile(array2, predicate) {
        return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), true, true) : [];
      }
      function dropWhile(array2, predicate) {
        return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), true) : [];
      }
      function fill(array2, value, start, end) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return [];
        }
        if (start && typeof start != "number" && isIterateeCall(array2, value, start)) {
          start = 0;
          end = length2;
        }
        return baseFill(array2, value, start, end);
      }
      function findIndex(array2, predicate, fromIndex) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length2 + index, 0);
        }
        return baseFindIndex(array2, getIteratee(predicate, 3), index);
      }
      function findLastIndex(array2, predicate, fromIndex) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return -1;
        }
        var index = length2 - 1;
        if (fromIndex !== undefined$1) {
          index = toInteger(fromIndex);
          index = fromIndex < 0 ? nativeMax(length2 + index, 0) : nativeMin(index, length2 - 1);
        }
        return baseFindIndex(array2, getIteratee(predicate, 3), index, true);
      }
      function flatten(array2) {
        var length2 = array2 == null ? 0 : array2.length;
        return length2 ? baseFlatten(array2, 1) : [];
      }
      function flattenDeep(array2) {
        var length2 = array2 == null ? 0 : array2.length;
        return length2 ? baseFlatten(array2, INFINITY2) : [];
      }
      function flattenDepth(array2, depth) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return [];
        }
        depth = depth === undefined$1 ? 1 : toInteger(depth);
        return baseFlatten(array2, depth);
      }
      function fromPairs(pairs) {
        var index = -1, length2 = pairs == null ? 0 : pairs.length, result2 = {};
        while (++index < length2) {
          var pair = pairs[index];
          result2[pair[0]] = pair[1];
        }
        return result2;
      }
      function head(array2) {
        return array2 && array2.length ? array2[0] : undefined$1;
      }
      function indexOf(array2, value, fromIndex) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length2 + index, 0);
        }
        return baseIndexOf(array2, value, index);
      }
      function initial(array2) {
        var length2 = array2 == null ? 0 : array2.length;
        return length2 ? baseSlice2(array2, 0, -1) : [];
      }
      var intersection = baseRest(function(arrays) {
        var mapped = arrayMap2(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays), mapped = arrayMap2(arrays, castArrayLikeObject);
        if (iteratee2 === last(mapped)) {
          iteratee2 = undefined$1;
        } else {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
      });
      var intersectionWith = baseRest(function(arrays) {
        var comparator = last(arrays), mapped = arrayMap2(arrays, castArrayLikeObject);
        comparator = typeof comparator == "function" ? comparator : undefined$1;
        if (comparator) {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined$1, comparator) : [];
      });
      function join(array2, separator) {
        return array2 == null ? "" : nativeJoin.call(array2, separator);
      }
      function last(array2) {
        var length2 = array2 == null ? 0 : array2.length;
        return length2 ? array2[length2 - 1] : undefined$1;
      }
      function lastIndexOf(array2, value, fromIndex) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return -1;
        }
        var index = length2;
        if (fromIndex !== undefined$1) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length2 + index, 0) : nativeMin(index, length2 - 1);
        }
        return value === value ? strictLastIndexOf(array2, value, index) : baseFindIndex(array2, baseIsNaN, index, true);
      }
      function nth(array2, n) {
        return array2 && array2.length ? baseNth(array2, toInteger(n)) : undefined$1;
      }
      var pull = baseRest(pullAll);
      function pullAll(array2, values2) {
        return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2) : array2;
      }
      function pullAllBy(array2, values2, iteratee2) {
        return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2, getIteratee(iteratee2, 2)) : array2;
      }
      function pullAllWith(array2, values2, comparator) {
        return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2, undefined$1, comparator) : array2;
      }
      var pullAt = flatRest(function(array2, indexes) {
        var length2 = array2 == null ? 0 : array2.length, result2 = baseAt(array2, indexes);
        basePullAt(array2, arrayMap2(indexes, function(index) {
          return isIndex2(index, length2) ? +index : index;
        }).sort(compareAscending));
        return result2;
      });
      function remove(array2, predicate) {
        var result2 = [];
        if (!(array2 && array2.length)) {
          return result2;
        }
        var index = -1, indexes = [], length2 = array2.length;
        predicate = getIteratee(predicate, 3);
        while (++index < length2) {
          var value = array2[index];
          if (predicate(value, index, array2)) {
            result2.push(value);
            indexes.push(index);
          }
        }
        basePullAt(array2, indexes);
        return result2;
      }
      function reverse(array2) {
        return array2 == null ? array2 : nativeReverse.call(array2);
      }
      function slice(array2, start, end) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return [];
        }
        if (end && typeof end != "number" && isIterateeCall(array2, start, end)) {
          start = 0;
          end = length2;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined$1 ? length2 : toInteger(end);
        }
        return baseSlice2(array2, start, end);
      }
      function sortedIndex(array2, value) {
        return baseSortedIndex(array2, value);
      }
      function sortedIndexBy(array2, value, iteratee2) {
        return baseSortedIndexBy(array2, value, getIteratee(iteratee2, 2));
      }
      function sortedIndexOf(array2, value) {
        var length2 = array2 == null ? 0 : array2.length;
        if (length2) {
          var index = baseSortedIndex(array2, value);
          if (index < length2 && eq(array2[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function sortedLastIndex(array2, value) {
        return baseSortedIndex(array2, value, true);
      }
      function sortedLastIndexBy(array2, value, iteratee2) {
        return baseSortedIndexBy(array2, value, getIteratee(iteratee2, 2), true);
      }
      function sortedLastIndexOf(array2, value) {
        var length2 = array2 == null ? 0 : array2.length;
        if (length2) {
          var index = baseSortedIndex(array2, value, true) - 1;
          if (eq(array2[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function sortedUniq(array2) {
        return array2 && array2.length ? baseSortedUniq(array2) : [];
      }
      function sortedUniqBy(array2, iteratee2) {
        return array2 && array2.length ? baseSortedUniq(array2, getIteratee(iteratee2, 2)) : [];
      }
      function tail(array2) {
        var length2 = array2 == null ? 0 : array2.length;
        return length2 ? baseSlice2(array2, 1, length2) : [];
      }
      function take(array2, n, guard) {
        if (!(array2 && array2.length)) {
          return [];
        }
        n = guard || n === undefined$1 ? 1 : toInteger(n);
        return baseSlice2(array2, 0, n < 0 ? 0 : n);
      }
      function takeRight(array2, n, guard) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return [];
        }
        n = guard || n === undefined$1 ? 1 : toInteger(n);
        n = length2 - n;
        return baseSlice2(array2, n < 0 ? 0 : n, length2);
      }
      function takeRightWhile(array2, predicate) {
        return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), false, true) : [];
      }
      function takeWhile(array2, predicate) {
        return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3)) : [];
      }
      var union = baseRest(function(arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined$1;
        }
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
      });
      var unionWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == "function" ? comparator : undefined$1;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
      });
      function uniq(array2) {
        return array2 && array2.length ? baseUniq(array2) : [];
      }
      function uniqBy(array2, iteratee2) {
        return array2 && array2.length ? baseUniq(array2, getIteratee(iteratee2, 2)) : [];
      }
      function uniqWith(array2, comparator) {
        comparator = typeof comparator == "function" ? comparator : undefined$1;
        return array2 && array2.length ? baseUniq(array2, undefined$1, comparator) : [];
      }
      function unzip(array2) {
        if (!(array2 && array2.length)) {
          return [];
        }
        var length2 = 0;
        array2 = arrayFilter(array2, function(group) {
          if (isArrayLikeObject(group)) {
            length2 = nativeMax(group.length, length2);
            return true;
          }
        });
        return baseTimes2(length2, function(index) {
          return arrayMap2(array2, baseProperty(index));
        });
      }
      function unzipWith(array2, iteratee2) {
        if (!(array2 && array2.length)) {
          return [];
        }
        var result2 = unzip(array2);
        if (iteratee2 == null) {
          return result2;
        }
        return arrayMap2(result2, function(group) {
          return apply(iteratee2, undefined$1, group);
        });
      }
      var without = baseRest(function(array2, values2) {
        return isArrayLikeObject(array2) ? baseDifference(array2, values2) : [];
      });
      var xor = baseRest(function(arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
      var xorBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined$1;
        }
        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
      });
      var xorWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == "function" ? comparator : undefined$1;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
      });
      var zip = baseRest(unzip);
      function zipObject(props, values2) {
        return baseZipObject(props || [], values2 || [], assignValue);
      }
      function zipObjectDeep(props, values2) {
        return baseZipObject(props || [], values2 || [], baseSet);
      }
      var zipWith = baseRest(function(arrays) {
        var length2 = arrays.length, iteratee2 = length2 > 1 ? arrays[length2 - 1] : undefined$1;
        iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined$1;
        return unzipWith(arrays, iteratee2);
      });
      function chain(value) {
        var result2 = lodash2(value);
        result2.__chain__ = true;
        return result2;
      }
      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }
      function thru(value, interceptor) {
        return interceptor(value);
      }
      var wrapperAt = flatRest(function(paths) {
        var length2 = paths.length, start = length2 ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
          return baseAt(object, paths);
        };
        if (length2 > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex2(start)) {
          return this.thru(interceptor);
        }
        value = value.slice(start, +start + (length2 ? 1 : 0));
        value.__actions__.push({
          "func": thru,
          "args": [interceptor],
          "thisArg": undefined$1
        });
        return new LodashWrapper(value, this.__chain__).thru(function(array2) {
          if (length2 && !array2.length) {
            array2.push(undefined$1);
          }
          return array2;
        });
      });
      function wrapperChain() {
        return chain(this);
      }
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }
      function wrapperNext() {
        if (this.__values__ === undefined$1) {
          this.__values__ = toArray(this.value());
        }
        var done = this.__index__ >= this.__values__.length, value = done ? undefined$1 : this.__values__[this.__index__++];
        return { "done": done, "value": value };
      }
      function wrapperToIterator() {
        return this;
      }
      function wrapperPlant(value) {
        var result2, parent2 = this;
        while (parent2 instanceof baseLodash) {
          var clone2 = wrapperClone(parent2);
          clone2.__index__ = 0;
          clone2.__values__ = undefined$1;
          if (result2) {
            previous.__wrapped__ = clone2;
          } else {
            result2 = clone2;
          }
          var previous = clone2;
          parent2 = parent2.__wrapped__;
        }
        previous.__wrapped__ = value;
        return result2;
      }
      function wrapperReverse() {
        var value = this.__wrapped__;
        if (value instanceof LazyWrapper) {
          var wrapped = value;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({
            "func": thru,
            "args": [reverse],
            "thisArg": undefined$1
          });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(reverse);
      }
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }
      var countBy = createAggregator(function(result2, value, key) {
        if (hasOwnProperty2.call(result2, key)) {
          ++result2[key];
        } else {
          baseAssignValue(result2, key, 1);
        }
      });
      function every(collection, predicate, guard) {
        var func = isArray2(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$1;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      function filter2(collection, predicate) {
        var func = isArray2(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }
      var find2 = createFind(findIndex);
      var findLast = createFind(findLastIndex);
      function flatMap(collection, iteratee2) {
        return baseFlatten(map2(collection, iteratee2), 1);
      }
      function flatMapDeep(collection, iteratee2) {
        return baseFlatten(map2(collection, iteratee2), INFINITY2);
      }
      function flatMapDepth(collection, iteratee2, depth) {
        depth = depth === undefined$1 ? 1 : toInteger(depth);
        return baseFlatten(map2(collection, iteratee2), depth);
      }
      function forEach2(collection, iteratee2) {
        var func = isArray2(collection) ? arrayEach2 : baseEach2;
        return func(collection, getIteratee(iteratee2, 3));
      }
      function forEachRight(collection, iteratee2) {
        var func = isArray2(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee2, 3));
      }
      var groupBy = createAggregator(function(result2, value, key) {
        if (hasOwnProperty2.call(result2, key)) {
          result2[key].push(value);
        } else {
          baseAssignValue(result2, key, [value]);
        }
      });
      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike2(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
        var length2 = collection.length;
        if (fromIndex < 0) {
          fromIndex = nativeMax(length2 + fromIndex, 0);
        }
        return isString(collection) ? fromIndex <= length2 && collection.indexOf(value, fromIndex) > -1 : !!length2 && baseIndexOf(collection, value, fromIndex) > -1;
      }
      var invokeMap = baseRest(function(collection, path, args) {
        var index = -1, isFunc = typeof path == "function", result2 = isArrayLike2(collection) ? Array2(collection.length) : [];
        baseEach2(collection, function(value) {
          result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result2;
      });
      var keyBy = createAggregator(function(result2, value, key) {
        baseAssignValue(result2, key, value);
      });
      function map2(collection, iteratee2) {
        var func = isArray2(collection) ? arrayMap2 : baseMap;
        return func(collection, getIteratee(iteratee2, 3));
      }
      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (!isArray2(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        orders = guard ? undefined$1 : orders;
        if (!isArray2(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseOrderBy(collection, iteratees, orders);
      }
      var partition = createAggregator(function(result2, value, key) {
        result2[key ? 0 : 1].push(value);
      }, function() {
        return [[], []];
      });
      function reduce(collection, iteratee2, accumulator) {
        var func = isArray2(collection) ? arrayReduce2 : baseReduce, initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach2);
      }
      function reduceRight(collection, iteratee2, accumulator) {
        var func = isArray2(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
      }
      function reject(collection, predicate) {
        var func = isArray2(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }
      function sample(collection) {
        var func = isArray2(collection) ? arraySample : baseSample;
        return func(collection);
      }
      function sampleSize(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n === undefined$1) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        var func = isArray2(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }
      function shuffle(collection) {
        var func = isArray2(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }
      function size2(collection) {
        if (collection == null) {
          return 0;
        }
        if (isArrayLike2(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }
        var tag = getTag(collection);
        if (tag == mapTag2 || tag == setTag2) {
          return collection.size;
        }
        return baseKeys2(collection).length;
      }
      function some(collection, predicate, guard) {
        var func = isArray2(collection) ? arraySome : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$1;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      var sortBy = baseRest(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length2 = iteratees.length;
        if (length2 > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length2 > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });
      var now = ctxNow || function() {
        return root2.Date.now();
      };
      function after2(n, func) {
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }
      function ary(func, n, guard) {
        n = guard ? undefined$1 : n;
        n = func && n == null ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
      }
      function before2(n, func) {
        var result2;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n > 0) {
            result2 = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = undefined$1;
          }
          return result2;
        };
      }
      var bind = baseRest(function(func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = baseRest(function(object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(key, bitmask, object, partials, holders);
      });
      function curry(func, arity, guard) {
        arity = guard ? undefined$1 : arity;
        var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
        result2.placeholder = curry.placeholder;
        return result2;
      }
      function curryRight(func, arity, guard) {
        arity = guard ? undefined$1 : arity;
        var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
        result2.placeholder = curryRight.placeholder;
        return result2;
      }
      function debounce(func, wait, options) {
        var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject2(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = undefined$1;
          lastInvokeTime = time;
          result2 = func.apply(thisArg, args);
          return result2;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout2(timerExpired, wait);
          return leading ? invokeFunc(time) : result2;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === undefined$1 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout2(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = undefined$1;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined$1;
          return result2;
        }
        function cancel() {
          if (timerId !== undefined$1) {
            clearTimeout2(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined$1;
        }
        function flush() {
          return timerId === undefined$1 ? result2 : trailingEdge(now());
        }
        function debounced() {
          var time = now(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === undefined$1) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout2(timerId);
              timerId = setTimeout2(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined$1) {
            timerId = setTimeout2(timerExpired, wait);
          }
          return result2;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      var defer = baseRest(function(func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = baseRest(function(func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });
      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }
      function memoize(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result2 = func.apply(this, args);
          memoized.cache = cache.set(key, result2) || cache;
          return result2;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      function negate(predicate) {
        if (typeof predicate != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0:
              return !predicate.call(this);
            case 1:
              return !predicate.call(this, args[0]);
            case 2:
              return !predicate.call(this, args[0], args[1]);
            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }
          return !predicate.apply(this, args);
        };
      }
      function once(func) {
        return before2(2, func);
      }
      var overArgs = castRest(function(func, transforms2) {
        transforms2 = transforms2.length == 1 && isArray2(transforms2[0]) ? arrayMap2(transforms2[0], baseUnary2(getIteratee())) : arrayMap2(baseFlatten(transforms2, 1), baseUnary2(getIteratee()));
        var funcsLength = transforms2.length;
        return baseRest(function(args) {
          var index = -1, length2 = nativeMin(args.length, funcsLength);
          while (++index < length2) {
            args[index] = transforms2[index].call(this, args[index]);
          }
          return apply(func, this, args);
        });
      });
      var partial = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
      });
      var partialRight = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
      });
      var rearg = flatRest(function(func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
      });
      function rest(func, start) {
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start === undefined$1 ? start : toInteger(start);
        return baseRest(func, start);
      }
      function spread(func, start) {
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function(args) {
          var array2 = args[start], otherArgs = castSlice2(args, 0, start);
          if (array2) {
            arrayPush(otherArgs, array2);
          }
          return apply(func, this, otherArgs);
        });
      }
      function throttle(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject2(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          "leading": leading,
          "maxWait": wait,
          "trailing": trailing
        });
      }
      function unary(func) {
        return ary(func, 1);
      }
      function wrap(value, wrapper) {
        return partial(castFunction2(wrapper), value);
      }
      function castArray() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray2(value) ? value : [value];
      }
      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }
      function cloneWith(value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }
      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }
      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }
      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys2(source));
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      var gt = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function(value, other) {
        return value >= other;
      });
      var isArguments2 = baseIsArguments2(/* @__PURE__ */ function() {
        return arguments;
      }()) ? baseIsArguments2 : function(value) {
        return isObjectLike2(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable2.call(value, "callee");
      };
      var isArray2 = Array2.isArray;
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary2(nodeIsArrayBuffer) : baseIsArrayBuffer;
      function isArrayLike2(value) {
        return value != null && isLength2(value.length) && !isFunction2(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike2(value) && isArrayLike2(value);
      }
      function isBoolean(value) {
        return value === true || value === false || isObjectLike2(value) && baseGetTag2(value) == boolTag2;
      }
      var isBuffer2 = nativeIsBuffer2 || stubFalse2;
      var isDate = nodeIsDate ? baseUnary2(nodeIsDate) : baseIsDate;
      function isElement(value) {
        return isObjectLike2(value) && value.nodeType === 1 && !isPlainObject(value);
      }
      function isEmpty(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike2(value) && (isArray2(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer2(value) || isTypedArray2(value) || isArguments2(value))) {
          return !value.length;
        }
        var tag = getTag(value);
        if (tag == mapTag2 || tag == setTag2) {
          return !value.size;
        }
        if (isPrototype2(value)) {
          return !baseKeys2(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty2.call(value, key)) {
            return false;
          }
        }
        return true;
      }
      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }
      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        var result2 = customizer ? customizer(value, other) : undefined$1;
        return result2 === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result2;
      }
      function isError(value) {
        if (!isObjectLike2(value)) {
          return false;
        }
        var tag = baseGetTag2(value);
        return tag == errorTag2 || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
      }
      function isFinite2(value) {
        return typeof value == "number" && nativeIsFinite(value);
      }
      function isFunction2(value) {
        if (!isObject2(value)) {
          return false;
        }
        var tag = baseGetTag2(value);
        return tag == funcTag2 || tag == genTag2 || tag == asyncTag2 || tag == proxyTag2;
      }
      function isInteger(value) {
        return typeof value == "number" && value == toInteger(value);
      }
      function isLength2(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
      }
      function isObject2(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      function isObjectLike2(value) {
        return value != null && typeof value == "object";
      }
      var isMap = nodeIsMap ? baseUnary2(nodeIsMap) : baseIsMap;
      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }
      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }
      function isNaN2(value) {
        return isNumber2(value) && value != +value;
      }
      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error2(CORE_ERROR_TEXT);
        }
        return baseIsNative(value);
      }
      function isNull(value) {
        return value === null;
      }
      function isNil(value) {
        return value == null;
      }
      function isNumber2(value) {
        return typeof value == "number" || isObjectLike2(value) && baseGetTag2(value) == numberTag2;
      }
      function isPlainObject(value) {
        if (!isObjectLike2(value) || baseGetTag2(value) != objectTag2) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      var isRegExp = nodeIsRegExp ? baseUnary2(nodeIsRegExp) : baseIsRegExp;
      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER2 && value <= MAX_SAFE_INTEGER2;
      }
      var isSet = nodeIsSet ? baseUnary2(nodeIsSet) : baseIsSet;
      function isString(value) {
        return typeof value == "string" || !isArray2(value) && isObjectLike2(value) && baseGetTag2(value) == stringTag2;
      }
      function isSymbol2(value) {
        return typeof value == "symbol" || isObjectLike2(value) && baseGetTag2(value) == symbolTag2;
      }
      var isTypedArray2 = nodeIsTypedArray2 ? baseUnary2(nodeIsTypedArray2) : baseIsTypedArray2;
      function isUndefined(value) {
        return value === undefined$1;
      }
      function isWeakMap(value) {
        return isObjectLike2(value) && getTag(value) == weakMapTag2;
      }
      function isWeakSet(value) {
        return isObjectLike2(value) && baseGetTag2(value) == weakSetTag;
      }
      var lt = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function(value, other) {
        return value <= other;
      });
      function toArray(value) {
        if (!value) {
          return [];
        }
        if (isArrayLike2(value)) {
          return isString(value) ? stringToArray2(value) : copyArray(value);
        }
        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }
        var tag = getTag(value), func = tag == mapTag2 ? mapToArray : tag == setTag2 ? setToArray : values;
        return func(value);
      }
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY2 || value === -INFINITY2) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }
      function toInteger(value) {
        var result2 = toFinite(value), remainder = result2 % 1;
        return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
      }
      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol2(value)) {
          return NAN;
        }
        if (isObject2(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject2(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      function toSafeInteger(value) {
        return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER2, MAX_SAFE_INTEGER2) : value === 0 ? value : 0;
      }
      function toString2(value) {
        return value == null ? "" : baseToString2(value);
      }
      var assign = createAssigner(function(object, source) {
        if (isPrototype2(source) || isArrayLike2(source)) {
          copyObject(source, keys2(source), object);
          return;
        }
        for (var key in source) {
          if (hasOwnProperty2.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });
      var assignIn = createAssigner(function(object, source) {
        copyObject(source, keysIn(source), object);
      });
      var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });
      var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keys2(source), object, customizer);
      });
      var at = flatRest(baseAt);
      function create2(prototype, properties) {
        var result2 = baseCreate(prototype);
        return properties == null ? result2 : baseAssign(result2, properties);
      }
      var defaults = baseRest(function(object, sources) {
        object = Object2(object);
        var index = -1;
        var length2 = sources.length;
        var guard = length2 > 2 ? sources[2] : undefined$1;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length2 = 1;
        }
        while (++index < length2) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;
          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];
            if (value === undefined$1 || eq(value, objectProto2[key]) && !hasOwnProperty2.call(object, key)) {
              object[key] = source[key];
            }
          }
        }
        return object;
      });
      var defaultsDeep = baseRest(function(args) {
        args.push(undefined$1, customDefaultsMerge);
        return apply(mergeWith, undefined$1, args);
      });
      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn2);
      }
      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }
      function forIn(object, iteratee2) {
        return object == null ? object : baseFor2(object, getIteratee(iteratee2, 3), keysIn);
      }
      function forInRight(object, iteratee2) {
        return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
      }
      function forOwn(object, iteratee2) {
        return object && baseForOwn2(object, getIteratee(iteratee2, 3));
      }
      function forOwnRight(object, iteratee2) {
        return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
      }
      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys2(object));
      }
      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }
      function get(object, path, defaultValue) {
        var result2 = object == null ? undefined$1 : baseGet(object, path);
        return result2 === undefined$1 ? defaultValue : result2;
      }
      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }
      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }
      var invert = createInverter(function(result2, value, key) {
        if (value != null && typeof value.toString != "function") {
          value = nativeObjectToString2.call(value);
        }
        result2[value] = key;
      }, constant(identity2));
      var invertBy = createInverter(function(result2, value, key) {
        if (value != null && typeof value.toString != "function") {
          value = nativeObjectToString2.call(value);
        }
        if (hasOwnProperty2.call(result2, value)) {
          result2[value].push(key);
        } else {
          result2[value] = [key];
        }
      }, getIteratee);
      var invoke = baseRest(baseInvoke);
      function keys2(object) {
        return isArrayLike2(object) ? arrayLikeKeys2(object) : baseKeys2(object);
      }
      function keysIn(object) {
        return isArrayLike2(object) ? arrayLikeKeys2(object, true) : baseKeysIn(object);
      }
      function mapKeys(object, iteratee2) {
        var result2 = {};
        iteratee2 = getIteratee(iteratee2, 3);
        baseForOwn2(object, function(value, key, object2) {
          baseAssignValue(result2, iteratee2(value, key, object2), value);
        });
        return result2;
      }
      function mapValues(object, iteratee2) {
        var result2 = {};
        iteratee2 = getIteratee(iteratee2, 3);
        baseForOwn2(object, function(value, key, object2) {
          baseAssignValue(result2, key, iteratee2(value, key, object2));
        });
        return result2;
      }
      var merge = createAssigner(function(object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      var omit = flatRest(function(object, paths) {
        var result2 = {};
        if (object == null) {
          return result2;
        }
        var isDeep = false;
        paths = arrayMap2(paths, function(path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result2);
        if (isDeep) {
          result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }
        var length2 = paths.length;
        while (length2--) {
          baseUnset(result2, paths[length2]);
        }
        return result2;
      });
      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }
      var pick = flatRest(function(object, paths) {
        return object == null ? {} : basePick(object, paths);
      });
      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }
        var props = arrayMap2(getAllKeysIn(object), function(prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function(value, path) {
          return predicate(value, path[0]);
        });
      }
      function result(object, path, defaultValue) {
        path = castPath(path, object);
        var index = -1, length2 = path.length;
        if (!length2) {
          length2 = 1;
          object = undefined$1;
        }
        while (++index < length2) {
          var value = object == null ? undefined$1 : object[toKey(path[index])];
          if (value === undefined$1) {
            index = length2;
            value = defaultValue;
          }
          object = isFunction2(value) ? value.call(object) : value;
        }
        return object;
      }
      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }
      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        return object == null ? object : baseSet(object, path, value, customizer);
      }
      var toPairs = createToPairs(keys2);
      var toPairsIn = createToPairs(keysIn);
      function transform2(object, iteratee2, accumulator) {
        var isArr = isArray2(object), isArrLike = isArr || isBuffer2(object) || isTypedArray2(object);
        iteratee2 = getIteratee(iteratee2, 4);
        if (accumulator == null) {
          var Ctor = object && object.constructor;
          if (isArrLike) {
            accumulator = isArr ? new Ctor() : [];
          } else if (isObject2(object)) {
            accumulator = isFunction2(Ctor) ? baseCreate(getPrototype(object)) : {};
          } else {
            accumulator = {};
          }
        }
        (isArrLike ? arrayEach2 : baseForOwn2)(object, function(value, index, object2) {
          return iteratee2(accumulator, value, index, object2);
        });
        return accumulator;
      }
      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }
      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction2(updater));
      }
      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        return object == null ? object : baseUpdate(object, path, castFunction2(updater), customizer);
      }
      function values(object) {
        return object == null ? [] : baseValues(object, keys2(object));
      }
      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }
      function clamp(number, lower, upper) {
        if (upper === undefined$1) {
          upper = lower;
          lower = undefined$1;
        }
        if (upper !== undefined$1) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }
        if (lower !== undefined$1) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }
        return baseClamp(toNumber(number), lower, upper);
      }
      function inRange(number, start, end) {
        start = toFinite(start);
        if (end === undefined$1) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        number = toNumber(number);
        return baseInRange(number, start, end);
      }
      function random(lower, upper, floating) {
        if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined$1;
        }
        if (floating === undefined$1) {
          if (typeof upper == "boolean") {
            floating = upper;
            upper = undefined$1;
          } else if (typeof lower == "boolean") {
            floating = lower;
            lower = undefined$1;
          }
        }
        if (lower === undefined$1 && upper === undefined$1) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);
          if (upper === undefined$1) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }
        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }
        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
        }
        return baseRandom(lower, upper);
      }
      var camelCase = createCompounder2(function(result2, word, index) {
        word = word.toLowerCase();
        return result2 + (index ? capitalize2(word) : word);
      });
      function capitalize2(string) {
        return upperFirst2(toString2(string).toLowerCase());
      }
      function deburr2(string) {
        string = toString2(string);
        return string && string.replace(reLatin2, deburrLetter2).replace(reComboMark2, "");
      }
      function endsWith(string, target, position2) {
        string = toString2(string);
        target = baseToString2(target);
        var length2 = string.length;
        position2 = position2 === undefined$1 ? length2 : baseClamp(toInteger(position2), 0, length2);
        var end = position2;
        position2 -= target.length;
        return position2 >= 0 && string.slice(position2, end) == target;
      }
      function escape(string) {
        string = toString2(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
      }
      function escapeRegExp(string) {
        string = toString2(string);
        return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
      }
      var kebabCase2 = createCompounder2(function(result2, word, index) {
        return result2 + (index ? "-" : "") + word.toLowerCase();
      });
      var lowerCase = createCompounder2(function(result2, word, index) {
        return result2 + (index ? " " : "") + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst2("toLowerCase");
      function pad(string, length2, chars) {
        string = toString2(string);
        length2 = toInteger(length2);
        var strLength = length2 ? stringSize(string) : 0;
        if (!length2 || strLength >= length2) {
          return string;
        }
        var mid = (length2 - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
      }
      function padEnd(string, length2, chars) {
        string = toString2(string);
        length2 = toInteger(length2);
        var strLength = length2 ? stringSize(string) : 0;
        return length2 && strLength < length2 ? string + createPadding(length2 - strLength, chars) : string;
      }
      function padStart(string, length2, chars) {
        string = toString2(string);
        length2 = toInteger(length2);
        var strLength = length2 ? stringSize(string) : 0;
        return length2 && strLength < length2 ? createPadding(length2 - strLength, chars) + string : string;
      }
      function parseInt2(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        return nativeParseInt(toString2(string).replace(reTrimStart, ""), radix || 0);
      }
      function repeat(string, n, guard) {
        if (guard ? isIterateeCall(string, n, guard) : n === undefined$1) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        return baseRepeat(toString2(string), n);
      }
      function replace() {
        var args = arguments, string = toString2(args[0]);
        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }
      var snakeCase = createCompounder2(function(result2, word, index) {
        return result2 + (index ? "_" : "") + word.toLowerCase();
      });
      function split(string, separator, limit) {
        if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined$1;
        }
        limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
        if (!limit) {
          return [];
        }
        string = toString2(string);
        if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
          separator = baseToString2(separator);
          if (!separator && hasUnicode2(string)) {
            return castSlice2(stringToArray2(string), 0, limit);
          }
        }
        return string.split(separator, limit);
      }
      var startCase = createCompounder2(function(result2, word, index) {
        return result2 + (index ? " " : "") + upperFirst2(word);
      });
      function startsWith(string, target, position2) {
        string = toString2(string);
        position2 = position2 == null ? 0 : baseClamp(toInteger(position2), 0, string.length);
        target = baseToString2(target);
        return string.slice(position2, position2 + target.length) == target;
      }
      function template(string, options, guard) {
        var settings = lodash2.templateSettings;
        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined$1;
        }
        string = toString2(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);
        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys2(imports), importsValues = baseValues(imports, importsKeys);
        var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
        var reDelimiters = RegExp2(
          (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
          "g"
        );
        var sourceURL = "//# sourceURL=" + (hasOwnProperty2.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }
          index = offset + match.length;
          return match;
        });
        source += "';\n";
        var variable = hasOwnProperty2.call(options, "variable") && options.variable;
        if (!variable) {
          source = "with (obj) {\n" + source + "\n}\n";
        } else if (reForbiddenIdentifierChars.test(variable)) {
          throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
        }
        source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
        source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
        var result2 = attempt(function() {
          return Function2(importsKeys, sourceURL + "return " + source).apply(undefined$1, importsValues);
        });
        result2.source = source;
        if (isError(result2)) {
          throw result2;
        }
        return result2;
      }
      function toLower(value) {
        return toString2(value).toLowerCase();
      }
      function toUpper(value) {
        return toString2(value).toUpperCase();
      }
      function trim(string, chars, guard) {
        string = toString2(string);
        if (string && (guard || chars === undefined$1)) {
          return baseTrim(string);
        }
        if (!string || !(chars = baseToString2(chars))) {
          return string;
        }
        var strSymbols = stringToArray2(string), chrSymbols = stringToArray2(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
        return castSlice2(strSymbols, start, end).join("");
      }
      function trimEnd(string, chars, guard) {
        string = toString2(string);
        if (string && (guard || chars === undefined$1)) {
          return string.slice(0, trimmedEndIndex(string) + 1);
        }
        if (!string || !(chars = baseToString2(chars))) {
          return string;
        }
        var strSymbols = stringToArray2(string), end = charsEndIndex(strSymbols, stringToArray2(chars)) + 1;
        return castSlice2(strSymbols, 0, end).join("");
      }
      function trimStart(string, chars, guard) {
        string = toString2(string);
        if (string && (guard || chars === undefined$1)) {
          return string.replace(reTrimStart, "");
        }
        if (!string || !(chars = baseToString2(chars))) {
          return string;
        }
        var strSymbols = stringToArray2(string), start = charsStartIndex(strSymbols, stringToArray2(chars));
        return castSlice2(strSymbols, start).join("");
      }
      function truncate(string, options) {
        var length2 = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
        if (isObject2(options)) {
          var separator = "separator" in options ? options.separator : separator;
          length2 = "length" in options ? toInteger(options.length) : length2;
          omission = "omission" in options ? baseToString2(options.omission) : omission;
        }
        string = toString2(string);
        var strLength = string.length;
        if (hasUnicode2(string)) {
          var strSymbols = stringToArray2(string);
          strLength = strSymbols.length;
        }
        if (length2 >= strLength) {
          return string;
        }
        var end = length2 - stringSize(omission);
        if (end < 1) {
          return omission;
        }
        var result2 = strSymbols ? castSlice2(strSymbols, 0, end).join("") : string.slice(0, end);
        if (separator === undefined$1) {
          return result2 + omission;
        }
        if (strSymbols) {
          end += result2.length - end;
        }
        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match, substring = result2;
            if (!separator.global) {
              separator = RegExp2(separator.source, toString2(reFlags.exec(separator)) + "g");
            }
            separator.lastIndex = 0;
            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }
            result2 = result2.slice(0, newEnd === undefined$1 ? end : newEnd);
          }
        } else if (string.indexOf(baseToString2(separator), end) != end) {
          var index = result2.lastIndexOf(separator);
          if (index > -1) {
            result2 = result2.slice(0, index);
          }
        }
        return result2 + omission;
      }
      function unescape(string) {
        string = toString2(string);
        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
      }
      var upperCase = createCompounder2(function(result2, word, index) {
        return result2 + (index ? " " : "") + word.toUpperCase();
      });
      var upperFirst2 = createCaseFirst2("toUpperCase");
      function words2(string, pattern, guard) {
        string = toString2(string);
        pattern = guard ? undefined$1 : pattern;
        if (pattern === undefined$1) {
          return hasUnicodeWord2(string) ? unicodeWords2(string) : asciiWords2(string);
        }
        return string.match(pattern) || [];
      }
      var attempt = baseRest(function(func, args) {
        try {
          return apply(func, undefined$1, args);
        } catch (e) {
          return isError(e) ? e : new Error2(e);
        }
      });
      var bindAll = flatRest(function(object, methodNames) {
        arrayEach2(methodNames, function(key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });
      function cond(pairs) {
        var length2 = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
        pairs = !length2 ? [] : arrayMap2(pairs, function(pair) {
          if (typeof pair[1] != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return [toIteratee(pair[0]), pair[1]];
        });
        return baseRest(function(args) {
          var index = -1;
          while (++index < length2) {
            var pair = pairs[index];
            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }
      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }
      function constant(value) {
        return function() {
          return value;
        };
      }
      function defaultTo(value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
      }
      var flow = createFlow();
      var flowRight = createFlow(true);
      function identity2(value) {
        return value;
      }
      function iteratee(func) {
        return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
      }
      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }
      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }
      var method = baseRest(function(path, args) {
        return function(object) {
          return baseInvoke(object, path, args);
        };
      });
      var methodOf = baseRest(function(object, args) {
        return function(path) {
          return baseInvoke(object, path, args);
        };
      });
      function mixin(object, source, options) {
        var props = keys2(source), methodNames = baseFunctions(source, props);
        if (options == null && !(isObject2(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys2(source));
        }
        var chain2 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction2(object);
        arrayEach2(methodNames, function(methodName) {
          var func = source[methodName];
          object[methodName] = func;
          if (isFunc) {
            object.prototype[methodName] = function() {
              var chainAll = this.__chain__;
              if (chain2 || chainAll) {
                var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                actions.push({ "func": func, "args": arguments, "thisArg": object });
                result2.__chain__ = chainAll;
                return result2;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });
        return object;
      }
      function noConflict() {
        if (root2._ === this) {
          root2._ = oldDash;
        }
        return this;
      }
      function noop2() {
      }
      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function(args) {
          return baseNth(args, n);
        });
      }
      var over = createOver(arrayMap2);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome);
      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }
      function propertyOf(object) {
        return function(path) {
          return object == null ? undefined$1 : baseGet(object, path);
        };
      }
      var range = createRange();
      var rangeRight = createRange(true);
      function stubArray() {
        return [];
      }
      function stubFalse2() {
        return false;
      }
      function stubObject() {
        return {};
      }
      function stubString() {
        return "";
      }
      function stubTrue() {
        return true;
      }
      function times(n, iteratee2) {
        n = toInteger(n);
        if (n < 1 || n > MAX_SAFE_INTEGER2) {
          return [];
        }
        var index = MAX_ARRAY_LENGTH, length2 = nativeMin(n, MAX_ARRAY_LENGTH);
        iteratee2 = getIteratee(iteratee2);
        n -= MAX_ARRAY_LENGTH;
        var result2 = baseTimes2(length2, iteratee2);
        while (++index < n) {
          iteratee2(index);
        }
        return result2;
      }
      function toPath(value) {
        if (isArray2(value)) {
          return arrayMap2(value, toKey);
        }
        return isSymbol2(value) ? [value] : copyArray(stringToPath(toString2(value)));
      }
      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString2(prefix) + id;
      }
      var add = createMathOperation(function(augend, addend) {
        return augend + addend;
      }, 0);
      var ceil = createRound("ceil");
      var divide = createMathOperation(function(dividend, divisor) {
        return dividend / divisor;
      }, 1);
      var floor = createRound("floor");
      function max(array2) {
        return array2 && array2.length ? baseExtremum(array2, identity2, baseGt) : undefined$1;
      }
      function maxBy(array2, iteratee2) {
        return array2 && array2.length ? baseExtremum(array2, getIteratee(iteratee2, 2), baseGt) : undefined$1;
      }
      function mean(array2) {
        return baseMean(array2, identity2);
      }
      function meanBy(array2, iteratee2) {
        return baseMean(array2, getIteratee(iteratee2, 2));
      }
      function min(array2) {
        return array2 && array2.length ? baseExtremum(array2, identity2, baseLt) : undefined$1;
      }
      function minBy(array2, iteratee2) {
        return array2 && array2.length ? baseExtremum(array2, getIteratee(iteratee2, 2), baseLt) : undefined$1;
      }
      var multiply = createMathOperation(function(multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
      var round = createRound("round");
      var subtract = createMathOperation(function(minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);
      function sum(array2) {
        return array2 && array2.length ? baseSum(array2, identity2) : 0;
      }
      function sumBy(array2, iteratee2) {
        return array2 && array2.length ? baseSum(array2, getIteratee(iteratee2, 2)) : 0;
      }
      lodash2.after = after2;
      lodash2.ary = ary;
      lodash2.assign = assign;
      lodash2.assignIn = assignIn;
      lodash2.assignInWith = assignInWith;
      lodash2.assignWith = assignWith;
      lodash2.at = at;
      lodash2.before = before2;
      lodash2.bind = bind;
      lodash2.bindAll = bindAll;
      lodash2.bindKey = bindKey;
      lodash2.castArray = castArray;
      lodash2.chain = chain;
      lodash2.chunk = chunk;
      lodash2.compact = compact;
      lodash2.concat = concat;
      lodash2.cond = cond;
      lodash2.conforms = conforms;
      lodash2.constant = constant;
      lodash2.countBy = countBy;
      lodash2.create = create2;
      lodash2.curry = curry;
      lodash2.curryRight = curryRight;
      lodash2.debounce = debounce;
      lodash2.defaults = defaults;
      lodash2.defaultsDeep = defaultsDeep;
      lodash2.defer = defer;
      lodash2.delay = delay;
      lodash2.difference = difference2;
      lodash2.differenceBy = differenceBy;
      lodash2.differenceWith = differenceWith;
      lodash2.drop = drop;
      lodash2.dropRight = dropRight;
      lodash2.dropRightWhile = dropRightWhile;
      lodash2.dropWhile = dropWhile;
      lodash2.fill = fill;
      lodash2.filter = filter2;
      lodash2.flatMap = flatMap;
      lodash2.flatMapDeep = flatMapDeep;
      lodash2.flatMapDepth = flatMapDepth;
      lodash2.flatten = flatten;
      lodash2.flattenDeep = flattenDeep;
      lodash2.flattenDepth = flattenDepth;
      lodash2.flip = flip;
      lodash2.flow = flow;
      lodash2.flowRight = flowRight;
      lodash2.fromPairs = fromPairs;
      lodash2.functions = functions;
      lodash2.functionsIn = functionsIn;
      lodash2.groupBy = groupBy;
      lodash2.initial = initial;
      lodash2.intersection = intersection;
      lodash2.intersectionBy = intersectionBy;
      lodash2.intersectionWith = intersectionWith;
      lodash2.invert = invert;
      lodash2.invertBy = invertBy;
      lodash2.invokeMap = invokeMap;
      lodash2.iteratee = iteratee;
      lodash2.keyBy = keyBy;
      lodash2.keys = keys2;
      lodash2.keysIn = keysIn;
      lodash2.map = map2;
      lodash2.mapKeys = mapKeys;
      lodash2.mapValues = mapValues;
      lodash2.matches = matches;
      lodash2.matchesProperty = matchesProperty;
      lodash2.memoize = memoize;
      lodash2.merge = merge;
      lodash2.mergeWith = mergeWith;
      lodash2.method = method;
      lodash2.methodOf = methodOf;
      lodash2.mixin = mixin;
      lodash2.negate = negate;
      lodash2.nthArg = nthArg;
      lodash2.omit = omit;
      lodash2.omitBy = omitBy;
      lodash2.once = once;
      lodash2.orderBy = orderBy;
      lodash2.over = over;
      lodash2.overArgs = overArgs;
      lodash2.overEvery = overEvery;
      lodash2.overSome = overSome;
      lodash2.partial = partial;
      lodash2.partialRight = partialRight;
      lodash2.partition = partition;
      lodash2.pick = pick;
      lodash2.pickBy = pickBy;
      lodash2.property = property;
      lodash2.propertyOf = propertyOf;
      lodash2.pull = pull;
      lodash2.pullAll = pullAll;
      lodash2.pullAllBy = pullAllBy;
      lodash2.pullAllWith = pullAllWith;
      lodash2.pullAt = pullAt;
      lodash2.range = range;
      lodash2.rangeRight = rangeRight;
      lodash2.rearg = rearg;
      lodash2.reject = reject;
      lodash2.remove = remove;
      lodash2.rest = rest;
      lodash2.reverse = reverse;
      lodash2.sampleSize = sampleSize;
      lodash2.set = set;
      lodash2.setWith = setWith;
      lodash2.shuffle = shuffle;
      lodash2.slice = slice;
      lodash2.sortBy = sortBy;
      lodash2.sortedUniq = sortedUniq;
      lodash2.sortedUniqBy = sortedUniqBy;
      lodash2.split = split;
      lodash2.spread = spread;
      lodash2.tail = tail;
      lodash2.take = take;
      lodash2.takeRight = takeRight;
      lodash2.takeRightWhile = takeRightWhile;
      lodash2.takeWhile = takeWhile;
      lodash2.tap = tap;
      lodash2.throttle = throttle;
      lodash2.thru = thru;
      lodash2.toArray = toArray;
      lodash2.toPairs = toPairs;
      lodash2.toPairsIn = toPairsIn;
      lodash2.toPath = toPath;
      lodash2.toPlainObject = toPlainObject;
      lodash2.transform = transform2;
      lodash2.unary = unary;
      lodash2.union = union;
      lodash2.unionBy = unionBy;
      lodash2.unionWith = unionWith;
      lodash2.uniq = uniq;
      lodash2.uniqBy = uniqBy;
      lodash2.uniqWith = uniqWith;
      lodash2.unset = unset;
      lodash2.unzip = unzip;
      lodash2.unzipWith = unzipWith;
      lodash2.update = update;
      lodash2.updateWith = updateWith;
      lodash2.values = values;
      lodash2.valuesIn = valuesIn;
      lodash2.without = without;
      lodash2.words = words2;
      lodash2.wrap = wrap;
      lodash2.xor = xor;
      lodash2.xorBy = xorBy;
      lodash2.xorWith = xorWith;
      lodash2.zip = zip;
      lodash2.zipObject = zipObject;
      lodash2.zipObjectDeep = zipObjectDeep;
      lodash2.zipWith = zipWith;
      lodash2.entries = toPairs;
      lodash2.entriesIn = toPairsIn;
      lodash2.extend = assignIn;
      lodash2.extendWith = assignInWith;
      mixin(lodash2, lodash2);
      lodash2.add = add;
      lodash2.attempt = attempt;
      lodash2.camelCase = camelCase;
      lodash2.capitalize = capitalize2;
      lodash2.ceil = ceil;
      lodash2.clamp = clamp;
      lodash2.clone = clone;
      lodash2.cloneDeep = cloneDeep;
      lodash2.cloneDeepWith = cloneDeepWith;
      lodash2.cloneWith = cloneWith;
      lodash2.conformsTo = conformsTo;
      lodash2.deburr = deburr2;
      lodash2.defaultTo = defaultTo;
      lodash2.divide = divide;
      lodash2.endsWith = endsWith;
      lodash2.eq = eq;
      lodash2.escape = escape;
      lodash2.escapeRegExp = escapeRegExp;
      lodash2.every = every;
      lodash2.find = find2;
      lodash2.findIndex = findIndex;
      lodash2.findKey = findKey;
      lodash2.findLast = findLast;
      lodash2.findLastIndex = findLastIndex;
      lodash2.findLastKey = findLastKey;
      lodash2.floor = floor;
      lodash2.forEach = forEach2;
      lodash2.forEachRight = forEachRight;
      lodash2.forIn = forIn;
      lodash2.forInRight = forInRight;
      lodash2.forOwn = forOwn;
      lodash2.forOwnRight = forOwnRight;
      lodash2.get = get;
      lodash2.gt = gt;
      lodash2.gte = gte;
      lodash2.has = has;
      lodash2.hasIn = hasIn;
      lodash2.head = head;
      lodash2.identity = identity2;
      lodash2.includes = includes;
      lodash2.indexOf = indexOf;
      lodash2.inRange = inRange;
      lodash2.invoke = invoke;
      lodash2.isArguments = isArguments2;
      lodash2.isArray = isArray2;
      lodash2.isArrayBuffer = isArrayBuffer;
      lodash2.isArrayLike = isArrayLike2;
      lodash2.isArrayLikeObject = isArrayLikeObject;
      lodash2.isBoolean = isBoolean;
      lodash2.isBuffer = isBuffer2;
      lodash2.isDate = isDate;
      lodash2.isElement = isElement;
      lodash2.isEmpty = isEmpty;
      lodash2.isEqual = isEqual;
      lodash2.isEqualWith = isEqualWith;
      lodash2.isError = isError;
      lodash2.isFinite = isFinite2;
      lodash2.isFunction = isFunction2;
      lodash2.isInteger = isInteger;
      lodash2.isLength = isLength2;
      lodash2.isMap = isMap;
      lodash2.isMatch = isMatch;
      lodash2.isMatchWith = isMatchWith;
      lodash2.isNaN = isNaN2;
      lodash2.isNative = isNative;
      lodash2.isNil = isNil;
      lodash2.isNull = isNull;
      lodash2.isNumber = isNumber2;
      lodash2.isObject = isObject2;
      lodash2.isObjectLike = isObjectLike2;
      lodash2.isPlainObject = isPlainObject;
      lodash2.isRegExp = isRegExp;
      lodash2.isSafeInteger = isSafeInteger;
      lodash2.isSet = isSet;
      lodash2.isString = isString;
      lodash2.isSymbol = isSymbol2;
      lodash2.isTypedArray = isTypedArray2;
      lodash2.isUndefined = isUndefined;
      lodash2.isWeakMap = isWeakMap;
      lodash2.isWeakSet = isWeakSet;
      lodash2.join = join;
      lodash2.kebabCase = kebabCase2;
      lodash2.last = last;
      lodash2.lastIndexOf = lastIndexOf;
      lodash2.lowerCase = lowerCase;
      lodash2.lowerFirst = lowerFirst;
      lodash2.lt = lt;
      lodash2.lte = lte;
      lodash2.max = max;
      lodash2.maxBy = maxBy;
      lodash2.mean = mean;
      lodash2.meanBy = meanBy;
      lodash2.min = min;
      lodash2.minBy = minBy;
      lodash2.stubArray = stubArray;
      lodash2.stubFalse = stubFalse2;
      lodash2.stubObject = stubObject;
      lodash2.stubString = stubString;
      lodash2.stubTrue = stubTrue;
      lodash2.multiply = multiply;
      lodash2.nth = nth;
      lodash2.noConflict = noConflict;
      lodash2.noop = noop2;
      lodash2.now = now;
      lodash2.pad = pad;
      lodash2.padEnd = padEnd;
      lodash2.padStart = padStart;
      lodash2.parseInt = parseInt2;
      lodash2.random = random;
      lodash2.reduce = reduce;
      lodash2.reduceRight = reduceRight;
      lodash2.repeat = repeat;
      lodash2.replace = replace;
      lodash2.result = result;
      lodash2.round = round;
      lodash2.runInContext = runInContext2;
      lodash2.sample = sample;
      lodash2.size = size2;
      lodash2.snakeCase = snakeCase;
      lodash2.some = some;
      lodash2.sortedIndex = sortedIndex;
      lodash2.sortedIndexBy = sortedIndexBy;
      lodash2.sortedIndexOf = sortedIndexOf;
      lodash2.sortedLastIndex = sortedLastIndex;
      lodash2.sortedLastIndexBy = sortedLastIndexBy;
      lodash2.sortedLastIndexOf = sortedLastIndexOf;
      lodash2.startCase = startCase;
      lodash2.startsWith = startsWith;
      lodash2.subtract = subtract;
      lodash2.sum = sum;
      lodash2.sumBy = sumBy;
      lodash2.template = template;
      lodash2.times = times;
      lodash2.toFinite = toFinite;
      lodash2.toInteger = toInteger;
      lodash2.toLength = toLength;
      lodash2.toLower = toLower;
      lodash2.toNumber = toNumber;
      lodash2.toSafeInteger = toSafeInteger;
      lodash2.toString = toString2;
      lodash2.toUpper = toUpper;
      lodash2.trim = trim;
      lodash2.trimEnd = trimEnd;
      lodash2.trimStart = trimStart;
      lodash2.truncate = truncate;
      lodash2.unescape = unescape;
      lodash2.uniqueId = uniqueId;
      lodash2.upperCase = upperCase;
      lodash2.upperFirst = upperFirst2;
      lodash2.each = forEach2;
      lodash2.eachRight = forEachRight;
      lodash2.first = head;
      mixin(lodash2, function() {
        var source = {};
        baseForOwn2(lodash2, function(func, methodName) {
          if (!hasOwnProperty2.call(lodash2.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), { "chain": false });
      lodash2.VERSION = VERSION;
      arrayEach2(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
        lodash2[methodName].placeholder = lodash2;
      });
      arrayEach2(["drop", "take"], function(methodName, index) {
        LazyWrapper.prototype[methodName] = function(n) {
          n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);
          var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
          if (result2.__filtered__) {
            result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
          } else {
            result2.__views__.push({
              "size": nativeMin(n, MAX_ARRAY_LENGTH),
              "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
            });
          }
          return result2;
        };
        LazyWrapper.prototype[methodName + "Right"] = function(n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
      arrayEach2(["filter", "map", "takeWhile"], function(methodName, index) {
        var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
        LazyWrapper.prototype[methodName] = function(iteratee2) {
          var result2 = this.clone();
          result2.__iteratees__.push({
            "iteratee": getIteratee(iteratee2, 3),
            "type": type
          });
          result2.__filtered__ = result2.__filtered__ || isFilter;
          return result2;
        };
      });
      arrayEach2(["head", "last"], function(methodName, index) {
        var takeName = "take" + (index ? "Right" : "");
        LazyWrapper.prototype[methodName] = function() {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach2(["initial", "tail"], function(methodName, index) {
        var dropName = "drop" + (index ? "" : "Right");
        LazyWrapper.prototype[methodName] = function() {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });
      LazyWrapper.prototype.compact = function() {
        return this.filter(identity2);
      };
      LazyWrapper.prototype.find = function(predicate) {
        return this.filter(predicate).head();
      };
      LazyWrapper.prototype.findLast = function(predicate) {
        return this.reverse().find(predicate);
      };
      LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
        if (typeof path == "function") {
          return new LazyWrapper(this);
        }
        return this.map(function(value) {
          return baseInvoke(value, path, args);
        });
      });
      LazyWrapper.prototype.reject = function(predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };
      LazyWrapper.prototype.slice = function(start, end) {
        start = toInteger(start);
        var result2 = this;
        if (result2.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result2);
        }
        if (start < 0) {
          result2 = result2.takeRight(-start);
        } else if (start) {
          result2 = result2.drop(start);
        }
        if (end !== undefined$1) {
          end = toInteger(end);
          result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
        }
        return result2;
      };
      LazyWrapper.prototype.takeRightWhile = function(predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };
      LazyWrapper.prototype.toArray = function() {
        return this.take(MAX_ARRAY_LENGTH);
      };
      baseForOwn2(LazyWrapper.prototype, function(func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash2[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
        if (!lodashFunc) {
          return;
        }
        lodash2.prototype[methodName] = function() {
          var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray2(value);
          var interceptor = function(value2) {
            var result3 = lodashFunc.apply(lodash2, arrayPush([value2], args));
            return isTaker && chainAll ? result3[0] : result3;
          };
          if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
            isLazy = useLazy = false;
          }
          var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result2 = func.apply(value, args);
            result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined$1 });
            return new LodashWrapper(result2, chainAll);
          }
          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }
          result2 = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
        };
      });
      arrayEach2(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
        var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
        lodash2.prototype[methodName] = function() {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray2(value) ? value : [], args);
          }
          return this[chainName](function(value2) {
            return func.apply(isArray2(value2) ? value2 : [], args);
          });
        };
      });
      baseForOwn2(LazyWrapper.prototype, function(func, methodName) {
        var lodashFunc = lodash2[methodName];
        if (lodashFunc) {
          var key = lodashFunc.name + "";
          if (!hasOwnProperty2.call(realNames, key)) {
            realNames[key] = [];
          }
          realNames[key].push({ "name": methodName, "func": lodashFunc });
        }
      });
      realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
        "name": "wrapper",
        "func": undefined$1
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash2.prototype.at = wrapperAt;
      lodash2.prototype.chain = wrapperChain;
      lodash2.prototype.commit = wrapperCommit;
      lodash2.prototype.next = wrapperNext;
      lodash2.prototype.plant = wrapperPlant;
      lodash2.prototype.reverse = wrapperReverse;
      lodash2.prototype.toJSON = lodash2.prototype.valueOf = lodash2.prototype.value = wrapperValue;
      lodash2.prototype.first = lodash2.prototype.head;
      if (symIterator) {
        lodash2.prototype[symIterator] = wrapperToIterator;
      }
      return lodash2;
    };
    var _ = runInContext();
    if (freeModule2) {
      (freeModule2.exports = _)._ = _;
      freeExports2._ = _;
    } else {
      root2._ = _;
    }
  }).call(commonjsGlobal);
})(lodash, lodash.exports);
var lodashExports = lodash.exports;
function getBarElement(context, taskId) {
  const chartInstanceId = context.getInstanceId();
  const selector = `.bar-container .bar-timeline[data-taskid="${taskId}"][data-chart-instance="${chartInstanceId}"]`;
  const element = context.querySelector(selector);
  if (!element) {
    console.warn(`[${chartInstanceId}] Bar element not found for task: ${taskId}`);
  }
  return element;
}
function getBarRowElement(context, taskId) {
  const chartInstanceId = context.getInstanceId();
  const selector = `.timeline-body .timeline-data-row[data-taskid="${taskId}"][data-chart-instance="${chartInstanceId}"]`;
  const element = context.querySelector(selector);
  if (!element) {
    console.warn(`[${chartInstanceId}] Bar row element not found for task: ${taskId}`);
  }
  return element;
}
const SupportedScales = ["day", "week", "month", "quarter", "year"];
var ViewMode = /* @__PURE__ */ ((ViewMode2) => {
  ViewMode2["Day"] = "day";
  ViewMode2["Month"] = "month";
  ViewMode2["Quarter"] = "quarter";
  ViewMode2["Week"] = "week";
  ViewMode2["Year"] = "year";
  return ViewMode2;
})(ViewMode || {});
var Orientation = /* @__PURE__ */ ((Orientation2) => {
  Orientation2["Horizontal"] = "horizontal";
  Orientation2["Vertical"] = "vertical";
  return Orientation2;
})(Orientation || {});
class AnnotationRenderer {
  constructor(options, ganttStartDate, viewMode, chartContext, totalHeight) {
    this.options = options;
    this.ganttStartDate = ganttStartDate;
    this.viewMode = viewMode;
    this.chartContext = chartContext;
    this.totalHeight = totalHeight;
  }
  calculateWidth(annotation) {
    const annotationDiff = dayjs(annotation.x2).add(1, "day").diff(dayjs(annotation.x1), `${this.viewMode}s`, true);
    const width2 = annotationDiff * ColumnWidthByMode[this.viewMode];
    return width2;
  }
  calculateX(annotation) {
    const diff = dayjs(annotation.x1).diff(this.ganttStartDate.startOf(this.viewMode), `${this.viewMode}s`, true);
    const xValue = diff * ColumnWidthByMode[this.viewMode];
    return xValue;
  }
  drawAnnotation(annotation) {
    const annotationElement = createBox(this.chartContext, { className: "annotation" });
    const xPosition = this.calculateX(annotation);
    const annotationStyles = generateStyles(this.getAnnotationStyles(annotation, xPosition));
    annotationElement.setAttribute("style", annotationStyles);
    if (annotation.label) {
      const label = this.renderLabel(annotation);
      annotationElement.append(label);
    }
    return annotationElement;
  }
  getAnnotationStyles(annotation, x1Position) {
    const { annotationBgColor, annotationBorderColor, annotationBorderWidth } = this.options;
    const { bgColor, borderColor, borderWidth } = annotation;
    let width2 = 0;
    const updatedBorderWidth = annotation.x2 ? borderWidth || annotationBorderWidth : (borderWidth || annotationBorderWidth) / 2;
    if (annotation.x2) {
      width2 = this.calculateWidth(annotation);
    }
    return {
      backgroundColor: bgColor || annotationBgColor,
      borderColor: `${borderColor || annotationBorderColor}`,
      borderStyle: "solid",
      borderWidth: `${updatedBorderWidth}px`,
      height: `${this.totalHeight}px`,
      left: `${x1Position}px`,
      position: "absolute",
      top: `0px`,
      width: width2 ? `${width2}px` : "unset",
      zIndex: "10"
    };
  }
  /**
   * Render the label for an annotation.
   */
  renderLabel(annotation) {
    const labelElement = createBox(this.chartContext, { className: "annotation-label" });
    const { annotationBorderColor, fontColor, fontFamily, fontSize, fontWeight } = this.options;
    const { borderColor } = annotation;
    const { label } = annotation;
    const textColor = label.fontColor || fontColor;
    const labelFontFamily = label.fontFamily || fontFamily;
    const labelFontSize = label.fontSize || fontSize;
    const labelFontWeight = label.fontWeight || fontWeight;
    const labelStyles = generateStyles({
      background: "white",
      borderColor: `${borderColor || annotationBorderColor}`,
      borderStyle: "solid",
      borderWidth: "1px",
      color: textColor,
      fontFamily: labelFontFamily,
      fontSize: labelFontSize,
      fontWeight: labelFontWeight,
      left: "0px",
      padding: "2px 5px",
      position: "absolute",
      top: "-1px",
      width: "max-content",
      zIndex: "1"
    });
    labelElement.setAttribute("style", labelStyles);
    labelElement.innerText = annotation.label.text;
    return labelElement;
  }
  /**
   * Render all annotations.
   */
  render() {
    const elements2 = [];
    this.options.annotations.forEach((annotation) => {
      elements2.push(this.drawAnnotation(annotation));
    });
    return elements2;
  }
}
const ColumnWidthByMode = {
  [ViewMode.Day]: 80,
  [ViewMode.Month]: 150,
  [ViewMode.Quarter]: 150,
  [ViewMode.Week]: 180,
  [ViewMode.Year]: 180
};
function getDaysInUnit(date, mode) {
  const d = dayjs(date);
  switch (mode) {
    case ViewMode.Month:
      return d.daysInMonth();
    case ViewMode.Quarter: {
      const start = d.startOf("quarter");
      const end = d.endOf("quarter");
      return end.diff(start, "day") + 1;
    }
    case ViewMode.Week: {
      return 7;
    }
    case ViewMode.Year: {
      const start = d.startOf("year");
      const end = d.endOf("year");
      return end.diff(start, "day") + 1;
    }
    default:
      return 1;
  }
}
const getPixelsPerDayForUnit = (unitStartDate, viewMode) => {
  const days = getDaysInUnit(unitStartDate, viewMode);
  return ColumnWidthByMode[viewMode] / days;
};
const BaseDefaults = {
  annotationBorderDashArray: [],
  annotationBorderWidth: 2,
  annotationOrientation: Orientation.Horizontal,
  annotations: [],
  barBorderRadius: "5px",
  barMargin: 3,
  canvasStyle: "border: 1px solid #CACED0; box-sizing: border-box",
  cellBorderWidth: "1px",
  enableExport: true,
  enableResize: true,
  enableTaskDrag: true,
  enableTaskEdit: false,
  enableTaskResize: true,
  enableTooltip: true,
  fontFamily: "sans-serif",
  fontSize: "14px",
  fontWeight: "400",
  height: "500px",
  inputDateFormat: "MM-DD-YYYY",
  rowHeight: 28,
  series: [],
  tasksContainerWidth: 425,
  tooltipId: "apexgantt-tooltip-container",
  tooltipTemplate(task, dateFormat) {
    const items = [
      `<div>
        <strong>Task:</strong>
        <span>${task.name}</span>
      </div>
      `
    ];
    if (task.type === TaskType.Task) {
      items.push(`
        <div>
          <strong>Start:</strong>
          <span>${getTaskTextByColumn(task, ColumnKey.StartTime, dateFormat)}</span>
        </div>
        <div>
          <strong>End:</strong>
          <span>${getTaskTextByColumn(task, ColumnKey.EndTime, dateFormat)}</span>
        </div>
        <div>
          <strong>Duration:</strong>
          <span>${getTaskTextByColumn(task, ColumnKey.Duration, dateFormat)}</span>
        </div>
        <div>
          <strong>Progress:</strong>
          <span>${task.progress}%</span>
        </div>
      `);
    } else if (task.type === TaskType.Milestone) {
      items.push(`
        <div>
          <strong>Date:</strong>
          <span>${getTaskTextByColumn(task, ColumnKey.StartTime, dateFormat)}</span>
        </div>
      `);
    }
    if (task.dependency) {
      items.push(`
      <div>
        <strong>Depends on:</strong>
        <span>${task.dependency}</span>
      </div>
    `);
    }
    return `
      <div>
        ${items.join("")}
      </div>
    `;
  },
  viewMode: ViewMode.Week,
  width: "100%"
};
const LightThemeDefaults = {
  annotationBgColor: "#F9D1FC",
  annotationBorderColor: "#E273EA",
  arrowColor: "#0D6EFD",
  backgroundColor: "#FFFFFF",
  barBackgroundColor: "#87B7FE",
  barTextColor: "#FFFFFF",
  borderColor: "#DFE0E1",
  cellBorderColor: "#eff0f0",
  fontColor: "#000000",
  headerBackground: "#F3F3F3",
  rowBackgroundColors: ["#FFFFFF"],
  tooltipBGColor: "#FFFFFF",
  tooltipBorderColor: "#BCBCBC"
};
const DarkThemeDefaults = {
  annotationBgColor: "#4A2D4D",
  annotationBorderColor: "#8B4D8F",
  arrowColor: "#4A9EFF",
  backgroundColor: "#1E1E1E",
  barBackgroundColor: "#5B8DEE",
  barTextColor: "#FFFFFF",
  borderColor: "#3A3A3A",
  cellBorderColor: "#3A3A3A",
  fontColor: "#E0E0E0",
  headerBackground: "#2A2A2A",
  rowBackgroundColors: ["#1E1E1E", "#252525"],
  tooltipBGColor: "#2D2D2D",
  tooltipBorderColor: "#444444"
};
function getDefaultOptions(theme) {
  const themeDefaults = theme === "dark" ? DarkThemeDefaults : LightThemeDefaults;
  return {
    ...BaseDefaults,
    ...themeDefaults
  };
}
const DefaultOptions$1 = getDefaultOptions("light");
class BarDragManager {
  constructor(taskId, options, viewMode, chartContext, dataManager) {
    this.taskId = taskId;
    this.options = options;
    this.chartContext = chartContext;
    this.dataManager = dataManager;
    this.dragState = {
      childTasks: [],
      daysPerPixel: 0,
      initialLeft: 0,
      initialPosition: 0,
      isDragging: false,
      parentWidth: 0,
      parentX1: 0,
      parentX2: 0,
      startX: 0
    };
    this.dragState.daysPerPixel = getPixelsPerDayForUnit(this.dataManager.getTaskById(taskId).startTime, viewMode);
  }
  calculateFinalPosition(e, currentWidth) {
    const { daysPerPixel, initialLeft, initialPosition, parentX1, parentX2 } = this.dragState;
    const dx2 = e.clientX - initialPosition;
    let daysMoved = Math.round(dx2 / daysPerPixel);
    let calculatedLeft = initialLeft + daysMoved * daysPerPixel;
    if (dx2 < 0 && calculatedLeft <= parentX1) {
      calculatedLeft = parentX1;
      daysMoved = Math.round((parentX1 - initialLeft) / daysPerPixel);
    } else if (dx2 > 0 && calculatedLeft + currentWidth >= parentX2) {
      calculatedLeft = parentX2 - currentWidth;
      daysMoved = Math.round((parentX2 - currentWidth - initialLeft) / daysPerPixel);
    }
    return { calculatedLeft, daysMoved };
  }
  createMouseDownHandler(barElement) {
    return (e) => {
      var _a;
      this.task = this.dataManager.getTaskById(this.taskId);
      this.dragState = {
        ...this.dragState,
        initialLeft: parseInt(barElement.style.left) || 0,
        initialPosition: e.clientX,
        isDragging: true,
        startX: e.clientX
      };
      barElement.classList.add("dragging");
      const parentElement = getBarElement(this.chartContext, this.task.parentId);
      this.dragState.parentX2 = ((_a = this.chartContext.querySelector(".timeline-body")) == null ? void 0 : _a.clientWidth) || 0;
      this.dragState.childTasks = this.dataManager.getNestedChildTasks(this.task.id).map((childTask) => {
        const childElement = getBarElement(this.chartContext, childTask.id);
        return childElement ? {
          ...childTask,
          element: childElement,
          left: parseInt(childElement.style.left) || 0,
          width: parseInt(childElement.style.width) || 0
        } : childTask;
      });
      if (parentElement) {
        this.dragState.parentX1 = parseInt(parentElement.style.left) || 0;
        this.dragState.parentX2 = this.dragState.parentX1 + parseInt(parentElement.style.width) || 0;
      }
    };
  }
  createMouseMoveHandler(barElement) {
    return (e) => {
      if (!this.dragState.isDragging)
        return;
      requestAnimationFrame(() => {
        const dx2 = e.clientX - this.dragState.startX;
        const currentLeft = parseInt(barElement.style.left) || 0;
        const currentWidth = parseInt(barElement.style.width) || 0;
        if (this.isOutOfBounds(currentLeft, currentWidth, dx2))
          return;
        this.moveBar(barElement, currentLeft, dx2);
        this.dataManager.updateDependencyArrows(this.task.id, this.chartContext);
        this.moveChildBars(dx2);
        this.dragState.startX = e.clientX;
      });
    };
  }
  createMouseUpHandler(barElement, onUpdate) {
    return (e) => {
      if (!this.dragState.isDragging)
        return;
      this.dragState.isDragging = false;
      barElement.classList.remove("dragging");
      const currentWidth = parseInt(barElement.style.width) || 0;
      const { calculatedLeft, daysMoved } = this.calculateFinalPosition(e, currentWidth);
      this.updateTaskPosition(barElement, calculatedLeft, daysMoved, onUpdate);
      this.updateChildrenPositions(calculatedLeft, daysMoved, onUpdate);
    };
  }
  isOutOfBounds(currentLeft, currentWidth, dx2) {
    const { parentX1, parentX2 } = this.dragState;
    return dx2 < 0 && currentLeft <= parentX1 || dx2 > 0 && currentLeft + currentWidth >= parentX2;
  }
  moveBar(element, currentLeft, dx2) {
    element.style.left = `${currentLeft + dx2}px`;
  }
  moveChildBars(dx2) {
    this.dragState.childTasks.forEach((childTask) => {
      if (childTask.element) {
        const childLeft = parseInt(childTask.element.style.left) || 0;
        childTask.element.style.left = `${childLeft + dx2}px`;
        this.dataManager.updateDependencyArrows(childTask.id, this.chartContext);
      }
    });
  }
  updateChildrenPositions(parentCalculatedLeft, daysMoved, onUpdate) {
    this.dragState.childTasks.forEach((childTask) => {
      const childElement = getBarElement(this.chartContext, childTask.id);
      if (childElement) {
        const diff = parentCalculatedLeft - this.dragState.initialLeft;
        childElement.style.left = `${childTask.left + diff}px`;
        const childNewStart = dayjs(childTask.startTime).add(daysMoved, "day").format(this.options.inputDateFormat);
        const childNewEnd = childTask.endTime ? dayjs(childTask.endTime).add(daysMoved, "day").format(this.options.inputDateFormat) : null;
        this.dataManager.updateDependencyArrows(childTask.id, this.chartContext);
        onUpdate == null ? void 0 : onUpdate(childTask.id, {
          endTime: childNewEnd,
          startTime: childNewStart
        });
      }
    });
  }
  updateTaskPosition(element, calculatedLeft, daysMoved, onUpdate) {
    element.style.left = `${calculatedLeft}px`;
    const newStart = dayjs(this.task.startTime).add(daysMoved, "day").format(this.options.inputDateFormat);
    const newEnd = dayjs(this.task.endTime).add(daysMoved, "day").format(this.options.inputDateFormat);
    this.dataManager.updateDependencyArrows(this.task.id, this.chartContext);
    onUpdate == null ? void 0 : onUpdate(this.task.id, { endTime: newEnd, startTime: newStart });
  }
  makeDraggable(barElement, onUpdate) {
    const handleMouseDown = this.createMouseDownHandler(barElement);
    const handleMouseMove = this.createMouseMoveHandler(barElement);
    const handleMouseUp = this.createMouseUpHandler(barElement, onUpdate);
    barElement.addEventListener("mousedown", handleMouseDown);
    this.chartContext.addEventListener("mousemove", handleMouseMove);
    this.chartContext.addEventListener("mouseup", handleMouseUp);
    return () => {
      barElement.removeEventListener("mousedown", handleMouseDown);
      this.chartContext.removeEventListener("mousemove", handleMouseMove);
      this.chartContext.removeEventListener("mouseup", handleMouseUp);
    };
  }
}
class BarResizeManager {
  constructor(taskId, options, viewMode, chartContext, dataManager) {
    this.taskId = taskId;
    this.options = options;
    this.chartContext = chartContext;
    this.dataManager = dataManager;
    this.interactionState = {
      daysPerPixel: 0,
      initialLeft: 0,
      initialPosition: 0,
      initialWidth: 0,
      isResizing: false,
      parentWidth: 0,
      parentX1: 0,
      parentX2: 0,
      resizeHandle: null,
      startX: 0
    };
    this.interactionState.daysPerPixel = getPixelsPerDayForUnit(
      this.dataManager.getTaskById(taskId).startTime,
      viewMode
    );
  }
  createMouseMoveHandler(barElement) {
    return (e) => {
      if (!this.interactionState.isResizing)
        return;
      requestAnimationFrame(() => {
        const dx2 = e.clientX - this.interactionState.startX;
        const { daysPerPixel, parentX1, parentX2, resizeHandle } = this.interactionState;
        const currentLeft = parseInt(barElement.style.left) || 0;
        const currentWidth = parseInt(barElement.style.width) || 0;
        if (resizeHandle === "left") {
          const newLeft = Math.max(parentX1, Math.min(parentX2 - daysPerPixel, currentLeft + dx2));
          const newWidth = currentWidth - (newLeft - currentLeft);
          if (newWidth >= daysPerPixel) {
            barElement.style.left = `${newLeft}px`;
            barElement.style.width = `${newWidth}px`;
          }
        } else {
          const minWidth = daysPerPixel;
          const maxWidth = parentX2 - currentLeft;
          const newWidth = Math.max(minWidth, Math.min(maxWidth, currentWidth + dx2));
          barElement.style.width = `${newWidth}px`;
        }
        this.dataManager.updateDependencyArrows(this.task.id, this.chartContext);
        this.interactionState.startX = e.clientX;
      });
    };
  }
  createMouseUpHandler(barElement, onUpdate) {
    return (e) => {
      if (!this.interactionState.isResizing)
        return;
      barElement.classList.remove("resizing");
      const { daysPerPixel, initialLeft, initialPosition, initialWidth, parentX1, parentX2, resizeHandle } = this.interactionState;
      const dx2 = e.clientX - initialPosition;
      if (resizeHandle === "left") {
        let daysChange = Math.round(dx2 / daysPerPixel);
        let calculatedLeft = initialLeft + daysChange * daysPerPixel;
        if (dx2 < 0 && calculatedLeft <= parentX1) {
          daysChange = Math.round((parentX1 - initialLeft) / daysPerPixel);
          calculatedLeft = parentX1;
        }
        let calculatedWidth = initialWidth - daysChange * daysPerPixel;
        if (calculatedWidth < daysPerPixel) {
          calculatedWidth = daysPerPixel;
          calculatedLeft = initialLeft + initialWidth - daysPerPixel;
          daysChange = Math.round((calculatedLeft - initialLeft) / daysPerPixel);
        }
        barElement.style.left = `${calculatedLeft}px`;
        barElement.style.width = `${calculatedWidth}px`;
        const newStart = dayjs(this.task.startTime).add(daysChange, "day").format(this.options.inputDateFormat);
        onUpdate == null ? void 0 : onUpdate(this.task.id, { startTime: newStart });
      } else {
        let daysWidth = Math.round(dx2 / daysPerPixel);
        let calculatedWidth = initialWidth + daysWidth * daysPerPixel;
        if (calculatedWidth < daysPerPixel) {
          calculatedWidth = daysPerPixel;
          daysWidth = Math.round((calculatedWidth - initialWidth) / daysPerPixel);
        } else if (initialLeft + calculatedWidth > parentX2) {
          calculatedWidth = parentX2 - initialLeft;
          daysWidth = Math.round((calculatedWidth - initialWidth) / daysPerPixel);
        }
        barElement.style.width = `${calculatedWidth}px`;
        const newEnd = dayjs(this.task.endTime).add(daysWidth, "day").format(this.options.inputDateFormat);
        onUpdate == null ? void 0 : onUpdate(this.task.id, { endTime: newEnd });
      }
      this.dataManager.updateDependencyArrows(this.task.id, this.chartContext);
      this.interactionState = {
        ...this.interactionState,
        isResizing: false,
        resizeHandle: null
      };
    };
  }
  createResizeMouseDownHandler(barElement) {
    return (e, handle) => {
      var _a;
      e.stopPropagation();
      this.task = this.dataManager.getTaskById(this.taskId);
      this.interactionState = {
        ...this.interactionState,
        initialLeft: parseInt(barElement.style.left) || 0,
        initialPosition: e.clientX,
        initialWidth: parseInt(barElement.style.width) || 0,
        isResizing: true,
        resizeHandle: handle,
        startX: e.clientX
      };
      barElement.classList.add("resizing");
      const parentElement = getBarElement(this.chartContext, this.task.parentId);
      this.interactionState.parentX2 = ((_a = this.chartContext.querySelector(".timeline-body")) == null ? void 0 : _a.clientWidth) || 0;
      if (parentElement) {
        this.interactionState.parentX1 = parseInt(parentElement.style.left) || 0;
        this.interactionState.parentX2 = this.interactionState.parentX1 + parseInt(parentElement.style.width) || 0;
      }
    };
  }
  makeResizable(barElement, onUpdate) {
    const leftHandle = barElement.querySelector(".handle-left");
    const rightHandle = barElement.querySelector(".handle-right");
    const handleResizeMouseDown = this.createResizeMouseDownHandler(barElement);
    const handleMouseMove = this.createMouseMoveHandler(barElement);
    const handleMouseUp = this.createMouseUpHandler(barElement, onUpdate);
    leftHandle == null ? void 0 : leftHandle.addEventListener("mousedown", (e) => handleResizeMouseDown(e, "left"));
    rightHandle == null ? void 0 : rightHandle.addEventListener("mousedown", (e) => handleResizeMouseDown(e, "right"));
    this.chartContext.addEventListener("mousemove", handleMouseMove);
    this.chartContext.addEventListener("mouseup", handleMouseUp);
    return () => {
      leftHandle == null ? void 0 : leftHandle.removeEventListener("mousedown", (e) => handleResizeMouseDown(e, "left"));
      rightHandle == null ? void 0 : rightHandle.removeEventListener("mousedown", (e) => handleResizeMouseDown(e, "right"));
      this.chartContext.removeEventListener("mousemove", handleMouseMove);
      this.chartContext.removeEventListener("mouseup", handleMouseUp);
    };
  }
}
class Dialog {
  constructor(chartContext, options) {
    this.chartContext = chartContext;
    this.options = options;
    this.overlay = null;
    this.keydownHandler = null;
    this.clickOutsideHandler = null;
    this.createDialog();
    this.setupEventListeners();
  }
  createDialog() {
    const chartInstanceId = this.chartContext.getInstanceId();
    const existingContainer = this.chartContext.getElementById(`${this.options.id}-container`);
    if (existingContainer) {
      this.container = existingContainer;
      const dialog2 = this.container.querySelector(".gantt-dialog");
      this.updateDialogContent(dialog2);
      return;
    }
    this.container = this.chartContext.createElement("div");
    this.container.id = `${this.options.id}-container`;
    this.container.className = "gantt-dialog-container";
    this.container.setAttribute("role", "dialog");
    this.container.setAttribute("aria-modal", "true");
    this.container.setAttribute("aria-labelledby", `${this.options.id}-title`);
    this.container.setAttribute("data-chart-instance", chartInstanceId);
    if (this.options.modal) {
      this.overlay = this.chartContext.createElement("div");
      this.overlay.className = "dialog-overlay";
      this.container.appendChild(this.overlay);
    }
    const dialog = this.chartContext.createElement("div");
    dialog.id = this.options.id;
    dialog.className = "gantt-dialog";
    this.createDialogStructure(dialog);
    if (this.options.width) {
      dialog.style.width = this.options.width;
    }
    if (this.options.height) {
      dialog.style.height = this.options.height;
    }
    this.container.appendChild(dialog);
    if (this.options.positionRelativeToChart !== false) {
      this.positionRelativeToChart();
    }
    const appendTarget = this.options.positionRelativeToChart !== false ? this.chartContext.getChartContainer() : this.chartContext.getAppendContainer();
    appendTarget.appendChild(this.container);
  }
  createDialogStructure(dialog) {
    dialog.innerHTML = `
    <div class="dialog-header">
      <h2 id="${this.options.id}-title-${this.chartContext.getInstanceId()}" class="dialog-title">${this.options.title || ""}</h2>
      <button class="dialog-close" aria-label="Close dialog" type="button">&times;</button>
    </div>
    <div class="dialog-content"></div>
  `;
    this.updateDialogContent(dialog);
  }
  /**
   * Position dialog relative to the chart container
   */
  positionRelativeToChart() {
    const chartContainer = this.chartContext.getChartContainer();
    if (chartContainer) {
      const computedStyle = window.getComputedStyle(chartContainer);
      if (computedStyle.position === "static") {
        chartContainer.style.position = "relative";
      }
    }
    this.container.style.position = "absolute";
    this.container.style.top = "0";
    this.container.style.left = "0";
    this.container.style.width = "100%";
    this.container.style.height = "100%";
    this.container.style.zIndex = "999";
  }
  setupEventListeners() {
    const closeButton = this.container.querySelector(".dialog-close");
    closeButton == null ? void 0 : closeButton.addEventListener("click", () => this.hide());
    if (this.options.closeOnEscape) {
      this.keydownHandler = (e) => {
        if (e.key === "Escape" && this.isVisible()) {
          e.preventDefault();
          this.hide();
        }
      };
      this.chartContext.addEventListener("keydown", this.keydownHandler);
    }
    if (this.options.closeOnClickOutside && this.overlay) {
      this.clickOutsideHandler = (e) => {
        if (e.target === this.overlay) {
          this.hide();
        }
      };
      this.overlay.addEventListener("click", this.clickOutsideHandler);
    }
    this.container.addEventListener("keydown", (e) => {
      if (e.key === "Tab" && this.isVisible()) {
        this.trapFocus(e);
      }
    });
  }
  trapFocus(e) {
    const focusableElements = this.container.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    const firstElement = focusableElements[0];
    const lastElement = focusableElements[focusableElements.length - 1];
    const activeElement = this.chartContext.getActiveElement();
    if (e.shiftKey) {
      if (activeElement === firstElement) {
        e.preventDefault();
        lastElement == null ? void 0 : lastElement.focus();
      }
    } else {
      if (activeElement === lastElement) {
        e.preventDefault();
        firstElement == null ? void 0 : firstElement.focus();
      }
    }
  }
  updateDialogContent(dialog) {
    const contentContainer = dialog.querySelector(".dialog-content");
    const titleElement = dialog.querySelector(".dialog-title");
    if (titleElement) {
      titleElement.textContent = this.options.title || "";
    }
    if (contentContainer) {
      contentContainer.innerHTML = "";
      if (typeof this.options.content === "string") {
        contentContainer.innerHTML = this.options.content;
      } else if (this.options.content instanceof HTMLElement) {
        contentContainer.appendChild(this.options.content);
      }
    }
  }
  cleanupEventListeners() {
    if (this.keydownHandler) {
      this.chartContext.removeEventListener("keydown", this.keydownHandler);
      this.keydownHandler = null;
    }
    if (this.clickOutsideHandler && this.overlay) {
      this.overlay.removeEventListener("click", this.clickOutsideHandler);
      this.clickOutsideHandler = null;
    }
  }
  destroy() {
    this.cleanupEventListeners();
    this.container.remove();
  }
  hide() {
    this.container.classList.remove("show", "animate");
    const previouslyFocused = this.chartContext.querySelector("[data-dialog-trigger]");
    previouslyFocused == null ? void 0 : previouslyFocused.focus();
  }
  isVisible() {
    return this.container.classList.contains("show");
  }
  setContent(content) {
    const contentContainer = this.container.querySelector(".dialog-content");
    if (contentContainer) {
      contentContainer.innerHTML = "";
      if (typeof content === "string") {
        contentContainer.innerHTML = content;
      } else {
        contentContainer.appendChild(content);
      }
    }
  }
  show() {
    const activeElement = this.chartContext.getActiveElement();
    activeElement == null ? void 0 : activeElement.setAttribute("data-dialog-trigger", "true");
    this.container.classList.add("show", "animate");
    const firstFocusable = this.container.querySelector(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    firstFocusable == null ? void 0 : firstFocusable.focus();
  }
}
const GanttEvents = {
  /**
   * emits when a task is being updated (before completion)
   */
  TASK_UPDATE: "taskUpdate",
  /**
   * emits when form validation fails
   */
  TASK_VALIDATION_ERROR: "taskValidationError",
  /**
   * emits after a task update completes successfully
   */
  TASK_UPDATE_SUCCESS: "taskUpdateSuccess",
  /**
   * emits when a task update fails
   */
  TASK_UPDATE_ERROR: "taskUpdateError"
};
class TaskForm {
  constructor(chartContext, dataManager, task, containerElement, onSubmit, dateFormat = "MM-DD-YYYY") {
    this.chartContext = chartContext;
    this.dataManager = dataManager;
    this.task = task;
    this.containerElement = containerElement;
    this.onSubmit = onSubmit;
    this.dateFormat = dateFormat;
    this.errors = [];
    this.submitButton = null;
    this.form = this.createForm();
  }
  emitEvent(eventName, detail) {
    const event = new CustomEvent(eventName, {
      detail,
      bubbles: true,
      composed: true,
      cancelable: false
    });
    this.containerElement.dispatchEvent(event);
  }
  clearError(field) {
    var _a;
    const input = this.form.querySelector(`[name="${field}"]`);
    const errorDiv = (_a = input.parentElement) == null ? void 0 : _a.querySelector(".form-error");
    errorDiv == null ? void 0 : errorDiv.remove();
    input.classList.remove("invalid");
    this.errors = this.errors.filter((error) => error.field !== field);
    this.updateSubmitButton();
  }
  createForm() {
    const form = this.chartContext.createElement("form");
    form.className = "task-form";
    const barColor = this.task.barBackgroundColor || "#87B7FE";
    const rowColor = this.task.rowBackgroundColor || "#FFFFFF";
    form.innerHTML = `
      <div class="form-group">
        <label for="name">Task Name</label>
        <input type="text" id="name" name="name" value="${this.task.name}">
      </div>
      
      <div class="form-group">
        <label for="startTime">Start Date</label>
        <input type="date" id="startTime" name="startTime" value="${this.formatDate(this.task.startTime)}">
      </div>
      
      <div class="form-group">
        <label for="endTime">End Date</label>
        <input type="date" id="endTime" name="endTime" value="${this.formatDate(this.task.endTime)}">
      </div>
      
      <div class="form-group">
        <label for="progress">Progress (%)</label>
        <input type="number" id="progress" name="progress" min="0" max="100" value="${this.task.progress}">
      </div>

      <div class="grid">
        <div class="form-group">
          <label for="barColor">Bar Color</label>
          <div class="color-picker-wrapper">
            <input type="color" id="barColor" name="barBackgroundColor" 
              value="${barColor}"
              title="Choose bar color">
            <span class="color-preview"></span>
          </div>
        </div>
        
        <div class="form-group">
          <label for="rowColor">Row Background Color</label>
          <div class="color-picker-wrapper">
            <input type="color" id="rowColor" name="rowBackgroundColor" 
              value="${rowColor}"
              title="Choose row color">
            <span class="color-preview"></span>
          </div>
        </div>
      </div>
      
      <div class="form-actions">
        <button type="submit" class="btn-primary">Update</button>
      </div>
    `;
    form.addEventListener("submit", this.handleSubmit.bind(this));
    this.setupFieldValidation(form);
    return form;
  }
  formatDate(date) {
    return dayjs(date, this.dateFormat).format("YYYY-MM-DD");
  }
  handleSubmit(e) {
    e.preventDefault();
    if (this.errors.length > 0) {
      this.emitEvent(GanttEvents.TASK_VALIDATION_ERROR, {
        taskId: this.task.id,
        errors: this.errors,
        timestamp: Date.now()
      });
      return;
    }
    try {
      const formData = new FormData(this.form);
      const updatedTask = {
        ...this.task,
        barBackgroundColor: formData.get("barBackgroundColor"),
        endTime: dayjs(formData.get("endTime")).format(this.dateFormat),
        name: formData.get("name"),
        progress: Number(formData.get("progress")),
        rowBackgroundColor: formData.get("rowBackgroundColor"),
        startTime: dayjs(formData.get("startTime")).format(this.dateFormat)
      };
      const fullUpdatedTask = this.dataManager.getTaskById(this.task.id);
      this.emitEvent(GanttEvents.TASK_UPDATE, {
        taskId: this.task.id,
        updates: updatedTask,
        updatedTask: { ...fullUpdatedTask, ...updatedTask },
        timestamp: Date.now()
      });
      this.onSubmit(updatedTask);
      this.emitEvent(GanttEvents.TASK_UPDATE_SUCCESS, {
        taskId: this.task.id,
        updatedTask: { ...fullUpdatedTask, ...updatedTask },
        timestamp: Date.now()
      });
    } catch (error) {
      console.warn(`[TaskForm] Error updating task ${this.task.id}:`, error);
      this.emitEvent(GanttEvents.TASK_UPDATE_ERROR, {
        taskId: this.task.id,
        error: error instanceof Error ? error : new Error(String(error)),
        timestamp: Date.now()
      });
    }
  }
  setupFieldValidation(form) {
    const nameInput = form.querySelector('[name="name"]');
    const startInput = form.querySelector('[name="startTime"]');
    const endInput = form.querySelector('[name="endTime"]');
    const progressInput = form.querySelector('[name="progress"]');
    nameInput == null ? void 0 : nameInput.addEventListener("change", () => {
      const error = this.validateName(nameInput.value);
      if (error) {
        this.showError("name", error);
      } else {
        this.clearError("name");
      }
    });
    const validateDateInputs = () => {
      const { endError, startError } = this.validateDates(startInput.value, endInput.value);
      if (startError) {
        this.showError("startTime", startError);
      } else {
        this.clearError("startTime");
      }
      if (endError) {
        this.showError("endTime", endError);
      } else {
        this.clearError("endTime");
      }
    };
    startInput == null ? void 0 : startInput.addEventListener("change", validateDateInputs);
    endInput == null ? void 0 : endInput.addEventListener("change", validateDateInputs);
    progressInput == null ? void 0 : progressInput.addEventListener("change", () => {
      const error = this.validateProgress(Number(progressInput.value));
      if (error) {
        this.showError("progress", error);
      } else {
        this.clearError("progress");
      }
    });
  }
  showError(field, message) {
    var _a, _b;
    const input = this.form.querySelector(`[name="${field}"]`);
    const errorDiv = this.chartContext.createElement("div");
    errorDiv.className = "form-error";
    errorDiv.textContent = message;
    const existingError = (_a = input.parentElement) == null ? void 0 : _a.querySelector(".form-error");
    existingError == null ? void 0 : existingError.remove();
    (_b = input.parentElement) == null ? void 0 : _b.appendChild(errorDiv);
    input.classList.add("invalid");
    this.errors.push({ field, message });
    this.updateSubmitButton();
  }
  updateSubmitButton() {
    if (!this.submitButton) {
      this.submitButton = this.form.querySelector(".btn-primary");
    }
    if (this.submitButton) {
      const hasErrors = this.errors.length > 0;
      this.submitButton.disabled = hasErrors;
      this.submitButton.classList.toggle("btn-disabled", hasErrors);
    }
  }
  validateDates(startTime, endTime) {
    const errors = { endError: null, startError: null };
    const start = dayjs(startTime);
    const end = dayjs(endTime);
    if (!startTime) {
      errors.startError = "Start date is required";
    }
    if (!endTime) {
      errors.endError = "End date is required";
    }
    if (start.isValid() && end.isValid() && end.isBefore(start)) {
      errors.endError = "End date must be after start date";
    }
    return errors;
  }
  validateName(name) {
    if (!name.trim()) {
      return "Task name is required";
    }
    return null;
  }
  validateProgress(progress) {
    if (!progress && progress !== 0) {
      return "Progress is required";
    }
    if (isNaN(progress) || progress < 0 || progress > 100) {
      return "Progress must be between 0 and 100";
    }
    return null;
  }
  getElement() {
    return this.form;
  }
}
class Bar {
  constructor(task, ganttStartDate, options, viewMode, index, chartContext, dataManager) {
    this.task = task;
    this.ganttStartDate = ganttStartDate;
    this.options = options;
    this.viewMode = viewMode;
    this.index = index;
    this.chartContext = chartContext;
    this.dataManager = dataManager;
    this.tooltipHandler = null;
  }
  static calculateWidth(task, viewMode, options) {
    const { barMargin, rowHeight } = options;
    if (task.type === TaskType.Milestone) {
      return (rowHeight - barMargin) / 2;
    }
    const startDate = dayjs(task.startTime);
    const endDate = dayjs(task.endTime);
    const diff = endDate.add(1, "days").diff(startDate, `${viewMode}s`, true);
    const width2 = diff * ColumnWidthByMode[viewMode];
    return width2;
  }
  static calculateX(task, ganttStartDate, viewMode, options) {
    const diff = dayjs(task.startTime).diff(ganttStartDate.startOf(viewMode), `${viewMode}s`, true);
    const xValue = diff * ColumnWidthByMode[viewMode];
    let margin = 0;
    if (task.type === TaskType.Milestone) {
      const { barMargin, rowHeight } = options;
      margin = (rowHeight - barMargin) / 4 * -1;
    }
    return xValue + margin;
  }
  calculateHeight() {
    const { barMargin, rowHeight } = this.options;
    if (this.task.type === TaskType.Milestone) {
      return (rowHeight - barMargin) / 2;
    }
    return rowHeight - barMargin * 2;
  }
  setupTooltip(barTimeline) {
    if (!this.options.enableTooltip) {
      return;
    }
    const {
      tooltipBGColor,
      tooltipBorderColor,
      fontColor,
      fontFamily,
      fontSize,
      fontWeight,
      tooltipId,
      tooltipTemplate,
      inputDateFormat
    } = this.options;
    let isHovering = false;
    let tooltipTimeout = null;
    const showTooltip = (event) => {
      isHovering = true;
      if (tooltipTimeout) {
        clearTimeout(tooltipTimeout);
        tooltipTimeout = null;
      }
      const { x: x2, y: y2 } = calculateCursorFollowingTooltip(
        event.clientX,
        event.clientY,
        300,
        // tooltip width
        120,
        // tooltip height
        5,
        // offset X - distance from cursor
        10
        // offset Y - distance from cursor
      );
      const content = tooltipTemplate(this.dataManager.getTaskById(this.task.id), inputDateFormat);
      const styles = getCursorFollowingTooltipStyles({
        bgColor: tooltipBGColor,
        borderColor: tooltipBorderColor,
        fontColor,
        fontFamily,
        fontSize,
        fontWeight,
        maxWidth: 300,
        padding: 0,
        x: x2,
        y: y2
      });
      updateTooltip(this.chartContext, tooltipId, styles, content);
    };
    const hideTooltip = () => {
      isHovering = false;
      tooltipTimeout = window.setTimeout(() => {
        if (!isHovering) {
          updateTooltip(this.chartContext, tooltipId);
        }
      }, 100);
    };
    barTimeline.addEventListener("mouseenter", showTooltip);
    barTimeline.addEventListener("mousemove", showTooltip);
    barTimeline.addEventListener("mouseleave", hideTooltip);
  }
  setupTaskEdit(barTimeline, onUpdate) {
    if (!this.options.enableTaskEdit)
      return;
    const chartInstanceId = this.chartContext.getInstanceId();
    barTimeline.addEventListener("dblclick", (event) => {
      event.stopPropagation();
      event.preventDefault();
      const task = this.dataManager.getTaskById(this.task.id);
      if (!task) {
        console.error(`[${chartInstanceId}] Task not found in dataManager: ${this.task.id}`);
        return;
      }
      const chartElement = this.chartContext.getChartContainer();
      const taskForm = new TaskForm(
        this.chartContext,
        this.dataManager,
        task,
        chartElement,
        (updatedTask) => {
          onUpdate == null ? void 0 : onUpdate(task.id, updatedTask);
          dialog.hide();
        },
        this.options.inputDateFormat
      );
      const dialogId = `taskDialog-${chartInstanceId}-${this.task.id}`;
      const dialog = new Dialog(this.chartContext, {
        closeOnClickOutside: false,
        closeOnEscape: true,
        content: taskForm.getElement(),
        id: dialogId,
        modal: true,
        title: `Edit Task: ${this.task.name}`,
        width: "400px",
        positionRelativeToChart: true
      });
      dialog.show();
    });
  }
  setupInteractions(barTimeline, onUpdate) {
    const { enableTaskDrag, enableTaskResize } = this.options;
    if (enableTaskDrag) {
      this.makeDraggable(barTimeline, onUpdate);
    }
    if (enableTaskResize && this.task.type === TaskType.Task) {
      const barHandleLeft = createBox(this.chartContext, { className: "bar-handle handle-left" });
      const barHandleRight = createBox(this.chartContext, { className: "bar-handle handle-right" });
      barTimeline.append(barHandleLeft, barHandleRight);
      this.makeResizable(barTimeline, onUpdate);
    }
  }
  drawBar(onUpdate = lodashExports.noop) {
    const { barBackgroundColor, barBorderRadius } = this.options;
    const barTimeline = createBox(this.chartContext, { className: "bar-timeline" });
    const barLabel = createBox(this.chartContext, { className: "bar-label", content: this.task.name });
    const barProgress = createBox(this.chartContext, { className: "bar-timeline-progress" });
    const taskBarColor = this.task.barBackgroundColor || barBackgroundColor;
    const barTimelineStyles = generateStyles(this.getBarStyles(taskBarColor));
    const barProgressStyles = generateStyles({
      backgroundColor: adjustColorBrightness(taskBarColor, -80),
      borderRadius: barBorderRadius,
      width: `${this.task.progress}%`
    });
    const chartInstanceId = this.chartContext.getInstanceId();
    barTimeline.setAttribute("data-taskid", this.task.id);
    barTimeline.setAttribute("data-chart-instance", chartInstanceId);
    barProgress.setAttribute("style", barProgressStyles);
    barTimeline.setAttribute("style", barTimelineStyles);
    barTimeline.setAttribute("role", "progressbar");
    barTimeline.setAttribute("aria-label", `${this.task.name}: ${this.task.progress}% complete`);
    barTimeline.setAttribute("aria-valuenow", this.task.progress.toString());
    barTimeline.setAttribute("aria-valuemin", "0");
    barTimeline.setAttribute("aria-valuemax", "100");
    barTimeline.setAttribute("tabindex", "0");
    if (this.task.type !== TaskType.Milestone) {
      barTimeline.append(barLabel);
    }
    barTimeline.append(barProgress);
    this.setupTaskEdit(barTimeline, onUpdate);
    this.setupTooltip(barTimeline);
    this.setupInteractions(barTimeline, onUpdate);
    barTimeline.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        barTimeline.dispatchEvent(new MouseEvent("dblclick", { bubbles: true }));
      }
    });
    return barTimeline;
  }
  getBarStyles(barBgColor) {
    const { barBackgroundColor, barBorderRadius, barMargin, barTextColor, rowHeight } = this.options;
    const left = Bar.calculateX(this.task, this.ganttStartDate, this.viewMode, this.options);
    const width2 = Bar.calculateWidth(this.task, this.viewMode, this.options);
    const height2 = this.calculateHeight();
    const effectiveBarColor = barBgColor || barBackgroundColor;
    if (this.task.type === TaskType.Milestone) {
      return {
        backgroundColor: adjustColorBrightness(effectiveBarColor, -80),
        borderRadius: "2px",
        color: barTextColor,
        height: `${height2}px`,
        left: `${left}px`,
        top: `${rowHeight / 3 - barMargin / 2 + this.index * rowHeight}px`,
        transform: "rotate(45deg)",
        width: `${width2}px`
      };
    }
    return {
      backgroundColor: effectiveBarColor,
      borderRadius: barBorderRadius,
      color: barTextColor,
      height: `${height2}px`,
      left: `${left}px`,
      top: `${barMargin + this.index * rowHeight}px`,
      width: `${width2}px`
    };
  }
  makeDraggable(barElement, onUpdate) {
    const dragManager = new BarDragManager(
      this.task.id,
      this.options,
      this.viewMode,
      this.chartContext,
      this.dataManager
    );
    dragManager.makeDraggable(barElement, onUpdate);
  }
  makeResizable(barElement, onUpdate) {
    const resizeManager = new BarResizeManager(
      this.task.id,
      this.options,
      this.viewMode,
      this.chartContext,
      this.dataManager
    );
    resizeManager.makeResizable(barElement, onUpdate);
  }
  cleanup() {
    if (this.tooltipHandler) {
      this.tooltipHandler.cleanup();
      this.tooltipHandler = null;
    }
  }
}
var ColumnKey = /* @__PURE__ */ ((ColumnKey2) => {
  ColumnKey2["Duration"] = "duration";
  ColumnKey2["EndTime"] = "endTime";
  ColumnKey2["Name"] = "name";
  ColumnKey2["Progress"] = "progress";
  ColumnKey2["StartTime"] = "startTime";
  return ColumnKey2;
})(ColumnKey || {});
const ColumnKeyTitleMap = {
  [
    "duration"
    /* Duration */
  ]: "Duration",
  [
    "name"
    /* Name */
  ]: "Task Name",
  [
    "progress"
    /* Progress */
  ]: "Progress",
  [
    "startTime"
    /* StartTime */
  ]: "Start"
};
const ColumnList = [
  {
    key: "name",
    title: ColumnKeyTitleMap[
      "name"
      /* Name */
    ],
    width: "160px"
  },
  {
    key: "startTime",
    title: ColumnKeyTitleMap[
      "startTime"
      /* StartTime */
    ],
    width: "100px"
  },
  {
    key: "duration",
    title: ColumnKeyTitleMap[
      "duration"
      /* Duration */
    ],
    width: "80px"
  },
  {
    key: "progress",
    title: ColumnKeyTitleMap[
      "progress"
      /* Progress */
    ],
    width: "80px"
  }
];
function getTaskTextByColumn(task, columnKey, inputDateFormat) {
  const taskColumnValue = task[columnKey];
  if (columnKey === "startTime") {
    return dayjs(taskColumnValue, inputDateFormat).format(inputDateFormat);
  }
  if (columnKey === "endTime") {
    return dayjs(taskColumnValue, inputDateFormat).format(inputDateFormat);
  }
  if (columnKey === "duration") {
    const startDate = dayjs(task[
      "startTime"
      /* StartTime */
    ], inputDateFormat);
    const endDate = dayjs(task[
      "endTime"
      /* EndTime */
    ], inputDateFormat);
    if (!task[
      "endTime"
      /* EndTime */
    ]) {
      return "0 d";
    }
    return `${endDate.diff(startDate, "d") + 1} d`;
  }
  if (columnKey === "progress") {
    const progress = task.progress ?? 0;
    return `${progress}%`;
  }
  return taskColumnValue;
}
function getTaskRowElement(context, taskId) {
  return context.querySelector(`.tasks-container .tasks-data-row[data-taskid="${taskId}"]`);
}
function getRowBackgroundColor(index, rowBackgroundColors) {
  if (!(rowBackgroundColors == null ? void 0 : rowBackgroundColors.length))
    return "transparent";
  return rowBackgroundColors[index % rowBackgroundColors.length];
}
function setTaskRowBackgroundColor(context, taskId, bgColor) {
  const taskElement = getTaskRowElement(context, taskId);
  const timelineElement = getBarRowElement(context, taskId);
  if (taskElement) {
    taskElement.style.backgroundColor = bgColor;
  }
  if (timelineElement) {
    timelineElement.style.backgroundColor = bgColor;
  }
}
const getTaskElements = (context, taskId) => {
  const taskRow = getTaskRowElement(context, taskId);
  const taskBar = getBarElement(context, taskId);
  const taskBarRow = getBarRowElement(context, taskId);
  return {
    taskBar,
    taskBarRow,
    taskRow
  };
};
const updateTaskInUI = (context, dataManager, taskId, updates, options, viewMode, ganttStartDate) => {
  const { taskBar, taskBarRow, taskRow } = getTaskElements(context, taskId);
  if (!taskRow || !taskBar)
    return;
  const updatedTask = dataManager.updateTask(taskId, updates);
  if (!updatedTask)
    return;
  const cells = taskRow.querySelectorAll("td");
  cells.forEach((cell) => {
    const columnId = cell.getAttribute("data-columnid");
    if (columnId) {
      cell.innerHTML = getTaskTextByColumn(updatedTask, columnId, options.inputDateFormat);
      if (columnId === "name") {
        if (dataManager.hasChildren(taskId)) {
          const chevron = context.createElement("span");
          chevron.className = `task-toggle-icon ${updatedTask.collapsed ? "collapsed" : "expanded"}`;
          chevron.addEventListener("click", () => {
            dataManager.toggleTask(taskId);
          });
          cell.prepend(chevron);
        } else {
          const spacer = context.createElement("span");
          spacer.className = "task-toggle-icon-blank";
          cell.prepend(spacer);
        }
      }
    }
  });
  if (updates.rowBackgroundColor && taskBarRow) {
    taskRow.style.backgroundColor = updates.rowBackgroundColor;
    taskBarRow.style.backgroundColor = updates.rowBackgroundColor;
  }
  if (updates.barBackgroundColor) {
    taskBar.style.backgroundColor = updates.barBackgroundColor;
  }
  if (updates.startTime || updates.endTime) {
    const left = Bar.calculateX(updatedTask, ganttStartDate, viewMode, options);
    const width2 = Bar.calculateWidth(updatedTask, viewMode, options);
    taskBar.style.left = `${left}px`;
    taskBar.style.width = `${width2}px`;
  }
  if (updates.progress !== void 0) {
    const progressBar = taskBar.querySelector(".bar-timeline-progress");
    if (progressBar) {
      progressBar.style.width = `${updates.progress}%`;
    }
    if (updates.barBackgroundColor) {
      progressBar.style.backgroundColor = adjustColorBrightness(updates.barBackgroundColor, -80);
    }
  }
  if (updates.name) {
    const label = taskBar.querySelector(".bar-label");
    if (label) {
      label.textContent = updates.name;
    }
  }
  dataManager.updateDependencyArrows(taskId, context);
};
var TaskType = /* @__PURE__ */ ((TaskType2) => {
  TaskType2["Milestone"] = "milestone";
  TaskType2["Task"] = "task";
  return TaskType2;
})(TaskType || {});
class Tasks {
  constructor(options, chartContext, dataManager) {
    this.options = options;
    this.chartContext = chartContext;
    this.dataManager = dataManager;
  }
  generateBody(tasks, reRender) {
    const bodyContainer = createBox(this.chartContext, { className: "tasks-data-container" });
    this.generateRows(tasks, bodyContainer, reRender);
    return bodyContainer;
  }
  generateHeader(headerList) {
    const headerContainer = createBox(this.chartContext, { className: "tasks-header" });
    const headerRow = createBox(this.chartContext, { className: "tasks-header-row" });
    const { headerBackground, rowHeight, fontColor } = this.options;
    const chartInstanceId = this.chartContext.getInstanceId();
    headerContainer.setAttribute("data-chart-instance", chartInstanceId);
    forEach(headerList, (header, index) => {
      const columnDef = ColumnList[index];
      const headerCell = createBox(this.chartContext, {
        className: "tasks-header-cell",
        content: header
      });
      headerCell.style.height = `${rowHeight * 2}px`;
      headerCell.style.color = fontColor;
      if (columnDef == null ? void 0 : columnDef.width) {
        headerCell.style.width = columnDef.width;
        headerCell.style.minWidth = columnDef.width;
        headerCell.style.flexBasis = columnDef.width;
      }
      headerRow.append(headerCell);
    });
    headerContainer.append(headerRow);
    headerContainer.style.background = headerBackground;
    return headerContainer;
  }
  generateRow(task, reRender) {
    const row = createBox(this.chartContext, { className: "tasks-data-row" });
    const { rowHeight, fontColor } = this.options;
    const chartInstanceId = this.chartContext.getInstanceId();
    row.setAttribute("data-taskid", task.id);
    row.setAttribute("data-chart-instance", chartInstanceId);
    row.style.height = `${rowHeight}px`;
    forEach(ColumnList, ({ key, width: width2 }) => {
      const cell = createBox(this.chartContext, {
        className: "tasks-data-cell",
        content: getTaskTextByColumn(task, key, this.options.inputDateFormat)
      });
      cell.setAttribute("data-columnid", key);
      cell.setAttribute("data-chart-instance", chartInstanceId);
      cell.style.height = `${rowHeight}px`;
      cell.style.color = fontColor;
      if (width2) {
        cell.style.width = width2;
        cell.style.minWidth = width2;
        cell.style.flexBasis = width2;
      }
      if (key === ColumnKey.Name) {
        cell.style.paddingLeft = `${task.level * 15}px`;
        cell.style.textAlign = "left";
        cell.innerHTML = "";
        if (this.dataManager.hasChildren(task.id)) {
          const chevron = createElement(this.chartContext, "span", {
            className: `task-toggle-icon ${task.collapsed ? "collapsed" : "expanded"}`
          });
          chevron.addEventListener("click", () => {
            this.dataManager.toggleTask(task.id);
            reRender();
          });
          cell.append(chevron);
        } else {
          const spacer = createElement(this.chartContext, "span", {
            className: "task-toggle-icon-blank"
          });
          cell.append(spacer);
        }
        const nameSpan = createElement(this.chartContext, "span", {
          textContent: task.name
        });
        cell.append(nameSpan);
      }
      row.append(cell);
    });
    return row;
  }
  generateRows(tasks, bodyContainer, reRender) {
    forEach(tasks, (task) => {
      const row = this.generateRow(task, reRender);
      bodyContainer.appendChild(row);
    });
    this.fillEmptyRows(bodyContainer, tasks.length, reRender);
    return bodyContainer;
  }
  fillEmptyRows(bodyContainer, existingRowCount, reRender) {
    const ganttContainer = this.chartContext.querySelector(".gantt-container");
    if (!ganttContainer)
      return;
    const containerHeight = ganttContainer.clientHeight;
    const rowHeight = this.options.rowHeight;
    const headerHeight = rowHeight * 2;
    const availableHeight = containerHeight - headerHeight;
    const totalRowsNeeded = Math.floor(availableHeight / rowHeight);
    const emptyRowsNeeded = Math.max(0, totalRowsNeeded - existingRowCount);
    for (let i = 0; i < emptyRowsNeeded; i++) {
      const emptyRow = this.generateEmptyRow(i);
      bodyContainer.appendChild(emptyRow);
    }
  }
  generateEmptyRow(index) {
    const row = createBox(this.chartContext, { className: "tasks-data-row tasks-empty-row" });
    const { rowHeight, fontColor } = this.options;
    const chartInstanceId = this.chartContext.getInstanceId();
    row.setAttribute("data-taskid", `empty-${index}`);
    row.setAttribute("data-chart-instance", chartInstanceId);
    row.style.height = `${rowHeight}px`;
    forEach(ColumnList, ({ key, width: width2 }) => {
      const cell = createBox(this.chartContext, {
        className: "tasks-data-cell",
        content: ""
      });
      cell.setAttribute("data-columnid", key);
      cell.setAttribute("data-chart-instance", chartInstanceId);
      cell.style.height = `${rowHeight}px`;
      cell.style.color = fontColor;
      if (width2) {
        cell.style.width = width2;
        cell.style.minWidth = width2;
        cell.style.flexBasis = width2;
      }
      row.append(cell);
    });
    return row;
  }
  render(reRender) {
    const headerRow = this.generateHeader(ColumnList.map((col) => col.title));
    const dataRows = this.generateBody(this.dataManager.getFlatVisibleTasks(), reRender);
    return [headerRow, dataRows];
  }
}
const parentNodeKey = "root";
class DataManager {
  constructor(tasks = []) {
    this.dependencies = [];
    this.taskMap = {};
    this.taskTree = {};
    this.arrowLinkInstanceId = null;
    this.setTasks(tasks);
  }
  buildTaskTree(tasks) {
    const taskTree = {
      [parentNodeKey]: []
    };
    tasks.forEach((task) => {
      var _a;
      this.taskMap[task.id] = task;
      if (!taskTree[task.id])
        taskTree[task.id] = [];
      if (!taskTree[task.parentId])
        taskTree[task.parentId] = [];
      if (task.dependency) {
        this.addDependency(task.dependency, task.id);
      }
      if (task.parentId) {
        (_a = taskTree[task.parentId]) == null ? void 0 : _a.push(task.id);
      } else {
        taskTree[parentNodeKey].push(task.id);
      }
    });
    this.taskTree = taskTree;
  }
  processLevel() {
    const traverseTasks = (tasks, level) => {
      tasks.forEach((task) => {
        this.taskMap[task.id] = {
          ...task,
          level
        };
        const children = this.taskTree[task.id].map((childId) => this.taskMap[childId]);
        if (Array.isArray(children)) {
          traverseTasks(children, level + 1);
        }
      });
    };
    traverseTasks(
      this.getTasks().filter((task) => !task.parentId),
      1
    );
  }
  sortTasksByDate(field) {
    const sortFunction = (a, b) => {
      return new Date(a[field]).getTime() - new Date(b[field]).getTime();
    };
    const sortRecursively = (tasks, parentId) => {
      tasks.sort(sortFunction);
      if (parentId) {
        this.taskTree[parentId] = tasks.map((t) => t.id);
      }
      tasks.forEach((task) => {
        const children = this.taskTree[task.id].map((id) => this.getTaskById(id));
        if (children && children.length > 0) {
          sortRecursively(children, task.id);
        }
      });
    };
    const nodes = this.taskTree[parentNodeKey].map((id) => this.getTaskById(id));
    sortRecursively(nodes, parentNodeKey);
  }
  validateTask(taskInput) {
    if (taskInput.type === "milestone") {
      if (!taskInput.id || !taskInput.startTime) {
        throw new Error("Milestone must have an id and start date");
      }
    } else if (!taskInput.id || !taskInput.startTime || !taskInput.endTime) {
      throw new Error("Task must have an id, start, and end date");
    }
    return {
      ...taskInput,
      endTime: taskInput.endTime || taskInput.startTime,
      progress: taskInput.progress ?? 0,
      type: taskInput.type ?? TaskType.Task,
      level: 1
    };
  }
  addDependency(fromId, toId, type = "FS") {
    this.dependencies.push({ fromId, toId, type });
  }
  addTask(taskInput) {
    const validatedTask = this.validateTask(taskInput);
    this.taskMap[validatedTask.id] = validatedTask;
    this.buildTaskTree(this.getTasks());
  }
  calculateProgress() {
    const tasks = this.getTasks();
    const totalDuration = tasks.reduce((sum, task) => sum + dayjs(task.endTime).diff(dayjs(task.startTime), "day"), 0);
    const completedDuration = tasks.reduce(
      (sum, task) => sum + task.progress / 100 * dayjs(task.endTime).diff(dayjs(task.startTime), "day"),
      0
    );
    return totalDuration ? completedDuration / totalDuration * 100 : 0;
  }
  getDateRange(add = 0, viewMode) {
    const tasks = this.getTasks();
    const startDates = tasks.map((task) => dayjs(task.startTime));
    const endDates = tasks.filter((task) => !!task.endTime).map((task) => dayjs(task.endTime));
    return [dayjs.min(startDates), dayjs.max(endDates).add(add, viewMode)];
  }
  getFlatSortedTasks(tasks, getAll = false) {
    let flatTasks = [];
    tasks.forEach((task) => {
      flatTasks.push(task);
      const children = this.taskTree[task.id].map((childId) => this.taskMap[childId]);
      if ((getAll || !task.collapsed) && Array.isArray(children)) {
        flatTasks = flatTasks.concat(this.getFlatSortedTasks(children, getAll));
      }
    });
    return flatTasks;
  }
  getFlatTasks() {
    return this.getFlatSortedTasks(
      this.taskTree[parentNodeKey].map((id) => this.getTaskById(id)),
      true
    );
  }
  getFlatVisibleTasks() {
    return this.getFlatSortedTasks(this.taskTree[parentNodeKey].map((id) => this.getTaskById(id)));
  }
  getNestedChildTasks(taskId, visibleOnly = false) {
    const result = [];
    const collectChildren = (id) => {
      var _a;
      if (visibleOnly && ((_a = this.taskMap[id]) == null ? void 0 : _a.collapsed)) {
        return;
      }
      const childIds = this.taskTree[id] || [];
      childIds.forEach((childId) => {
        const childTask = this.taskMap[childId];
        if (childTask) {
          result.push(childTask);
          collectChildren(childId);
        }
      });
    };
    collectChildren(taskId);
    return result;
  }
  getTaskById(id) {
    return this.taskMap[id];
  }
  getTaskDependencies(taskId) {
    return {
      incoming: this.dependencies.filter((dep) => dep.toId === taskId),
      outgoing: this.dependencies.filter((dep) => dep.fromId === taskId)
    };
  }
  getTasks() {
    return Object.values(this.taskMap);
  }
  getTopParentTasks() {
    return Object.values(this.taskMap).filter((task) => task.parentId === void 0 && task.type === TaskType.Task);
  }
  hasChildren(id) {
    return this.taskTree[id].length > 0;
  }
  removeDependency(fromId, toId) {
    this.dependencies = this.dependencies.filter((dep) => !(dep.fromId === fromId && dep.toId === toId));
  }
  removeTask(id) {
    this.taskMap[id] = void 0;
    this.buildTaskTree(Object.values(this.taskMap));
  }
  setTasks(taskInputs) {
    if (!Array.isArray(taskInputs)) {
      throw new Error("Tasks must be an array");
    }
    const validatedTasks = taskInputs.map((input) => this.validateTask(input));
    this.taskMap = {};
    this.dependencies = [];
    this.buildTaskTree(validatedTasks);
    this.sortTasksByDate("startTime");
    this.processLevel();
  }
  toggleTask(id) {
    const task = this.getTaskById(id);
    this.taskMap[id] = {
      ...task,
      collapsed: !task.collapsed
    };
  }
  setArrowLinkInstanceId(instanceId) {
    this.arrowLinkInstanceId = instanceId;
  }
  updateDependencyArrows(taskId, chartContext) {
    const deps = this.getTaskDependencies(taskId);
    const allDeps = [...deps.incoming, ...deps.outgoing];
    allDeps.forEach((dependency) => {
      const fromTask = this.getTaskById(dependency.fromId);
      const toTask = this.getTaskById(dependency.toId);
      if (fromTask && toTask) {
        const chartInstanceId = (chartContext == null ? void 0 : chartContext.getInstanceId()) || "unknown";
        const eventDetail = {
          fromId: dependency.fromId,
          toId: dependency.toId,
          type: dependency.type,
          chartInstanceId,
          arrowLinkInstanceId: this.arrowLinkInstanceId
        };
        const event = new CustomEvent("dependency-arrow-update", {
          detail: eventDetail,
          bubbles: false,
          cancelable: false
        });
        if (chartContext) {
          chartContext.dispatchEvent(event);
        } else {
          console.warn(`[${chartInstanceId}] No chartContext provided for dependency arrow update`);
          document.dispatchEvent(event);
        }
      }
    });
  }
  updateTask(id, updates) {
    const task = this.taskMap[id];
    if (!task) {
      throw new Error(`Task with id "${id}" not found`);
    }
    const updatedTask = this.validateTask({ ...task, ...updates });
    this.taskMap[id] = updatedTask;
    this.buildTaskTree(this.getTasks());
    return updatedTask;
  }
}
const MonthsInQuarter = {
  1: ["Jan", "Feb", "Mar"],
  2: ["Apr", "May", "Jun"],
  3: ["Jul", "Aug", "Sep"],
  4: ["Oct", "Nov", "Dec"]
};
function getRange(startDate, endDate, type) {
  const dates = [];
  let currDate = startDate.startOf(type);
  const lastDate = endDate.startOf(type);
  while (currDate.isSameOrBefore(lastDate)) {
    dates.push(currDate);
    currDate = currDate.add(1, `${type}s`);
  }
  return dates;
}
function getDaysInRange(startDate, endDate) {
  return getRange(startDate, endDate, ViewMode.Day);
}
function getWeeksInRange(startDate, endDate) {
  return getRange(startDate, endDate, ViewMode.Week);
}
function getMonthsInRange(startDate, endDate) {
  return getRange(startDate, endDate, ViewMode.Month);
}
function getQuartersInRange(startDate, endDate) {
  const dates = [];
  let currDate = startDate.startOf(ViewMode.Quarter);
  const lastDate = endDate.startOf(ViewMode.Quarter);
  while (currDate.isSameOrBefore(lastDate)) {
    dates.push(currDate);
    currDate = currDate.add(1, `${ViewMode.Quarter}s`);
  }
  return dates;
}
function getYearsInRange(startDate, endDate) {
  return getRange(startDate, endDate, ViewMode.Year);
}
function getDayModeData(startDate, endDate, columnWidth) {
  const days = getDaysInRange(startDate, endDate);
  const months = getMonthsInRange(startDate, endDate);
  const daysString = days.map((d) => d.format("DD MMM"));
  const headerObject = months.map((month, index) => {
    if (index === 0) {
      return {
        data: month.format("MMM YYYY"),
        width: (month.daysInMonth() - startDate.date() + 1) * columnWidth
      };
    }
    if (index === months.length - 1) {
      return {
        data: month.format("MMM YYYY"),
        width: (month.daysInMonth() - (month.daysInMonth() - endDate.date())) * columnWidth
      };
    }
    return {
      data: month.format("MMM YYYY"),
      width: month.daysInMonth() * columnWidth
    };
  });
  return [headerObject, daysString];
}
function getWeekModeData(startDate, endDate, columnWidth) {
  const weeks = getWeeksInRange(startDate, endDate);
  const months = getMonthsInRange(startDate, endDate);
  const weeksString = weeks.map((d) => `#${d.week()}, ${d.day(0).format("DD MMM")} - ${d.day(6).format("DD MMM")}`);
  const headerObject = months.map((month, index) => {
    if (index === 0) {
      const dateDiff2 = month.endOf("month").date() - startDate.date() + 1;
      return {
        data: month.format("MMMM, YYYY"),
        width: (dateDiff2 < 7 ? 7 : dateDiff2) / 7 * columnWidth
      };
    }
    if (index === months.length - 1) {
      const dateDiff2 = endDate.date() - month.startOf("month").date() + 1;
      return {
        data: month.format("MMMM, YYYY"),
        width: (dateDiff2 < 7 ? 7 : dateDiff2) / 7 * columnWidth
      };
    }
    const dateDiff = month.endOf("month").date() - month.startOf("month").date() + 1;
    return {
      data: month.format("MMMM, YYYY"),
      width: (dateDiff < 7 ? 7 : dateDiff) / 7 * columnWidth
    };
  });
  return [headerObject, weeksString];
}
function getMonthModeData(startDate, endDate, columnWidth) {
  const months = getMonthsInRange(startDate, endDate);
  const years = getYearsInRange(startDate, endDate);
  const monthsString = months.map((d) => d.format("MMMM"));
  const headerObject = years.map((year, index) => {
    if (index === 0) {
      return {
        data: year.format("YYYY"),
        width: (12 - startDate.month()) * columnWidth
      };
    }
    if (index === years.length - 1) {
      return {
        data: year.format("YYYY"),
        width: (endDate.month() + 1) * columnWidth
      };
    }
    return {
      data: year.format("YYYY"),
      width: 12 * columnWidth
    };
  });
  return [headerObject, monthsString];
}
function getQuarterModeData(startDate, endDate, columnWidth) {
  const quarters = getQuartersInRange(startDate, endDate);
  const years = getYearsInRange(startDate, endDate);
  const monthsString = quarters.map((d) => {
    const qMonths = MonthsInQuarter[d.quarter()];
    return `#${d.quarter()} ${qMonths[0]}-${qMonths[2]}`;
  });
  const headerObject = years.map((year, index) => {
    if (index === 0) {
      return {
        data: year.format("YYYY"),
        width: (5 - startDate.quarter()) * columnWidth
      };
    }
    if (index === years.length - 1) {
      return {
        data: year.format("YYYY"),
        width: endDate.quarter() * columnWidth
      };
    }
    return {
      data: year.format("YYYY"),
      width: 4 * columnWidth
    };
  });
  return [headerObject, monthsString];
}
function getYearModeData(startDate, endDate, columnWidth) {
  const years = getYearsInRange(startDate, endDate);
  const headerObject = years.map((year) => {
    return {
      data: year.format("YYYY"),
      width: columnWidth
    };
  });
  return [headerObject, null];
}
class TimeLine {
  constructor(viewMode, options, chartContext, dataManager) {
    this.viewMode = viewMode;
    this.options = options;
    this.chartContext = chartContext;
    this.dataManager = dataManager;
  }
  generateHeader(headerData, subHeader) {
    const headerContainer = createBox(this.chartContext, { className: "timeline-header" });
    const headerRow1 = createBox(this.chartContext, { className: "timeline-header-row" });
    const { headerBackground, rowHeight, fontColor } = this.options;
    const chartInstanceId = this.chartContext.getInstanceId();
    headerContainer.setAttribute("data-chart-instance", chartInstanceId);
    forEach(headerData, (header) => {
      const headerCell = createBox(this.chartContext, {
        className: "timeline-header-cell",
        content: header.data,
        style: {
          height: !subHeader ? `${rowHeight * 2}px` : `${rowHeight}px`,
          minWidth: `${header.width}px` || "100%",
          color: fontColor
        }
      });
      headerRow1.append(headerCell);
    });
    headerContainer.append(headerRow1);
    if (!subHeader) {
      headerContainer.style.background = headerBackground;
      return headerContainer;
    }
    const headerRow2 = createBox(this.chartContext, { className: "timeline-header-row" });
    forEach(subHeader, (data2) => {
      const headerCell = createBox(this.chartContext, {
        className: "timeline-header-cell",
        content: data2,
        style: {
          height: `${rowHeight}px`,
          maxWidth: `${ColumnWidthByMode[this.viewMode]}px`,
          minWidth: `${ColumnWidthByMode[this.viewMode]}px`,
          color: fontColor
        }
      });
      headerRow2.append(headerCell);
    });
    headerContainer.append(headerRow2);
    headerContainer.style.background = headerBackground;
    return headerContainer;
  }
  generateRow(taskId, cellCount) {
    const row = createBox(this.chartContext, { className: "timeline-data-row" });
    const { rowHeight } = this.options;
    const chartInstanceId = this.chartContext.getInstanceId();
    row.setAttribute("data-taskid", taskId);
    row.setAttribute("data-chart-instance", chartInstanceId);
    for (let index = 0; index < cellCount; index++) {
      const headerCell = createBox(this.chartContext, {
        className: "timeline-data-cell",
        style: { height: `${rowHeight}px`, minWidth: `${ColumnWidthByMode[this.viewMode]}px` }
      });
      headerCell.setAttribute("data-chart-instance", chartInstanceId);
      row.append(headerCell);
    }
    return row;
  }
  generateRows(tasks, cellCount) {
    const tableBody = createBox(this.chartContext, { className: "timeline-body" });
    const chartInstanceId = this.chartContext.getInstanceId();
    tableBody.setAttribute("data-chart-instance", chartInstanceId);
    tasks.forEach((task) => {
      const row = this.generateRow(task.id, cellCount);
      tableBody.append(row);
    });
    this.fillEmptyRows(tableBody, tasks.length, cellCount);
    return tableBody;
  }
  fillEmptyRows(tableBody, existingRowCount, cellCount) {
    const ganttContainer = this.chartContext.querySelector(".gantt-container");
    if (!ganttContainer)
      return;
    const containerHeight = ganttContainer.clientHeight;
    const rowHeight = this.options.rowHeight;
    const headerHeight = rowHeight * 2;
    const availableHeight = containerHeight - headerHeight;
    const totalRowsNeeded = Math.floor(availableHeight / rowHeight);
    const emptyRowsNeeded = Math.max(0, totalRowsNeeded - existingRowCount);
    for (let i = 0; i < emptyRowsNeeded; i++) {
      const emptyRow = this.generateRow(`empty-${i}`, cellCount);
      emptyRow.classList.add("timeline-empty-row");
      tableBody.append(emptyRow);
    }
  }
  getHeaderData(startDate, endDate, viewMode) {
    if (viewMode === ViewMode.Day) {
      return getDayModeData(startDate, endDate, ColumnWidthByMode[this.viewMode]);
    }
    if (viewMode === ViewMode.Week) {
      return getWeekModeData(startDate, endDate, ColumnWidthByMode[this.viewMode]);
    }
    if (viewMode === ViewMode.Month) {
      return getMonthModeData(startDate, endDate, ColumnWidthByMode[this.viewMode]);
    }
    if (viewMode === ViewMode.Quarter) {
      return getQuarterModeData(startDate, endDate, ColumnWidthByMode[this.viewMode]);
    }
    if (viewMode === ViewMode.Year) {
      return getYearModeData(startDate, endDate, ColumnWidthByMode[this.viewMode]);
    }
    return null;
  }
  render() {
    const tasks = this.dataManager.getFlatVisibleTasks();
    const dateRange = this.dataManager.getDateRange(8, this.viewMode);
    const headerData = this.getHeaderData(dateRange[0], dateRange[1], this.viewMode);
    if (!headerData)
      return null;
    const [headerObjects, subHeaderObjects] = headerData;
    const headerElement = this.generateHeader(headerObjects, subHeaderObjects);
    const bodyElement = this.generateRows(tasks, (subHeaderObjects || headerObjects).length);
    const barContainer = createBox(this.chartContext, { className: "bar-container" });
    const annotationContainer = createBox(this.chartContext, { className: "annotation-container" });
    forEach(tasks, (task, index) => {
      const barElement = new Bar(
        task,
        dateRange[0],
        this.options,
        this.viewMode,
        index,
        this.chartContext,
        this.dataManager
      ).drawBar((id, updatedTask) => {
        updateTaskInUI(this.chartContext, this.dataManager, id, updatedTask, this.options, this.viewMode, dateRange[0]);
      });
      barContainer.append(barElement);
    });
    const totalHeight = tasks.length * this.options.rowHeight;
    const annotationElements = new AnnotationRenderer(
      this.options,
      dateRange[0],
      this.viewMode,
      this.chartContext,
      totalHeight
    ).render();
    annotationContainer.append(...annotationElements);
    const horizontalScroll = createBox(this.chartContext, { className: "timeline-horizontal-scroll" });
    const scrollContent = createBox(this.chartContext, { className: "timeline-horizontal-scroll-content" });
    const chartInstanceId = this.chartContext.getInstanceId();
    horizontalScroll.id = `timeline-horizontal-scroll-${chartInstanceId}`;
    const contentWidth = (subHeaderObjects || headerObjects).length * ColumnWidthByMode[this.viewMode];
    scrollContent.style.width = `${contentWidth}px`;
    scrollContent.style.height = "1px";
    horizontalScroll.appendChild(scrollContent);
    return [headerElement, annotationContainer, bodyElement, barContainer, horizontalScroll];
  }
}
const DialogStyle = `
  .gantt-dialog-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: none;
    z-index: 999;
    overflow: hidden;
  }

  .gantt-dialog-container .dialog-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .gantt-dialog-container .gantt-dialog {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: var(--dialog-bg-color, white);
    border-radius: 4px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    border: 1px solid var(--dialog-border-color, #eee);
    z-index: 1000;
    min-width: 300px;
    max-width: 90%;
    max-height: 90%;
    display: flex;
    flex-direction: column;
  }

  .gantt-dialog .dialog-header {
    padding: 12px 16px;
    border-bottom: 1px solid var(--dialog-border-color, #eee);
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: var(--header-bg-color, #f3f3f3);
    flex-shrink: 0;
  }

  .gantt-dialog .dialog-title {
    font-weight: 600;
    font-size: 16px;
    color: var(--header-text-color, #333);
    margin: 0;
  }

  .gantt-dialog .dialog-close {
    background: none;
    border: none;
    font-size: 20px;
    cursor: pointer;
    padding: 0;
    color: var(--text-color, #666);
    transition: color 0.2s;
    line-height: 1;
  }

  .gantt-dialog .dialog-close:hover {
    color: var(--text-color, #333);
  }

  .gantt-dialog .dialog-content {
    padding: 16px;
    overflow-y: auto;
    overflow-x: hidden;
    flex: 1;
    background: var(--dialog-bg-color, white);
    color: var(--text-color, #333);
  }

  .gantt-dialog .dialog-content::-webkit-scrollbar {
    width: 8px;
  }

  .gantt-dialog .dialog-content::-webkit-scrollbar-track {
    background: var(--dialog-bg-color, #f1f1f1);
  }

  .gantt-dialog .dialog-content::-webkit-scrollbar-thumb {
    background: var(--border-color, #888);
    border-radius: 4px;
  }

  .gantt-dialog .dialog-content::-webkit-scrollbar-thumb:hover {
    background: var(--text-color, #555);
  }

  .gantt-dialog-container.show {
    display: block;
  }

  .gantt-dialog-container.animate .dialog-overlay {
    animation: fadeIn 0.2s ease-out;
  }

  .gantt-dialog-container.animate .gantt-dialog {
    animation: slideIn 0.3s ease-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translate(-50%, -48%);
    }
    to {
      opacity: 1;
      transform: translate(-50%, -50%);
    }
  }

  .gantt-container {
    position: relative;
  }
`;
const DropdownStyle = `
  .dropdown {
    position: relative;
    display: inline-block;
  }

  .dropdown .gantt-action-button {
    border-radius: 4px;
  }

  .dropdown.show .gantt-action-button {
    background: var(--toolbar-hover-bg-color, #f8f9fa);
    border-color: var(--button-bg-color, #0066cc);
  }
  
  .dropdown-btn {
    padding: 8px 16px;
    background-color: var(--toolbar-bg-color, #fff);
    color: var(--text-color, rgba(0, 0, 0, 0.7));
    border: 1px solid var(--toolbar-border-color, #ddd);
    cursor: pointer;
    font-weight: bold;
    border-radius: 2px;
    font-family: inherit;
    font-size: inherit;
    line-height: 1.5;
    transition: background-color 0.2s ease, border-color 0.2s ease;
  }
  
  .dropdown-btn:hover {
    background-color: var(--toolbar-hover-bg-color, #f8f9fa);
    border-color: var(--toolbar-border-color, #bbb);
  }
  
  .dropdown-btn:focus {
    outline: none;
    border-color: var(--button-bg-color, #0066cc);
    box-shadow: 0 0 0 2px rgba(0, 102, 204, 0.2);
  }
  
  .dropdown-content {
    display: none;
    position: absolute;
    background-color: var(--dialog-bg-color, #fff);
    min-width: 160px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    border-radius: 4px;
    right: 0;
    top: calc(100% + 4px);
    border: 1px solid var(--dialog-border-color, #D9D9D9);
    overflow: hidden;
  }
  
  .dropdown-content a {
    color: var(--text-color, #333);
    padding: 10px 14px;
    text-decoration: none;
    display: block;
    font-family: inherit;
    font-size: 13px;
    line-height: 1.4;
    transition: background-color 0.2s ease;
    cursor: pointer;
  }
  
  .dropdown-content a:hover {
    background-color: var(--toolbar-hover-bg-color, #f1f1f1);
  }
  
  .dropdown-content a:focus {
    background-color: var(--button-hover-bg-color, #e6f3ff);
    outline: none;
  }
  
  .dropdown.show .dropdown-content {
    display: block;
    animation: dropdownSlideDown 0.2s ease-out;
  }
  
  @keyframes dropdownSlideDown {
    from {
      opacity: 0;
      transform: translateY(-5px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Shadow DOM specific adjustments */
  :host .dropdown {
    position: relative;
    display: inline-block;
  }
`;
const GanttStyle = `
  * {
    box-sizing: border-box;
  }

  .gantt-container * {
    user-select: none;
  }

  .gantt-actions-container {
    display: flex;
    align-items: center;
    gap: 4px;
    padding: 6px 10px;
    flex: 0 0 36px;
    min-height: 36px;
    max-height: 36px;
    background-color: var(--background-color, #FFFFFF);
    border-bottom: 1px solid var(--border-color, #DFE0E1);
  }

  .gantt-actions-spacer {
    flex: 1;
    min-width: 8px;
  }

  .gantt-action-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 28px;
    height: 28px;
    padding: 0;
    border: 0;
    border-radius: 4px;
    background: var(--toolbar-bg-color, #fff);
    color: var(--text-color, #333);
    cursor: pointer;
    transition: all 0.15s ease;
    flex-shrink: 0;
  }

  .gantt-action-button:hover:not(:disabled) {
    background: var(--toolbar-hover-bg-color, #f8f9fa);
    border-color: var(--toolbar-border-color, #999);
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);
  }

  .gantt-action-button:active:not(:disabled) {
    transform: translateY(0);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  .gantt-action-button:disabled {
    opacity: 0.4;
    cursor: not-allowed;
    background: var(--toolbar-bg-color, #fafafa);
  }

  .gantt-action-button svg {
    width: 16px;
    height: 16px;
    stroke: currentColor;
    flex-shrink: 0;
  }

  .gantt-action-separator {
    width: 1px;
    height: 20px;
    background-color: var(--border-color, #DFE0E1);
    margin: 0 4px;
    flex-shrink: 0;
  }

  .gantt-view-mode-display {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 4px 10px;
    height: 28px;
    font-size: 13px;
    color: var(--text-color, #666);
    background: var(--toolbar-bg-color, #f8f9fa);
    border-radius: 4px;
    margin-left: 4px;
    font-weight: 500;
    white-space: nowrap;
    flex-shrink: 0;
  }

  .gantt-view-mode-display svg {
    width: 14px;
    height: 14px;
    flex-shrink: 0;
  }
  
  .gantt-container {
    display: flex;
    flex: 1 1 auto;
    min-height: 0;
    min-width: 0;
    border: 1px solid var(--border-color, #DFE0E1);
    border-top: none;
    position: relative;
    background-color: var(--background-color, #FFFFFF);
    overflow: hidden;
    height: 100%;
    box-sizing: border-box;
  }
  
  .gantt-button {
    border: 1px solid var(--toolbar-border-color, #D9D9D9);
    border-radius: 2px;
    background: var(--toolbar-bg-color, #fff);
    padding: 4px 12px;
    color: var(--text-color, rgba(0, 0, 0, 0.7));
    line-height: 20px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .gantt-button:hover {
    background: var(--toolbar-hover-bg-color, #f8f9fa);
  }
  
  .gantt-button:disabled {
    color: rgba(128, 128, 128, 0.5);
    opacity: 0.6;
  }
`;
const ScrollbarStyle = `
  .gantt-container ::-webkit-scrollbar {
    width: 12px;
    height: 12px;
  }

  .gantt-container ::-webkit-scrollbar-track {
    background: var(--scrollbar-track-color, #F5F5F5);
    border-radius: 4px;
  }

  .gantt-container ::-webkit-scrollbar-thumb {
    background: var(--scrollbar-thumb-color, #C1C1C1);
    border-radius: 4px;
    border: 2px solid var(--scrollbar-track-color, #F5F5F5);
  }

  .gantt-container ::-webkit-scrollbar-thumb:hover {
    background: var(--scrollbar-thumb-hover-color, #A8A8A8);
  }

  .gantt-container * {
    scrollbar-width: thin;
    scrollbar-color: var(--scrollbar-thumb-color, #C1C1C1) var(--scrollbar-track-color, #F5F5F5);
  }

  /* Shadow DOM support */
  :host .gantt-container ::-webkit-scrollbar {
    width: 12px;
    height: 12px;
  }

  :host .gantt-container ::-webkit-scrollbar-track {
    background: var(--scrollbar-track-color, #F5F5F5);
    border-radius: 4px;
  }

  :host .gantt-container ::-webkit-scrollbar-thumb {
    background: var(--scrollbar-thumb-color, #C1C1C1);
    border-radius: 4px;
    border: 2px solid var(--scrollbar-track-color, #F5F5F5);
  }

  :host .gantt-container ::-webkit-scrollbar-thumb:hover {
    background: var(--scrollbar-thumb-hover-color, #A8A8A8);
  }

  :host .gantt-container * {
    scrollbar-width: thin;
    scrollbar-color: var(--scrollbar-thumb-color, #C1C1C1) var(--scrollbar-track-color, #F5F5F5);
  }
`;
const TaskFormStyle = `

  .task-form {
    overflow: visible;
  }

  .task-form .form-group {
    margin-bottom: 18px;
    position: relative;
  }

  /* extra padding to last form group for breathing room */
  .task-form .form-group:last-of-type {
    margin-bottom: 24px;
  }

  .task-form label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    color: var(--text-color, #333);
  }

  .task-form input {
    width: 100%;
    padding: 8px;
    border: 1px solid var(--dialog-border-color, #ddd);
    border-radius: 4px;
    font-size: 14px;
    background-color: var(--dialog-bg-color, #fff);
    color: var(--text-color, #333);
  }

  .task-form input:focus {
    outline: none;
    border-color: var(--button-bg-color, #0066cc);
  }

  .task-form .grid {
    display: flex;
    justify-content: space-between;
    gap: 12px;
  }

  .task-form .grid .form-group {
    flex: 1;
  }

  .task-form .form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 8px;
    margin-top: 24px;
    padding-top: 16px;
    border-top: 1px solid var(--dialog-border-color, #eee);
    position: sticky;
    bottom: -16px;
    background: var(--dialog-bg-color, white);
    margin-left: -16px;
    margin-right: -16px;
    margin-bottom: -16px;
    padding-left: 16px;
    padding-right: 16px;
    padding-bottom: 16px;
  }

  .task-form .btn-primary {
    background: var(--button-bg-color, #0066cc);
    color: var(--button-text-color, white);
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
  }

  .task-form .btn-primary:hover {
    background: var(--button-hover-bg-color, #0052a3);
  }

  .task-form .btn-disabled,
  .task-form .btn-disabled:hover {
    background: #99c2ff;
    cursor: not-allowed;
    opacity: 0.7;
  }

  .task-form .form-error {
    position: absolute;
    bottom: -15px;
    left: 0;
    color: #dc3545;
    font-size: 12px;
    margin-top: 4px;
    line-height: 1.2;
    transition: opacity 0.2s ease;
  }

  .task-form .invalid {
    border-color: #dc3545;
  }

  .task-form .invalid:focus {
    border-color: #dc3545;
    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
  }

  .color-picker-wrapper {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .color-picker-wrapper input[type="color"] {
    -webkit-appearance: none;
    width: 32px;
    height: 32px;
    padding: 0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .color-picker-wrapper input[type="color"]::-webkit-color-swatch-wrapper {
    padding: 0;
  }

  .color-picker-wrapper input[type="color"]::-webkit-color-swatch {
    border: 1px solid var(--dialog-border-color, #ddd);
    border-radius: 4px;
  }

  .color-picker-wrapper .color-preview {
    font-size: 12px;
    color: var(--text-color, #666);
  }
`;
const TableStyle = `
  .tasks-container {
    height: 100%;
    position: relative;
    display: flex;
    flex-direction: column;
    overflow-x: visible;
    overflow-y: visible;
  }

  .tasks-header {
    flex-shrink: 0;
    position: sticky;
    top: 0;
    z-index: 10;
    background-color: var(--header-bg-color, #F3F3F3);
    overflow: hidden;
  }

  .tasks-header-row {
    display: flex;
    width: 100%;
  }

  .tasks-header-cell {
    padding: 0 10px;
    text-align: center;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    display: flex;
    align-items: center;
    border: var(--cell-border-width, 1px) solid var(--cell-border-color, #eff0f0);
    color: var(--text-color, #000);
    box-sizing: border-box;
    flex-shrink: 0;
    font-weight: 600;
  }

  .tasks-body-wrapper {
    flex: 1;
    overflow: visible;
    position: relative;
  }

  .tasks-data-container {
    display: flex;
    flex-direction: column;
    width: 100%;
  }

  .tasks-data-row {
    display: flex;
    width: 100%;
    border-bottom: var(--cell-border-width, 1px) solid var(--cell-border-color, #eff0f0);
    box-sizing: border-box;
  }

  .tasks-data-cell {
    padding: 0 10px;
    text-align: center;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    display: flex;
    align-items: center;
    border-left: var(--cell-border-width, 1px) solid var(--cell-border-color, #eff0f0);
    border-right: var(--cell-border-width, 1px) solid var(--cell-border-color, #eff0f0);
    color: var(--text-color, #000);
    box-sizing: border-box;
    flex-shrink: 0;
  }

  .tasks-data-row .tasks-data-cell:first-child {
    border-left: none;
  }

  .tasks-data-row .tasks-data-cell:last-child {
    border-right: none;
  }

  .tasks-data-row .task-toggle-icon,
  .tasks-data-row .task-toggle-icon-blank {
    display: inline-block;
    margin-right: 5px;
    width: 10px;
    height: 10px;
    vertical-align: middle;
    flex-shrink: 0;
  }

  .tasks-data-row .task-toggle-icon {
    cursor: pointer;
    position: relative;
  }

  /* Chevron (expanded) - pointing down */
  .tasks-data-row .task-toggle-icon.expanded::before {
    content: '';
    position: absolute;
    width: 6px;
    height: 6px;
    border-right: 2px solid var(--text-color, #000000);
    border-bottom: 2px solid var(--text-color, #000000);
    transform: rotate(45deg);
    top: 0;
    left: 2px;
  }

  /* Chevron - pointing right (collapsed) */
  .tasks-data-row .task-toggle-icon.collapsed::before {
    content: '';
    position: absolute;
    width: 6px;
    height: 6px;
    border-right: 2px solid var(--text-color, #000000);
    border-bottom: 2px solid var(--text-color, #000000);
    transform: rotate(-45deg);
    top: 2px;
    left: 0;
  }

  .tasks-data-row .task-toggle-icon:hover::before {
    opacity: 0.7;
  }

  /* Shadow DOM specific */
  :host .tasks-container {
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  :host .tasks-header {
    position: sticky;
    top: 0;
    z-index: 10;
  }
`;
const TimelineStyle = `
  .gantt-container .timeline-container {
    width: 100%;
    height: 100%;
    position: relative;
    background-color: var(--background-color, #FFFFFF);
    display: flex;
    flex-direction: column;
    overflow: visible;
    padding-bottom: 0;
    box-sizing: border-box;
  }

  .timeline-container .timeline-header {
    position: sticky;
    top: 0;
    z-index: 100;
    background-color: var(--header-bg-color, #F3F3F3);
    flex-shrink: 0;
    overflow-x: auto;
    overflow-y: hidden;
    width: 100%;
    scrollbar-width: none; 
    -ms-overflow-style: none; 
  }

  .timeline-container .timeline-header::-webkit-scrollbar {
    display: none;
    height: 0;
    width: 0;
  }

  /* Shadow DOM specific */
  :host .timeline-container .timeline-header {
    scrollbar-width: none !important;
    -ms-overflow-style: none !important;
  }

  :host .timeline-container .timeline-header::-webkit-scrollbar {
    display: none !important;
    height: 0 !important;
    width: 0 !important;
  }

  .timeline-container .timeline-header > .timeline-header-row {
    width: max-content;
    position: relative;
  }

  .timeline-container .timeline-body-wrapper {
    flex: 1;
    overflow-x: auto;
    overflow-y: hidden;
    position: relative;
    width: 100%;
    min-height: 0;
    scrollbar-width: none;
    -ms-overflow-style: none;
    padding-bottom: 0; 
    margin-bottom: 0;
  }

  .timeline-body-wrapper .timeline-horizontal-scroll, .timeline-container .timeline-body-wrapper::-webkit-scrollbar {
    display: none;
    height: 0;
    width: 0;
  }

  /* shadow DOM specific */
  :host .timeline-container .timeline-body-wrapper {
    scrollbar-width: none !important;
    -ms-overflow-style: none !important;
  }

  :host .timeline-container .timeline-body-wrapper::-webkit-scrollbar {
    display: none !important;
    height: 0 !important;
    width: 0 !important;
  }


  .timeline-horizontal-scroll {
    position: absolute;
    bottom: 0;
    height: 17px;
    overflow-x: auto;
    overflow-y: hidden;
    z-index: 300;
    background-color: var(--split-bar-color, var(--background-color, #FFFFFF));
    border-top: 1px solid var(--border-color, #DFE0E1);
    box-sizing: border-box;
    display: block;
    visibility: visible;
    opacity: 1;
    pointer-events: auto;
  }

  .timeline-horizontal-scroll-content {
    height: 1px;
    width: max-content;
  }

  .timeline-container .annotation,
  .timeline-container .annotation-container {
    position: absolute;
    top: 0;
    left: 0;
    pointer-events: none;
  }

  .timeline-container .annotation-container > * {
    pointer-events: auto;
  }

  .timeline-container .bar-container {
    position: absolute;
    top: 0;
    left: 0;
    pointer-events: none;
  }

  .timeline-container .bar-container > * {
    pointer-events: auto;
  }

  .timeline-container .bar-timeline {
    position: absolute;
    cursor: move;
    cursor: grab;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .timeline-container .bar-timeline .bar-handle {
    height: 100%;
    width: 5px;
    position: absolute;
    z-index: 1000;
    background: transparent;
  }

  .timeline-container .bar-timeline .bar-handle:hover {
    cursor: col-resize;
  }

  .resizing {
    pointer-events: none;
    opacity: 0.8;
  }

  .timeline-container .bar-timeline .bar-handle.handle-left {
    left: -5px;
  }

  .timeline-container .bar-timeline .bar-handle.handle-right {
    right: -5px;
  }

  .timeline-container .bar-timeline.dragging {
    cursor: grabbing;
  }

  .bar-timeline .bar-timeline-progress {
    position: absolute;
    pointer-events: none;
    height: 100%;
    left: 0;
  }

  .bar-timeline .bar-label {
    white-space: nowrap;
    pointer-events: none;
    overflow: hidden;
    z-index: 1;
  }

  .timeline-container .timeline-body {
    width: max-content;
    position: relative;
    padding-bottom: 17px;
  }
  
  .timeline-container .timeline-header-row,
  .timeline-container .timeline-data-row {
    display: flex;
  }

  .timeline-container .timeline-header-cell,
  .timeline-container .timeline-data-cell {
    padding: 0 10px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    display: flex;
    align-items: center;
    justify-content: center;
    border: var(--cell-border-width, 1px) solid var(--cell-border-color, #eff0f0);
    color: var(--text-color, #000);
  }

  .timeline-container .timeline-header-cell {
    background-color: var(--header-bg-color, #F3F3F3);
    color: var(--header-text-color, #333);
  }
`;
const TooltipStyle = `
  #apexgantt-tooltip-container,
  [role="tooltip"] {
    position: absolute;
    z-index: 1000;
    pointer-events: none;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s ease;
    font-family: inherit;
    font-size: 13px;
    line-height: 1.4;
    display: none;
    width: 300px !important;
    max-width: 300px !important;
    box-sizing: border-box;
  }
  
  #apexgantt-tooltip-container.visible,
  [role="tooltip"].visible {
    display: block;
    opacity: 1;
    visibility: visible;
  }
  
  #apexgantt-tooltip-container .tooltip-content,
  [role="tooltip"] .tooltip-content {
    padding: 12px 16px;
    border-radius: 6px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
    width: 100%;
    word-wrap: break-word;
    overflow-wrap: break-word;
    box-sizing: border-box;
    display: block;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  /* Shadow DOM specific adjustments */
  :host #apexgantt-tooltip-container,
  :host [role="tooltip"] {
    position: absolute;
    z-index: 1000;
    pointer-events: none;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s ease;
    font-family: inherit;
    font-size: 13px;
    line-height: 1.4;
    display: none;
    width: 300px !important;
    max-width: 300px !important;
    box-sizing: border-box;
  }
  
  :host #apexgantt-tooltip-container.visible,
  :host [role="tooltip"].visible {
    display: block;
    opacity: 1;
    visibility: visible;
  }

  #apexgantt-tooltip-container .tooltip-content div,
  [role="tooltip"] .tooltip-content div {
    margin: 6px 0;
    word-break: break-word;
    line-height: 1.4;
  }
  
  #apexgantt-tooltip-container .tooltip-content strong,
  [role="tooltip"] .tooltip-content strong {
    font-weight: 600;
    display: inline;
    margin-right: 8px;
  }
  
  #apexgantt-tooltip-container .tooltip-content span,
  [role="tooltip"] .tooltip-content span {
    display: inline;
  }
  
  /* First item (Name) styling */
  #apexgantt-tooltip-container .tooltip-content div:first-child,
  [role="tooltip"] .tooltip-content div:first-child {
    margin-bottom: 10px;
    padding-bottom: 8px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  #apexgantt-tooltip-container .tooltip-content div:first-child strong,
  [role="tooltip"] .tooltip-content div:first-child strong {
    font-weight: 700;
  }
  
  #apexgantt-tooltip-container .tooltip-content div:last-child,
  [role="tooltip"] .tooltip-content div:last-child {
    margin-bottom: 0;
  }
`;
const ToolbarStyle = `
  #toolbar {
    display: flex;
    gap: 5px;
    position: absolute;
    right: 10px;
    top: 10px;
    z-index: 100;
  }
  
  .toolbar-item {
    align-items: center;
    background-color: var(--toolbar-bg-color, #FFFFFF);
    border: 1px solid var(--toolbar-border-color, #BCBCBC);
    cursor: pointer;
    display: flex;
    height: 30px;
    justify-content: center;
    width: 30px;
    border-radius: 3px;
    transition: all 0.2s ease;
    position: relative;
  }
  
  .toolbar-item:hover {
    background-color: var(--toolbar-hover-bg-color, #f8f9fa);
    border-color: var(--toolbar-border-color, #999);
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .toolbar-item:active {
    transform: translateY(0);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
  
  .toolbar-item:focus {
    outline: none;
    border-color: var(--button-bg-color, #0066cc);
    box-shadow: 0 0 0 2px rgba(0, 102, 204, 0.2);
  }
  
  .toolbar-item img {
    width: 16px;
    height: 16px;
    pointer-events: none;
    filter: var(--toolbar-icon-filter, none);
  }
  
  .toolbar-item[disabled] {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }
  
  /* Tooltip styles */
  .toolbar-item::after {
    content: attr(data-tooltip);
    position: absolute;
    bottom: -35px;
    left: 50%;
    transform: translateX(-50%);
    background: var(--tooltip-bg-color, #333);
    color: var(--tooltip-text-color, white);
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    white-space: nowrap;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease;
    z-index: 1000;
  }
  
  .toolbar-item::before {
    content: '';
    position: absolute;
    bottom: -25px;
    left: 50%;
    transform: translateX(-50%);
    border: 5px solid transparent;
    border-bottom-color: var(--tooltip-bg-color, #333);
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease;
    z-index: 1000;
  }
  
  .toolbar-item:hover::after,
  .toolbar-item:hover::before {
    opacity: 1;
  }
  
  /* Shadow DOM specific adjustments */
  :host #toolbar {
    display: flex;
    gap: 5px;
    position: absolute;
    right: 10px;
    top: 10px;
    z-index: 100;
  }
`;
const DefaultOptions = {
  paddingX: 20,
  paddingY: 15
};
class ArrowLink {
  constructor(instanceId) {
    this.elements = [];
    this.chartContext = null;
    this.instanceId = instanceId || Math.random().toString(36).substr(2, 9);
  }
  getInstanceId() {
    return this.instanceId;
  }
  static calculateArrowPath(fromElement, toElement, svg2, options) {
    const fromRect = getTransformAwareBoundingRect(fromElement, svg2);
    const toRect = getTransformAwareBoundingRect(toElement, svg2);
    const fromX = fromRect.right;
    const fromY = fromRect.top + fromRect.height / 2;
    const toX = toRect.left - 2;
    const toY = toRect.top + toRect.height / 2;
    const { paddingX, paddingY } = options;
    const pathArray = [`M ${fromX},${fromY}`];
    if (toX > fromX) {
      if (toY < fromY) {
        const midX = fromX + paddingX;
        const midY = fromY - paddingY;
        const midX2 = toX - paddingX;
        const midY2 = toY + paddingY;
        pathArray.push(`L ${midX},${fromY}`);
        pathArray.push(`L ${midX},${midY}`);
        pathArray.push(`L ${midX2},${midY}`);
        pathArray.push(`L ${midX2},${midY2}`);
        pathArray.push(`L ${midX2},${toY}`);
      } else if (toY > fromY) {
        const midX = (fromX + toX) / 2;
        if (toX - fromX < 20) {
          const midX2 = fromX + paddingX;
          const midY = fromY + paddingY;
          const midX22 = toX - paddingX;
          const midY2 = toY - paddingY;
          pathArray.push(`L ${midX2},${fromY}`);
          pathArray.push(`L ${midX2},${midY}`);
          pathArray.push(`L ${midX22},${midY}`);
          pathArray.push(`L ${midX22},${midY2}`);
          pathArray.push(`L ${midX22},${toY}`);
        } else {
          pathArray.push(`L ${midX},${fromY}`);
        }
        pathArray.push(`L ${midX},${toY}`);
      } else
        ;
    } else if (toX < fromX) {
      if (toY !== fromY) {
        const midX = fromX + paddingX;
        const midY = fromY + paddingY * (toY < fromY ? -1 : 1);
        const midX2 = toX - paddingX;
        const midY2 = toY + paddingY * (toY < fromY ? 1 : -1);
        pathArray.push(`L ${midX},${fromY}`);
        pathArray.push(`L ${midX},${midY}`);
        pathArray.push(`L ${midX2},${midY}`);
        pathArray.push(`L ${midX2},${midY2}`);
        pathArray.push(`L ${midX2},${toY}`);
      } else {
        const midX = fromX + paddingX;
        const midY = fromY + paddingY;
        const midX2 = toX - paddingX;
        const midY2 = toY;
        pathArray.push(`L ${midX},${fromY}`);
        pathArray.push(`L ${midX},${midY}`);
        pathArray.push(`L ${midX2},${midY}`);
        pathArray.push(`L ${midX2},${midY2}`);
      }
    }
    pathArray.push(`L ${toX},${toY}`);
    return pathArray.join(" ");
  }
  static drawArrow(fromElement, toElement, svg2, options, id, instanceId, chartContext) {
    const path = chartContext ? chartContext.createElementNS("http://www.w3.org/2000/svg", "path") : document.createElementNS("http://www.w3.org/2000/svg", "path");
    const pathString = ArrowLink.calculateArrowPath(fromElement, toElement, svg2, options);
    path.setAttribute("d", pathString);
    const arrowColor = options.arrowColor || "#0D6EFD";
    path.setAttribute("stroke", arrowColor);
    path.setAttribute("stroke-width", "2");
    path.setAttribute("fill", "transparent");
    const markerId = instanceId ? `arrowhead-${instanceId}` : "arrowhead";
    path.setAttribute("marker-end", `url(#${markerId})`);
    path.setAttribute("data-edgeid", id);
    path.addEventListener("mouseout", function() {
      path.setAttribute("stroke", arrowColor);
    });
    return path;
  }
  static updateArrow(fromElement, toElement, svg2, options, id) {
    const path = svg2.querySelector(`[data-edgeid="${id}"]`);
    const pathString = ArrowLink.calculateArrowPath(fromElement, toElement, svg2, options);
    if (path) {
      path.setAttribute("d", pathString);
    }
  }
  createMarker(chartContext) {
    const marker = chartContext ? chartContext.createElementNS("http://www.w3.org/2000/svg", "marker") : document.createElementNS("http://www.w3.org/2000/svg", "marker");
    const markerId = `arrowhead-${this.instanceId}`;
    marker.setAttribute("id", markerId);
    marker.setAttribute("markerWidth", "5");
    marker.setAttribute("markerHeight", "5");
    marker.setAttribute("refX", "4");
    marker.setAttribute("refY", "2.5");
    marker.setAttribute("orient", "auto");
    marker.setAttribute("fill", "context-stroke");
    const arrowhead = chartContext ? chartContext.createElementNS("http://www.w3.org/2000/svg", "polygon") : document.createElementNS("http://www.w3.org/2000/svg", "polygon");
    arrowhead.setAttribute("points", "0,0 5,2.5 0,5 1, 2.5");
    marker.appendChild(arrowhead);
    return marker;
  }
  render(container, elements2, options, chartContext) {
    this.chartContext = chartContext || null;
    const svgId = `timeline-arrows-${this.instanceId}`;
    const existingSvg = container.querySelector(`#${svgId}`);
    let svg2 = existingSvg;
    if (!svg2) {
      svg2 = chartContext ? chartContext.createElementNS("http://www.w3.org/2000/svg", "svg") : document.createElementNS("http://www.w3.org/2000/svg", "svg");
      svg2.setAttribute("id", svgId);
      container.appendChild(svg2);
    }
    this.svg = svg2;
    this.options = { ...DefaultOptions, ...options };
    this.elements = elements2;
    this.svg.setAttribute(
      "style",
      generateStyles({
        left: "0",
        position: "absolute",
        top: "0"
      })
    );
    this.svg.innerHTML = "";
    const defs = chartContext ? chartContext.createElementNS("http://www.w3.org/2000/svg", "defs") : document.createElementNS("http://www.w3.org/2000/svg", "defs");
    const marker = this.createMarker(chartContext);
    defs.appendChild(marker);
    this.svg.appendChild(defs);
    this.svg.setAttribute("width", `${this.options.width}`);
    this.svg.setAttribute("height", `${this.options.height}`);
    this.elements.forEach(({ id, source, target }) => {
      this.svg.appendChild(
        ArrowLink.drawArrow(source, target, this.svg, this.options, id, this.instanceId, chartContext)
      );
    });
    return this.svg;
  }
}
function updateArrow(context, fromId, toId, arrowLinkInstanceId) {
  const chartInstanceId = context.getInstanceId();
  const arrowSource = getBarElement(context, fromId);
  const arrowTarget = getBarElement(context, toId);
  if (!arrowSource || !arrowTarget) {
    console.warn(`[${chartInstanceId}] Arrow source or target not found: ${fromId} -> ${toId}`);
    return;
  }
  const timelineBody = context.querySelector(".timeline-body");
  const svgId = `timeline-arrows-${arrowLinkInstanceId}`;
  const svg2 = timelineBody == null ? void 0 : timelineBody.querySelector(`#${svgId}`);
  if (!svg2) {
    console.warn(`[${chartInstanceId}] Arrow SVG not found: ${svgId}`);
    return;
  }
  ArrowLink.updateArrow(
    arrowSource,
    arrowTarget,
    svg2,
    {
      paddingX: 20,
      paddingY: 15
    },
    `${fromId}-${toId}`
  );
}
function applyStyles(element, styles) {
  if (!element)
    return;
  Object.assign(element.style, styles);
}
function applyStylesToAll(elements2, styles) {
  elements2.forEach((elem) => applyStyles(elem, styles));
}
function getGanttElements(element) {
  const ganttContainer = element.querySelector(".gantt-container");
  if (!ganttContainer) {
    throw new Error("Gantt container not found");
  }
  const timelineContainer = ganttContainer.querySelector(".timeline-container");
  const tasksContainer = ganttContainer.querySelector(".tasks-container");
  if (!timelineContainer || !tasksContainer) {
    throw new Error("Timeline or tasks container not found");
  }
  return {
    ganttContainer,
    timelineContainer,
    tasksContainer,
    horizontalScroll: ganttContainer.querySelector(".timeline-horizontal-scroll"),
    timelineBodyWrapper: timelineContainer.querySelector(".timeline-body-wrapper"),
    timelineHeader: timelineContainer.querySelector(".timeline-header"),
    timelineBody: timelineContainer.querySelector(".timeline-body"),
    barContainer: timelineContainer.querySelector(".bar-container"),
    annotationContainer: timelineContainer.querySelector(".annotation-container")
  };
}
function calculateExportDimensions(elements2) {
  var _a, _b, _c, _d;
  const contentWidth = Math.max(
    ((_a = elements2.timelineBody) == null ? void 0 : _a.scrollWidth) || 0,
    ((_b = elements2.barContainer) == null ? void 0 : _b.scrollWidth) || 0,
    ((_c = elements2.annotationContainer) == null ? void 0 : _c.scrollWidth) || 0,
    ((_d = elements2.timelineHeader) == null ? void 0 : _d.scrollWidth) || 0
  );
  const tasksWidth = elements2.tasksContainer.scrollWidth;
  const totalWidth = tasksWidth + contentWidth;
  const totalHeight = Math.max(elements2.timelineContainer.scrollHeight, elements2.tasksContainer.scrollHeight);
  return {
    contentWidth,
    tasksWidth,
    totalWidth,
    totalHeight
  };
}
function extractCSSVariables(element) {
  const computedStyle = window.getComputedStyle(element);
  const cssVars = [];
  for (let i = 0; i < element.style.length; i++) {
    const propertyName = element.style[i];
    if (propertyName.startsWith("--")) {
      const value = element.style.getPropertyValue(propertyName);
      cssVars.push(`${propertyName}: ${value};`);
    }
  }
  const allProperties = Array.from(computedStyle);
  allProperties.forEach((propertyName) => {
    if (propertyName.startsWith("--")) {
      const value = computedStyle.getPropertyValue(propertyName);
      const varDeclaration = `${propertyName}: ${value};`;
      if (!cssVars.includes(varDeclaration)) {
        cssVars.push(varDeclaration);
      }
    }
  });
  if (cssVars.length === 0) {
    return "";
  }
  return `:root {
  ${cssVars.join("\n  ")}
}`;
}
function collectStyles(rootElement) {
  const styles = [];
  for (let i = 0; i < document.styleSheets.length; i++) {
    try {
      const sheet = document.styleSheets[i];
      if (sheet.href && !sheet.href.startsWith(window.location.origin)) {
        continue;
      }
      if (sheet.cssRules) {
        for (let j = 0; j < sheet.cssRules.length; j++) {
          styles.push(sheet.cssRules[j].cssText);
        }
      }
    } catch (e) {
      continue;
    }
  }
  const styleTags = document.querySelectorAll("style");
  styleTags.forEach((tag) => {
    if (tag.textContent) {
      styles.push(tag.textContent);
    }
  });
  const cssVariables = extractCSSVariables(rootElement);
  if (cssVariables) {
    styles.unshift(cssVariables);
  }
  return styles.join("\n");
}
function prepareClonedElements(clonedContainer, dimensions) {
  const { contentWidth } = dimensions;
  const clonedHorizontalScroll = clonedContainer.querySelector(".timeline-horizontal-scroll");
  clonedHorizontalScroll == null ? void 0 : clonedHorizontalScroll.remove();
  const clonedTimeline = clonedContainer.querySelector(".timeline-container");
  const clonedTasks = clonedContainer.querySelector(".tasks-container");
  const clonedTimelineBodyWrapper = clonedContainer.querySelector(".timeline-body-wrapper");
  const clonedTimelineHeader = clonedContainer.querySelector(".timeline-header");
  const clonedTimelineBody = clonedContainer.querySelector(".timeline-body");
  const clonedBarContainer = clonedContainer.querySelector(".bar-container");
  const clonedAnnotationContainer = clonedContainer.querySelector(".annotation-container");
  applyStyles(clonedTimeline, {
    overflow: "visible",
    maxWidth: "none",
    width: "auto",
    position: "relative"
  });
  applyStyles(clonedTasks, {
    overflow: "visible",
    height: "auto",
    maxHeight: "none"
  });
  applyStyles(clonedTimelineBodyWrapper, {
    overflow: "visible",
    maxWidth: "none",
    width: `${contentWidth}px`
  });
  if (clonedTimelineBodyWrapper) {
    clonedTimelineBodyWrapper.scrollLeft = 0;
  }
  applyStyles(clonedTimelineHeader, {
    overflow: "visible",
    maxWidth: "none",
    width: `${contentWidth}px`
  });
  if (clonedTimelineHeader) {
    clonedTimelineHeader.scrollLeft = 0;
  }
  applyStylesToAll([clonedTimelineBody, clonedBarContainer, clonedAnnotationContainer], {
    width: `${contentWidth}px`,
    minWidth: `${contentWidth}px`,
    maxWidth: "none"
  });
}
const exportGantt = async (element) => {
  try {
    const elements2 = getGanttElements(element);
    const dimensions = calculateExportDimensions(elements2);
    const clonedContainer = elements2.ganttContainer.cloneNode(true);
    prepareClonedElements(clonedContainer, dimensions);
    applyStyles(clonedContainer, {
      display: "flex",
      overflow: "visible",
      width: "fit-content",
      height: "auto"
    });
    const styles = collectStyles(element);
    const styleElement = document.createElement("style");
    styleElement.textContent = styles;
    clonedContainer.insertBefore(styleElement, clonedContainer.firstChild);
    const svg2 = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg2.setAttribute("width", dimensions.totalWidth.toString());
    svg2.setAttribute("height", dimensions.totalHeight.toString());
    svg2.setAttribute("xmlns", "http://www.w3.org/2000/svg");
    svg2.setAttribute("viewBox", `0 0 ${dimensions.totalWidth} ${dimensions.totalHeight}`);
    const foreignObject = document.createElementNS("http://www.w3.org/2000/svg", "foreignObject");
    foreignObject.setAttribute("width", dimensions.totalWidth.toString());
    foreignObject.setAttribute("height", dimensions.totalHeight.toString());
    foreignObject.setAttribute("x", "0");
    foreignObject.setAttribute("y", "0");
    foreignObject.appendChild(clonedContainer);
    svg2.appendChild(foreignObject);
    const serializer = new XMLSerializer();
    const svgString = '<?xml version="1.0" encoding="UTF-8"?>\n' + serializer.serializeToString(svg2);
    const blob = new Blob([svgString], { type: "image/svg+xml;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `gantt-chart-${Date.now()}.svg`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    setTimeout(() => URL.revokeObjectURL(url), 100);
  } catch (error) {
    console.error("Error exporting gantt chart:", error);
    throw error;
  }
};
const Icons = {
  zoomIn: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <circle cx="11" cy="11" r="8"/>
    <path d="m21 21-4.35-4.35"/>
    <line x1="11" y1="8" x2="11" y2="14"/>
    <line x1="8" y1="11" x2="14" y2="11"/>
  </svg>`,
  zoomOut: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <circle cx="11" cy="11" r="8"/>
    <path d="m21 21-4.35-4.35"/>
    <line x1="8" y1="11" x2="14" y2="11"/>
  </svg>`,
  calendar: `<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
    <line x1="16" y1="2" x2="16" y2="6"/>
    <line x1="8" y1="2" x2="8" y2="6"/>
    <line x1="3" y1="10" x2="21" y2="10"/>
  </svg>`,
  chevronDown: `<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <polyline points="6 9 12 15 18 9"/>
  </svg>`,
  download: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
    <polyline points="7 10 12 15 17 10"/>
    <line x1="12" y1="15" x2="12" y2="3"/>
  </svg>`
};
class SplitView {
  constructor(chartContext, leftContent, rightContent, options = {}) {
    this.chartContext = chartContext;
    this.leftContent = leftContent;
    this.rightContent = rightContent;
    this.options = options;
    this.isDragging = false;
    this.mouseMoveHandler = null;
    this.mouseUpHandler = null;
  }
  getSplitViewStyles() {
    return `
    .split-view-container {
      display: flex !important;
      height: 100%;
      width: 100%;
      position: relative;
      box-sizing: border-box;
      overflow-x: hidden;
      overflow-y: auto;
    }

    .split-view-container .split-left-container {
      flex-grow: 0 !important;
      flex-shrink: 0 !important;
      overflow: visible;
      display: flex !important;
      flex-direction: column;
      position: relative;
      box-sizing: border-box;
      height: fit-content;
      min-height: 100%;
    }

    .split-view-container .split-right-container {
      overflow: visible;
      position: relative;
      flex: 1 !important;
      display: flex !important;
      flex-direction: column;
      min-width: 0;
      box-sizing: border-box;
      height: fit-content;
      min-height: 100%;
    }
    
    .split-view-container .split-bar-container {
      cursor: col-resize !important;
      user-select: none !important;
      height: 100%;
      align-items: center;
      background: var(--split-bar-color, #DEE2E6);
      display: flex;
      flex: 0 0 auto;
      justify-content: center;
      min-width: 8px;
      width: 8px;
      z-index: 15;
      position: sticky;
      top: 0;
      box-sizing: border-box;
      border-left: 1px solid var(--split-bar-border-color, #BBBBBB);
      border-right: 1px solid var(--split-bar-border-color, #BBBBBB);
      opacity: 1;
      visibility: visible;
      box-shadow: 0 0 3px rgba(0, 0, 0, 0.2);
      transition: background-color 0.2s ease, border-color 0.2s ease;
    }

    .split-view-container .split-bar-container:hover {
      background: var(--split-bar-hover-color, #007BFF);
      border-color: var(--split-bar-hover-border-color, #0056B3);
    }

    .split-view-container .split-bar-container .resize-handler {
      border-left: 1.5px solid var(--split-bar-handle-color, #666666);
      border-right: 1.5px solid var(--split-bar-handle-color, #666666);
      height: 20px;
      width: 4px;
      position: relative;
      pointer-events: none;
      box-sizing: border-box;
      background: rgba(102, 102, 102, 0.3);
      display: block;
      border-radius: 1px;
      margin: 0;
      padding: 0;
      opacity: 1;
      visibility: visible;
      transition: background-color 0.2s ease, border-color 0.2s ease;
    }

    .split-view-container .split-bar-container:hover .resize-handler {
      background: rgba(255, 255, 255, 0.9);
      border-color: #FFFFFF;
    }

    .split-view-container.dragging {
      user-select: none;
      cursor: col-resize;
    }

    .split-view-container.dragging * {
      pointer-events: none;
    }

    .split-view-container.dragging .split-bar-container {
      pointer-events: all;
    }

    :host .split-view-container {
      display: flex !important;
      height: auto;
      width: 100%;
      position: relative;
      box-sizing: border-box;
      overflow-y: auto; /* shadow DOM */
    }
  `;
  }
  injectStyles() {
    this.chartContext.injectStyles(this.getSplitViewStyles(), "split-view-styles", {
      priority: "normal"
    });
  }
  buildElements() {
    const { leftContainerClass = "", leftContainerWidth = 425, rightContainerClass = "" } = this.options;
    this.leftContainer = createBox(this.chartContext, {
      className: `split-left-container${leftContainerClass ? " " + leftContainerClass : ""}`,
      style: {
        flexBasis: `${leftContainerWidth}px`
      }
    });
    this.rightContainer = createBox(this.chartContext, {
      className: `split-right-container${rightContainerClass ? " " + rightContainerClass : ""}`
    });
    const resizeHandler = createBox(this.chartContext, { className: "resize-handler" });
    const clickArea = createBox(this.chartContext, { className: "split-bar-click-area" });
    clickArea.style.cssText = `
      position: absolute;
      top: 0;
      left: 50%;
      transform: translateX(-50%);
      width: 20px;
      height: 100%;
      cursor: col-resize;
      z-index: 10;
      background: transparent;
      display: block;
      box-sizing: border-box;
    `;
    this.splitBarContainer = createBox(this.chartContext, { className: "split-bar-container" });
    this.splitBarContainer.setAttribute("role", "separator");
    this.splitBarContainer.setAttribute("aria-orientation", "vertical");
    this.splitBarContainer.setAttribute("aria-label", "Resize panels");
    this.splitBarContainer.setAttribute("tabindex", "0");
    this.splitBarContainer.append(resizeHandler, clickArea);
    if (lodashExports.isArray(this.leftContent)) {
      this.leftContainer.append(...this.leftContent);
    } else {
      this.leftContainer.append(this.leftContent);
    }
    if (lodashExports.isArray(this.rightContent)) {
      this.rightContainer.append(...this.rightContent);
    } else {
      this.rightContainer.append(this.rightContent);
    }
  }
  attachEventListeners() {
    this.splitBarContainer.addEventListener("mousedown", (e) => {
      e.preventDefault();
      this.isDragging = true;
      const container = this.splitBarContainer.closest(".split-view-container");
      container == null ? void 0 : container.classList.add("dragging");
      this.mouseMoveHandler = (moveEvent) => {
        var _a;
        if (!this.isDragging)
          return;
        const containerRect = (_a = this.leftContainer.parentElement) == null ? void 0 : _a.getBoundingClientRect();
        if (!containerRect)
          return;
        const newWidth = moveEvent.clientX - containerRect.left;
        const minWidth = 50;
        const maxWidth = containerRect.width - 100;
        const clampedWidth = Math.max(minWidth, Math.min(maxWidth, newWidth));
        this.leftContainer.style.flexBasis = `${clampedWidth}px`;
        this.dispatchResizeEvent();
      };
      this.mouseUpHandler = () => {
        this.isDragging = false;
        const container2 = this.splitBarContainer.closest(".split-view-container");
        container2 == null ? void 0 : container2.classList.remove("dragging");
        this.dispatchResizeEvent();
        if (this.mouseMoveHandler) {
          this.chartContext.removeEventListener("mousemove", this.mouseMoveHandler);
          this.mouseMoveHandler = null;
        }
        if (this.mouseUpHandler) {
          this.chartContext.removeEventListener("mouseup", this.mouseUpHandler);
          this.mouseUpHandler = null;
        }
      };
      this.chartContext.addEventListener("mousemove", this.mouseMoveHandler);
      this.chartContext.addEventListener("mouseup", this.mouseUpHandler);
    });
    this.splitBarContainer.addEventListener("keydown", (e) => {
      const step = 10;
      let newWidth;
      const currentWidth = parseInt(this.leftContainer.style.flexBasis) || this.options.leftContainerWidth || 400;
      switch (e.key) {
        case "ArrowLeft":
          e.preventDefault();
          newWidth = Math.max(50, currentWidth - step);
          this.leftContainer.style.flexBasis = `${newWidth}px`;
          break;
        case "ArrowRight":
          e.preventDefault();
          newWidth = currentWidth + step;
          this.leftContainer.style.flexBasis = `${newWidth}px`;
          break;
        case "Home":
          e.preventDefault();
          this.leftContainer.style.flexBasis = "50px";
          break;
        case "End": {
          e.preventDefault();
          const container = this.splitBarContainer.parentElement;
          if (container) {
            const maxWidth = container.clientWidth - 100;
            this.leftContainer.style.flexBasis = `${maxWidth}px`;
          }
          break;
        }
      }
    });
  }
  dispatchResizeEvent() {
    const event = new CustomEvent("splitview-resize", {
      bubbles: true,
      detail: {
        leftWidth: parseInt(this.leftContainer.style.flexBasis) || 0
      }
    });
    this.chartContext.dispatchEvent(event);
  }
  cleanupEventListeners() {
    if (this.mouseMoveHandler) {
      this.chartContext.removeEventListener("mousemove", this.mouseMoveHandler);
      this.mouseMoveHandler = null;
    }
    if (this.mouseUpHandler) {
      this.chartContext.removeEventListener("mouseup", this.mouseUpHandler);
      this.mouseUpHandler = null;
    }
  }
  render() {
    this.injectStyles();
    this.buildElements();
    this.attachEventListeners();
    const splitViewContainer = createBox(this.chartContext, { className: "split-view-container" });
    splitViewContainer.append(this.leftContainer, this.splitBarContainer, this.rightContainer);
    return [splitViewContainer];
  }
  destroy() {
    this.cleanupEventListeners();
  }
}
class GanttStateManager {
  constructor() {
    this.state = {
      scrollPosition: { horizontal: 0, tasksVertical: 0, timelineVertical: 0 },
      viewMode: ViewMode.Week,
      collapsedTasks: /* @__PURE__ */ new Set()
    };
  }
  /**
   * capture current state before re-render
   */
  captureState(element, dataManager, viewMode) {
    const horizontalScroll = element.querySelector(".timeline-horizontal-scroll");
    const tasksBodyWrapper = element.querySelector(".tasks-body-wrapper");
    const timelineBodyWrapper = element.querySelector(".timeline-body-wrapper");
    this.state.scrollPosition = {
      horizontal: (horizontalScroll == null ? void 0 : horizontalScroll.scrollLeft) || 0,
      tasksVertical: (tasksBodyWrapper == null ? void 0 : tasksBodyWrapper.scrollTop) || 0,
      timelineVertical: (timelineBodyWrapper == null ? void 0 : timelineBodyWrapper.scrollTop) || 0
    };
    this.state.viewMode = viewMode;
    this.state.collapsedTasks = new Set(
      dataManager.getFlatTasks().filter((task) => task.collapsed).map((task) => task.id)
    );
  }
  /**
   * restore state after re-render
   */
  restoreState(element, skipScroll = false) {
    if (!skipScroll) {
      requestAnimationFrame(() => {
        const horizontalScroll = element.querySelector(".timeline-horizontal-scroll");
        const tasksBodyWrapper = element.querySelector(".tasks-body-wrapper");
        const timelineBodyWrapper = element.querySelector(".timeline-body-wrapper");
        if (horizontalScroll) {
          horizontalScroll.scrollLeft = this.state.scrollPosition.horizontal;
        }
        if (tasksBodyWrapper) {
          tasksBodyWrapper.scrollTop = this.state.scrollPosition.tasksVertical;
        }
        if (timelineBodyWrapper) {
          timelineBodyWrapper.scrollTop = this.state.scrollPosition.timelineVertical;
          const timelineHeader = element.querySelector(".timeline-header");
          if (timelineHeader) {
            timelineHeader.scrollLeft = this.state.scrollPosition.horizontal;
          }
        }
      });
    }
  }
  /**
   * Get stored view mode
   */
  getViewMode() {
    return this.state.viewMode;
  }
  hasState() {
    return this.state.viewMode !== void 0;
  }
  clearState() {
    this.state = {
      scrollPosition: { horizontal: 0, tasksVertical: 0, timelineVertical: 0 },
      viewMode: ViewMode.Week,
      collapsedTasks: /* @__PURE__ */ new Set()
    };
  }
}
class DataParser {
  /**
   * Extract value from nested object using dot notation path
   * @param obj - source object
   * @param path - dot notation path (e.g., 'project.task.title')
   * @returns Extracted value
   */
  static getNestedValue(obj, path) {
    if (!obj || !path) {
      return void 0;
    }
    const keys2 = path.split(".");
    let result = obj;
    for (const key of keys2) {
      if (result === null || result === void 0) {
        return void 0;
      }
      result = result[key];
    }
    return result;
  }
  /**
   * single parsing value configuration
   * @param obj - Source object
   * @param parsingValue - Either a string path or object with key and transform
   * @returns Processed value
   */
  static processParsingValue(obj, parsingValue) {
    if (typeof parsingValue === "string") {
      return this.getNestedValue(obj, parsingValue);
    }
    const { key, transform: transform2 } = parsingValue;
    const value = this.getNestedValue(obj, key);
    if (transform2 && typeof transform2 === "function") {
      try {
        return transform2(value);
      } catch (error) {
        console.warn(`DataParser: Transform function failed for key "${key}":`, error);
        return value;
      }
    }
    return value;
  }
  /**
   * Parse an array of raw data objects into TaskInput array
   * @param data - Array of raw data objects
   * @param config - Parsing configuration mapping
   * @returns Array of TaskInput objects
   */
  static parse(data2, config) {
    if (!Array.isArray(data2)) {
      console.warn("DataParser: Data must be an array");
      return [];
    }
    if (!config) {
      console.warn("DataParser: Parsing config is required");
      return [];
    }
    return data2.map((item, index) => {
      try {
        const id = this.processParsingValue(item, config.id);
        const name = this.processParsingValue(item, config.name);
        const startTime = this.processParsingValue(item, config.startTime);
        if (!id || !name || !startTime) {
          console.warn(`DataParser: Skipping item at index ${index} - missing required fields`, {
            id,
            name,
            startTime,
            rawItem: item
          });
          return null;
        }
        const taskInput = {
          id,
          name,
          startTime
        };
        if (config.endTime !== void 0) {
          const endTime = this.processParsingValue(item, config.endTime);
          if (endTime !== void 0) {
            taskInput.endTime = endTime;
          }
        }
        if (config.progress !== void 0) {
          const progress = this.processParsingValue(item, config.progress);
          if (progress !== void 0) {
            taskInput.progress = progress;
          }
        }
        if (config.type !== void 0) {
          const type = this.processParsingValue(item, config.type);
          if (type !== void 0) {
            taskInput.type = type;
          }
        }
        if (config.parentId !== void 0) {
          const parentId = this.processParsingValue(item, config.parentId);
          if (parentId !== void 0) {
            taskInput.parentId = parentId;
          }
        }
        if (config.dependency !== void 0) {
          const dependency = this.processParsingValue(item, config.dependency);
          if (dependency !== void 0) {
            taskInput.dependency = dependency;
          }
        }
        if (config.barBackgroundColor !== void 0) {
          const barBackgroundColor = this.processParsingValue(item, config.barBackgroundColor);
          if (barBackgroundColor !== void 0) {
            taskInput.barBackgroundColor = barBackgroundColor;
          }
        }
        if (config.rowBackgroundColor !== void 0) {
          const rowBackgroundColor = this.processParsingValue(item, config.rowBackgroundColor);
          if (rowBackgroundColor !== void 0) {
            taskInput.rowBackgroundColor = rowBackgroundColor;
          }
        }
        if (config.collapsed !== void 0) {
          const collapsed = this.processParsingValue(item, config.collapsed);
          if (collapsed !== void 0) {
            taskInput.collapsed = collapsed;
          }
        }
        return taskInput;
      } catch (error) {
        console.warn(`DataParser: Error parsing item at index ${index}:`, error, item);
        return null;
      }
    }).filter((task) => task !== null);
  }
  /**
   * validate parsing configuration
   * @param config - parsing configuration to validate
   * @returns true if valid, false otherwise
   */
  static validateConfig(config) {
    if (!config) {
      return false;
    }
    if (!config.id || !config.name || !config.startTime) {
      console.warn("DataParser: Parsing config must include id, name, and startTime");
      return false;
    }
    return true;
  }
}
dayjs.extend(minMax);
dayjs.extend(isSameOrBefore);
dayjs.extend(weekOfYear);
dayjs.extend(quarterOfYear);
dayjs.extend(weekday);
class ApexGantt extends BaseChart {
  constructor(element, options) {
    const instanceId = "gantt_" + Math.random().toString(36).substr(2, 9);
    super(element, instanceId);
    this.options = DefaultOptions$1;
    this.stylesInjected = false;
    this.zoomHandler = null;
    this.timelineScrollHandlers = {};
    this.isSyncingScroll = false;
    this.scrollbarResizeObserver = null;
    this.splitBarResizeHandler = null;
    const themeDefaults = getDefaultOptions(options == null ? void 0 : options.theme);
    let processedSeries;
    if (options == null ? void 0 : options.parsing) {
      if (!DataParser.validateConfig(options.parsing)) {
        console.error("ApexGantt: Invalid parsing configuration provided");
        processedSeries = [];
      } else {
        processedSeries = DataParser.parse(options.series, options.parsing);
      }
    } else {
      processedSeries = (options == null ? void 0 : options.series) || [];
    }
    this.options = {
      ...themeDefaults,
      ...options,
      series: processedSeries
    };
    this.viewMode = this.options.viewMode;
    const arrowLinkInstanceId = "arrows_" + Math.random().toString(36).substr(2, 9);
    this.arrowLink = new ArrowLink(arrowLinkInstanceId);
    this.setupShadowDOMEnvironment();
    this.dataManager = new DataManager();
    this.dataManager.setTasks(this.options.series);
    this.dataManager.setArrowLinkInstanceId(arrowLinkInstanceId);
    this.stateManager = new GanttStateManager();
  }
  // Static method to set global license
  static setLicense(key) {
    LicenseManager.setLicense(key);
  }
  setupShadowDOMEnvironment() {
    if (!this.isShadowDOM()) {
      return;
    }
    const shadowRoot = this.chartContext.getContext();
    const host = shadowRoot.host;
    if (host) {
      host.style.display = "block";
      host.style.boxSizing = "border-box";
      host.style.contain = "layout style";
    }
    if (this.element) {
      this.element.style.display = "block";
      this.element.style.boxSizing = "border-box";
    }
  }
  /**
   * Inject all required styles with context awareness
   */
  injectGanttStyles() {
    if (this.stylesInjected) {
      return;
    }
    if (this.isShadowDOM()) {
      this.injectStylesDirectly();
      return;
    }
    try {
      const stylesheets = [
        { content: GanttStyle, id: "gantt-core-styles", options: { priority: "high" } },
        { content: TimelineStyle, id: "gantt-timeline-styles" },
        { content: TableStyle, id: "gantt-table-styles" },
        { content: DialogStyle, id: "gantt-dialog-styles" },
        { content: TaskFormStyle, id: "gantt-taskform-styles" },
        { content: TooltipStyle, id: "gantt-tooltip-styles" },
        { content: ToolbarStyle, id: "gantt-toolbar-styles" },
        { content: DropdownStyle, id: "gantt-dropdown-styles" },
        { content: ScrollbarStyle, id: "gantt-scrollbar-styles" }
      ];
      this.chartContext.injectStylesheets(stylesheets);
      this.stylesInjected = true;
    } catch (error) {
      console.error("injectGanttStyles: ChartContext injection failed", error);
    }
  }
  injectStylesDirectly() {
    const shadowRoot = this.chartContext.getContext();
    if (shadowRoot.querySelector("#gantt-all-styles")) {
      this.stylesInjected = true;
      return;
    }
    const styleElement = document.createElement("style");
    styleElement.id = "gantt-all-styles";
    styleElement.textContent = `
    /* Shadow DOM CSS Reset - Critical for proper layout */
    :host {
      all: initial;
      display: block;
      contain: layout style;
    }
    
    *, *::before, *::after {
      box-sizing: border-box;
    }
    
    div, table, thead, tbody, tr, td, th {
      display: revert;
      margin: 0;
      padding: 0;
      border: 0;
    }
    
    .split-view-container,
    .gantt-container {
      display: flex !important;
      width: 100% !important;
      height: 100% !important;
    }
    
    .split-left-container,
    .split-right-container {
      display: block !important;
    }
    
    .timeline-container {
      flex: 1 !important;
      overflow: auto !important;
      position: relative !important;
    }
    
    .tasks-container {
      flex-shrink: 0 !important;
      overflow: auto !important;
    }

    ${GanttStyle}
    ${TimelineStyle}
    ${TableStyle}
    ${DialogStyle}
    ${TaskFormStyle}
    ${TooltipStyle}
    ${ToolbarStyle}
    ${DropdownStyle}
    ${ScrollbarStyle}
  `;
    shadowRoot.insertBefore(styleElement, shadowRoot.firstChild);
    this.stylesInjected = true;
  }
  /**
   * Handle watermark display based on license validation
   */
  handleWatermark() {
    const ganttContainer = this.element.querySelector(".gantt-container").parentNode;
    if (!ganttContainer) {
      return;
    }
    if (LicenseManager.isLicenseValid()) {
      Watermark.remove(ganttContainer);
    } else {
      Watermark.add(ganttContainer);
    }
  }
  setCSSVariables() {
    const {
      cellBorderColor,
      cellBorderWidth,
      fontColor,
      headerBackground,
      tooltipBGColor,
      tooltipBorderColor,
      barBackgroundColor,
      backgroundColor,
      borderColor,
      barTextColor,
      arrowColor
    } = this.options;
    this.element.style.setProperty("--cell-border-color", cellBorderColor);
    this.element.style.setProperty("--cell-border-width", cellBorderWidth);
    this.element.style.setProperty("--gantt-font-color", fontColor);
    this.element.style.setProperty("--text-color", fontColor);
    this.element.style.setProperty("--header-bg-color", headerBackground);
    this.element.style.setProperty("--header-text-color", fontColor);
    this.element.style.setProperty("--tooltip-bg-color", tooltipBGColor);
    this.element.style.setProperty("--tooltip-border-color", tooltipBorderColor);
    this.element.style.setProperty("--tooltip-text-color", fontColor);
    this.element.style.setProperty("--background-color", backgroundColor);
    this.element.style.setProperty("--border-color", borderColor);
    this.element.style.setProperty("--dialog-bg-color", backgroundColor);
    this.element.style.setProperty("--dialog-border-color", borderColor);
    this.element.style.setProperty("--button-bg-color", barBackgroundColor);
    this.element.style.setProperty("--button-text-color", barTextColor);
    this.element.style.setProperty("--button-hover-bg-color", arrowColor);
    this.element.style.setProperty("--toolbar-bg-color", backgroundColor);
    this.element.style.setProperty("--toolbar-border-color", borderColor);
    this.element.style.setProperty("--toolbar-hover-bg-color", cellBorderColor);
    this.element.style.setProperty("--scrollbar-track-color", backgroundColor);
    this.element.style.setProperty("--scrollbar-thumb-color", borderColor);
    this.element.style.setProperty("--scrollbar-thumb-hover-color", cellBorderColor);
    this.element.style.setProperty("--split-bar-color", cellBorderColor);
    this.element.style.setProperty("--split-bar-hover-color", arrowColor);
    this.element.style.setProperty("--split-bar-border-color", borderColor);
    this.element.style.setProperty("--split-bar-handle-color", fontColor);
    this.element.style.setProperty("--split-bar-hover-border-color", arrowColor);
    const isDarkTheme = this.isColorDark(backgroundColor);
    if (isDarkTheme) {
      this.element.style.setProperty("--toolbar-icon-filter", "invert(1) brightness(2)");
    } else {
      this.element.style.setProperty("--toolbar-icon-filter", "none");
    }
  }
  isColorDark(color) {
    const hex2 = color.replace("#", "");
    const r = parseInt(hex2.substr(0, 2), 16);
    const g = parseInt(hex2.substr(2, 2), 16);
    const b = parseInt(hex2.substr(4, 2), 16);
    const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
    return luminance < 0.5;
  }
  initializeTooltip() {
    const { enableTooltip, tooltipId } = this.options;
    if (enableTooltip) {
      const tooltipElement = getTooltip(this.chartContext, tooltipId);
      const existingTooltip = this.chartContext.getElementById(tooltipId);
      if (!existingTooltip) {
        console.warn("Tooltip init: Tooltip not found after creation, appending manually");
        const appendContainer = this.chartContext.getAppendContainer();
        appendContainer.appendChild(tooltipElement);
      }
    }
  }
  render(data2) {
    if (!this.element) {
      throw new Error("Element not found");
    }
    const isReRender = this.element && this.element.children.length > 0;
    if (isReRender) {
      this.stateManager.captureState(this.element, this.dataManager, this.viewMode);
    }
    const { enableResize, fontColor, fontFamily, fontSize, fontWeight, tasksContainerWidth, height: height2, width: width2 } = this.options;
    this.setupChartContainerPositioning();
    this.injectGanttStyles();
    this.setCSSVariables();
    this.initializeTooltip();
    this.element.innerHTML = "";
    const existingDimensions = this.hasExplicitDimensions();
    const normalizedHeight = this.normalizeDimension(height2);
    const normalizedWidth = this.normalizeDimension(width2);
    if (normalizedHeight === "100%" && existingDimensions.height) {
      const computedHeight = window.getComputedStyle(this.element).height;
      this.element.style.height = computedHeight;
    } else {
      this.element.style.height = normalizedHeight;
    }
    if (normalizedWidth === "100%" && existingDimensions.width) {
      const computedWidth = window.getComputedStyle(this.element).width;
      this.element.style.width = computedWidth;
    } else {
      this.element.style.width = normalizedWidth;
    }
    this.element.style.display = "flex";
    this.element.style.flexDirection = "column";
    this.element.style.boxSizing = "border-box";
    this.element.style.overflow = "hidden";
    const ganttStyles = generateStyles({
      color: fontColor,
      fontFamily,
      fontSize,
      fontWeight
    });
    const existingStyles = this.element.getAttribute("style") || "";
    this.element.setAttribute("style", existingStyles + ";" + ganttStyles);
    const actionsContainer = createBox(this.chartContext, { className: "gantt-actions-container" });
    this.renderToolbar(actionsContainer);
    const ganttContainer = createBox(this.chartContext, { className: "gantt-container" });
    const timelineElements = new TimeLine(this.viewMode, this.options, this.chartContext, this.dataManager).render();
    const tasksTable = new Tasks(this.options, this.chartContext, this.dataManager).render(this.render.bind(this));
    if (timelineElements) {
      this.createLayout(ganttContainer, tasksTable, timelineElements, enableResize, tasksContainerWidth);
    }
    this.element.appendChild(actionsContainer);
    this.element.appendChild(ganttContainer);
    const horizontalScroll = ganttContainer.querySelector(".timeline-horizontal-scroll");
    if (horizontalScroll) {
      horizontalScroll.remove();
      this.element.appendChild(horizontalScroll);
    }
    this.handleWatermark();
    this.setupRowBackgroundColors();
    this.setupZoomEventListener();
    this.setupDependencyArrowEvents();
    this.renderDependencyArrows();
    requestAnimationFrame(() => {
      this.syncTasksColumnWidths();
      this.compensateForScrollbar();
      this.updateHorizontalScrollbarContent();
      this.setupTimelineHorizontalScroll();
      this.positionHorizontalScrollbar();
      this.setupScrollbarResizeObserver();
      this.disableHeaderMousewheelScroll();
      this.fillEmptyRowsAfterRender();
    });
    if (isReRender) {
      requestAnimationFrame(() => {
        this.stateManager.restoreState(this.element);
      });
    }
    return this.element;
  }
  /**
   * Setup proper positioning for chart container to support dialogs
   */
  setupChartContainerPositioning() {
    if (this.element) {
      const computedStyle = window.getComputedStyle(this.element);
      if (computedStyle.position === "static") {
        this.element.style.position = "relative";
      }
      this.element.style.isolation = "isolate";
    }
  }
  disableHeaderMousewheelScroll() {
    const timelineHeader = this.element.querySelector(".timeline-header");
    if (!timelineHeader) {
      return;
    }
    const preventScroll = (e) => {
      e.preventDefault();
    };
    timelineHeader.addEventListener("wheel", preventScroll, { passive: false });
  }
  createLayout(ganttContainer, tasksTable, timelineElements, enableResize, tasksContainerWidth) {
    ganttContainer.style.position = "relative";
    ganttContainer.style.isolation = "isolate";
    const chartInstanceId = this.getInstanceId();
    const tasksContainer = createBox(this.chartContext, { className: "tasks-container" });
    let tasksHeader;
    let tasksBody;
    if (Array.isArray(tasksTable)) {
      tasksHeader = tasksTable[0];
      tasksBody = tasksTable[1];
    } else {
      console.error("Tasks table should be an array of [header, body]");
      return;
    }
    const tasksBodyWrapper = createBox(this.chartContext, { className: "tasks-body-wrapper" });
    tasksBodyWrapper.appendChild(tasksBody);
    tasksContainer.appendChild(tasksHeader);
    tasksContainer.appendChild(tasksBodyWrapper);
    const timelineWrapper = createBox(this.chartContext, { className: "timeline-container" });
    timelineWrapper.setAttribute("data-chart-instance", chartInstanceId);
    const header = timelineElements[0];
    timelineWrapper.appendChild(header);
    const bodyWrapper = createBox(this.chartContext, { className: "timeline-body-wrapper" });
    for (let i = 1; i < timelineElements.length - 1; i++) {
      bodyWrapper.appendChild(timelineElements[i]);
    }
    timelineWrapper.appendChild(bodyWrapper);
    const horizontalScroll = timelineElements[timelineElements.length - 1];
    if (enableResize) {
      const splitViewContainer = new SplitView(this.chartContext, tasksContainer, timelineWrapper, {
        leftContainerClass: "",
        leftContainerWidth: tasksContainerWidth,
        rightContainerClass: ""
      }).render();
      ganttContainer.append(...splitViewContainer);
    } else {
      tasksContainer.style.flex = `0 0 ${tasksContainerWidth}px`;
      ganttContainer.append(tasksContainer, timelineWrapper);
    }
    ganttContainer.appendChild(horizontalScroll);
  }
  syncTasksColumnWidths() {
    const tasksContainer = this.element.querySelector(".tasks-container");
    if (!tasksContainer) {
      return;
    }
  }
  setupScrollbarResizeObserver() {
    if (!this.element) {
      return;
    }
    if (this.scrollbarResizeObserver) {
      this.scrollbarResizeObserver.disconnect();
    }
    this.scrollbarResizeObserver = new ResizeObserver(() => {
      this.positionHorizontalScrollbar();
    });
    this.scrollbarResizeObserver.observe(this.element);
    const ganttContainer = this.element.querySelector(".gantt-container");
    if (ganttContainer) {
      this.scrollbarResizeObserver.observe(ganttContainer);
    }
    this.setupSplitBarResizeListener();
  }
  setupSplitBarResizeListener() {
    if (this.splitBarResizeHandler) {
      this.chartContext.removeEventListener("splitview-resize", this.splitBarResizeHandler);
    }
    this.splitBarResizeHandler = () => {
      requestAnimationFrame(() => {
        this.positionHorizontalScrollbar();
      });
    };
    this.chartContext.addEventListener("splitview-resize", this.splitBarResizeHandler);
  }
  positionHorizontalScrollbar() {
    const horizontalScroll = this.element.querySelector(".timeline-horizontal-scroll");
    const ganttContainer = this.element.querySelector(".gantt-container");
    const tasksContainer = this.element.querySelector(".tasks-container");
    if (!horizontalScroll || !ganttContainer) {
      console.warn("Missing elements for scrollbar positioning");
      return;
    }
    void ganttContainer.offsetHeight;
    const tasksWidth = tasksContainer ? tasksContainer.offsetWidth : 0;
    const splitBar = this.element.querySelector(".split-bar-container");
    const splitBarWidth = splitBar ? splitBar.offsetWidth : 0;
    const totalOffset = tasksWidth + splitBarWidth + 2;
    const computedStyle = window.getComputedStyle(this.element);
    const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;
    const paddingBottom = parseFloat(computedStyle.paddingBottom) || 0;
    horizontalScroll.style.left = `${totalOffset + paddingLeft}px`;
    horizontalScroll.style.bottom = `${paddingBottom}px`;
    const availableWidth = ganttContainer.clientWidth - totalOffset;
    horizontalScroll.style.width = `${Math.max(0, availableWidth)}px`;
  }
  compensateForScrollbar() {
    const bodyWrapper = this.element.querySelector(".tasks-body-wrapper");
    const headerContainer = this.element.querySelector(".tasks-header");
    if (!bodyWrapper || !headerContainer) {
      return;
    }
    const scrollbarWidth = bodyWrapper.offsetWidth - bodyWrapper.clientWidth;
    headerContainer.style.paddingRight = "";
    headerContainer.style.boxSizing = "";
    if (scrollbarWidth > 0) {
      headerContainer.style.paddingRight = `${scrollbarWidth}px`;
      headerContainer.style.boxSizing = "border-box";
    }
  }
  setupTimelineHorizontalScroll() {
    const horizontalScroll = this.element.querySelector(".timeline-horizontal-scroll");
    const timelineHeader = this.element.querySelector(".timeline-header");
    const timelineBodyWrapper = this.element.querySelector(".timeline-body-wrapper");
    if (!horizontalScroll || !timelineHeader || !timelineBodyWrapper) {
      return;
    }
    this.updateHorizontalScrollbarContent();
    this.applyScrollbarStylesToElement(horizontalScroll);
    if (this.timelineScrollHandlers.bodyScroll) {
      timelineBodyWrapper.removeEventListener("scroll", this.timelineScrollHandlers.bodyScroll);
    }
    if (this.timelineScrollHandlers.horizontalScroll) {
      horizontalScroll.removeEventListener("scroll", this.timelineScrollHandlers.horizontalScroll);
    }
    const handleHorizontalScroll = (e) => {
      if (this.isSyncingScroll)
        return;
      this.isSyncingScroll = true;
      const scrollLeft = horizontalScroll.scrollLeft;
      timelineHeader.scrollLeft = scrollLeft;
      timelineBodyWrapper.scrollLeft = scrollLeft;
      requestAnimationFrame(() => {
        this.isSyncingScroll = false;
      });
    };
    const handleBodyScroll = (e) => {
      if (this.isSyncingScroll)
        return;
      this.isSyncingScroll = true;
      const scrollLeft = timelineBodyWrapper.scrollLeft;
      horizontalScroll.scrollLeft = scrollLeft;
      timelineHeader.scrollLeft = scrollLeft;
      requestAnimationFrame(() => {
        this.isSyncingScroll = false;
      });
    };
    horizontalScroll.addEventListener("scroll", handleHorizontalScroll, { passive: true });
    timelineBodyWrapper.addEventListener("scroll", handleBodyScroll, { passive: true });
    this.timelineScrollHandlers = {
      horizontalScroll: handleHorizontalScroll,
      bodyScroll: handleBodyScroll
    };
  }
  applyScrollbarStylesToElement(element) {
    const { backgroundColor } = this.options;
    if (!this.isColorDark(backgroundColor)) {
      return;
    }
    const { borderColor, cellBorderColor } = this.options;
    const styleId = `scrollbar-${this.getInstanceId()}-${Date.now()}`;
    const scrollbarStyles = `
    #${element.id || "timeline-horizontal-scroll"} {
      scrollbar-width: thin;
      scrollbar-color: ${borderColor} ${backgroundColor};
    }
    
    #${element.id || "timeline-horizontal-scroll"}::-webkit-scrollbar {
      width: 12px;
      height: 12px;
    }
    
    #${element.id || "timeline-horizontal-scroll"}::-webkit-scrollbar-track {
      background: ${backgroundColor};
      border-radius: 4px;
    }
    
    #${element.id || "timeline-horizontal-scroll"}::-webkit-scrollbar-thumb {
      background: ${borderColor};
      border-radius: 4px;
      border: 2px solid ${backgroundColor};
    }
    
    #${element.id || "timeline-horizontal-scroll"}::-webkit-scrollbar-thumb:hover {
      background: ${cellBorderColor};
    }
  `;
    if (!element.id) {
      element.id = `timeline-horizontal-scroll-${this.getInstanceId()}`;
    }
    this.chartContext.injectStyles(scrollbarStyles, styleId);
  }
  setupZoomEventListener() {
    const chartInstanceId = this.getInstanceId();
    const timelineElement = this.chartContext.querySelector(
      `.timeline-container[data-chart-instance="${chartInstanceId}"]`
    );
    if (!timelineElement) {
      console.warn(`[${chartInstanceId}] Timeline element not found for zoom listener`);
      return;
    }
    if (this.zoomHandler) {
      timelineElement.removeEventListener("wheel", this.zoomHandler);
    }
    this.zoomHandler = (e) => {
      if (!e.ctrlKey) {
        return;
      }
      e.preventDefault();
      const delta = Math.sign(e.deltaY);
      if (delta < 0) {
        this.zoomIn();
      } else if (delta > 0) {
        this.zoomOut();
      }
    };
    timelineElement.addEventListener("wheel", this.zoomHandler);
  }
  setupRowBackgroundColors() {
    this.dataManager.getTopParentTasks().forEach((task, index) => {
      const bgColor = getRowBackgroundColor(index, this.options.rowBackgroundColors);
      setTaskRowBackgroundColor(this.chartContext, task.id, task.rowBackgroundColor || bgColor);
      this.dataManager.getNestedChildTasks(task.id, true).forEach((childTask) => {
        setTaskRowBackgroundColor(this.chartContext, childTask.id, childTask.rowBackgroundColor || bgColor);
      });
    });
    this.dataManager.getFlatTasks().forEach((task, index) => {
      if (!task.parentId && task.type === TaskType.Milestone) {
        const bgColor = getRowBackgroundColor(index, this.options.rowBackgroundColors);
        setTaskRowBackgroundColor(this.chartContext, task.id, task.rowBackgroundColor || bgColor);
      }
    });
  }
  renderDependencyArrows() {
    const { rowHeight } = this.options;
    const chartInstanceId = this.getInstanceId();
    const arrowLinkInstanceId = this.arrowLink.getInstanceId();
    const tasksWithDependency = this.dataManager.getFlatVisibleTasks().filter((task) => !!task.dependency).map((task) => {
      const sourceSelector = `.bar-container [data-taskid="${task.dependency}"][data-chart-instance="${chartInstanceId}"]`;
      const targetSelector = `.bar-container [data-taskid="${task.id}"][data-chart-instance="${chartInstanceId}"]`;
      const source = this.element.querySelector(sourceSelector);
      const target = this.element.querySelector(targetSelector);
      return {
        id: `${task.dependency}-${task.id}`,
        source,
        target
      };
    }).filter((edge) => edge.source && edge.target);
    const timelineBody = this.element.querySelector(".timeline-body");
    if (!timelineBody) {
      console.warn(`[${chartInstanceId}] Timeline body not found for arrows`);
      return;
    }
    const svgId = `timeline-arrows-${arrowLinkInstanceId}`;
    const existingArrows = timelineBody.querySelector(`#${svgId}`);
    if (existingArrows) {
      existingArrows.remove();
    }
    if (tasksWithDependency.length === 0) {
      return;
    }
    this.arrowLink.render(
      timelineBody,
      tasksWithDependency,
      {
        arrowColor: this.options.arrowColor,
        height: timelineBody.clientHeight,
        paddingY: rowHeight / 2,
        width: timelineBody.clientWidth
      },
      this.chartContext
    );
  }
  setupDependencyArrowEvents() {
    const chartInstanceId = this.getInstanceId();
    const arrowLinkInstanceId = this.arrowLink.getInstanceId();
    this.chartContext.addEventListener("dependency-arrow-update", (e) => {
      const dependencyEvent = e;
      if (dependencyEvent.detail.chartInstanceId !== chartInstanceId) {
        return;
      }
      const eventArrowInstanceId = dependencyEvent.detail.arrowLinkInstanceId || arrowLinkInstanceId;
      updateArrow(this.chartContext, dependencyEvent.detail.fromId, dependencyEvent.detail.toId, eventArrowInstanceId);
    });
  }
  rerenderTimeline() {
    const timelineContainer = this.element.querySelector(".timeline-container");
    if (!timelineContainer)
      return;
    const header = timelineContainer.querySelector(".timeline-header");
    const bodyWrapper = timelineContainer.querySelector(".timeline-body-wrapper");
    if (header && bodyWrapper) {
      header.innerHTML = "";
      bodyWrapper.innerHTML = "";
      const timelineElements = new TimeLine(this.viewMode, this.options, this.chartContext, this.dataManager).render();
      if (timelineElements) {
        const newHeader = timelineElements[0];
        header.innerHTML = newHeader.innerHTML;
        for (let i = 1; i < timelineElements.length - 1; i++) {
          bodyWrapper.appendChild(timelineElements[i]);
        }
      }
    } else {
      timelineContainer.innerHTML = "";
      const timelineElements = new TimeLine(this.viewMode, this.options, this.chartContext, this.dataManager).render();
      if (timelineElements) {
        const newHeader = timelineElements[0];
        timelineContainer.appendChild(newHeader);
        const newBodyWrapper = createBox(this.chartContext, { className: "timeline-body-wrapper" });
        for (let i = 1; i < timelineElements.length - 1; i++) {
          newBodyWrapper.appendChild(timelineElements[i]);
        }
        timelineContainer.appendChild(newBodyWrapper);
      }
    }
    requestAnimationFrame(() => {
      this.syncTasksColumnWidths();
      this.compensateForScrollbar();
      this.updateHorizontalScrollbarContent();
      this.setupTimelineHorizontalScroll();
      this.positionHorizontalScrollbar();
      this.setupScrollbarResizeObserver();
      this.setupRowBackgroundColors();
      this.disableHeaderMousewheelScroll();
      this.fillEmptyRowsAfterRender();
    });
  }
  updateToolbarAfterZoom() {
    const actionsContainer = this.element.querySelector(".gantt-actions-container");
    if (actionsContainer) {
      this.renderToolbar(actionsContainer);
    }
  }
  cleanupEventListeners() {
    try {
      if (this.timelineScrollHandlers.bodyScroll || this.timelineScrollHandlers.horizontalScroll) {
        const horizontalScroll = this.element.querySelector(".timeline-horizontal-scroll");
        const timelineBodyWrapper = this.element.querySelector(".timeline-body-wrapper");
        if (horizontalScroll && this.timelineScrollHandlers.horizontalScroll) {
          horizontalScroll.removeEventListener("scroll", this.timelineScrollHandlers.horizontalScroll);
        }
        if (timelineBodyWrapper && this.timelineScrollHandlers.bodyScroll) {
          timelineBodyWrapper.removeEventListener("scroll", this.timelineScrollHandlers.bodyScroll);
        }
        this.timelineScrollHandlers = {};
      }
      const timelineElement = this.chartContext.querySelector(".timeline-container");
      if (timelineElement == null ? void 0 : timelineElement.parentNode) {
        const newTimelineElement = timelineElement.cloneNode(true);
        timelineElement.parentNode.replaceChild(newTimelineElement, timelineElement);
      }
    } catch (error) {
      console.warn("Error cleaning up event listeners:", error);
    }
  }
  cleanupTooltips() {
    try {
      const { enableTooltip, tooltipId } = this.options;
      if (enableTooltip) {
        const tooltip = this.chartContext.getElementById(tooltipId);
        if (tooltip) {
          tooltip.style.display = "none";
          tooltip.innerHTML = "";
          tooltip.removeAttribute("style");
          tooltip.classList.remove("visible");
          tooltip.setAttribute("aria-hidden", "true");
          if (this.isShadowDOM()) {
            tooltip.remove();
          }
        }
      }
    } catch (error) {
      console.warn("Error cleaning up tooltips:", error);
    }
  }
  cleanupDependencyArrows() {
    try {
      const timelineBody = this.element.querySelector(".timeline-body");
      if (timelineBody && this.arrowLink) {
        const arrowLinkInstanceId = this.arrowLink.getInstanceId();
        const svgId = `timeline-arrows-${arrowLinkInstanceId}`;
        const arrowSvg = timelineBody.querySelector(`#${svgId}`);
        if (arrowSvg) {
          arrowSvg.remove();
        }
        const allArrows = timelineBody.querySelectorAll(`[data-edgeid]`);
        allArrows.forEach((arrow) => {
          const markerEnd = arrow.getAttribute("marker-end");
          if (markerEnd == null ? void 0 : markerEnd.includes(`arrowhead-${arrowLinkInstanceId}`)) {
            arrow.remove();
          }
        });
      }
    } catch (error) {
      console.warn("Error cleaning up dependency arrows:", error);
    }
  }
  createActionButton(icon, title, disabled = false) {
    const button = this.chartContext.createElement("button");
    button.className = "gantt-action-button";
    button.innerHTML = icon;
    button.title = title;
    button.disabled = disabled;
    button.setAttribute("aria-label", title);
    return button;
  }
  createSeparator() {
    const separator = this.chartContext.createElement("div");
    separator.className = "gantt-action-separator";
    return separator;
  }
  createViewModeDisplay() {
    const display = this.chartContext.createElement("div");
    display.className = "gantt-view-mode-display";
    display.innerHTML = `${Icons.calendar} <span>${capitalize(this.viewMode)}</span>`;
    display.title = `Current view: ${capitalize(this.viewMode)}`;
    return display;
  }
  renderToolbar(container) {
    container.innerHTML = "";
    const zoomInButton = this.createActionButton(Icons.zoomIn, "Zoom In", this.viewMode === SupportedScales[0]);
    zoomInButton.addEventListener("click", () => this.zoomIn());
    const zoomOutButton = this.createActionButton(
      Icons.zoomOut,
      "Zoom Out",
      this.viewMode === SupportedScales[SupportedScales.length - 1]
    );
    zoomOutButton.addEventListener("click", () => this.zoomOut());
    const viewModeDisplay = this.createViewModeDisplay();
    const spacer = this.chartContext.createElement("div");
    spacer.className = "gantt-actions-spacer";
    container.append(zoomInButton, zoomOutButton, this.createSeparator(), viewModeDisplay);
    if (this.options.enableExport) {
      container.append(spacer);
      const exportButton = this.createActionButton(Icons.download, "Export as SVG");
      const getExportElement = () => {
        return this.element;
      };
      exportButton.addEventListener("click", () => {
        const elementToExport = getExportElement();
        if (!elementToExport) {
          console.error("Export failed: Chart element not found");
          alert("Export failed: Chart not found. Please refresh and try again.");
          return;
        }
        const ganttContainer = elementToExport.querySelector(".gantt-container");
        if (!ganttContainer) {
          console.error("Export failed: Gantt container not found in chart");
          return;
        }
        try {
          exportGantt(elementToExport);
        } catch (error) {
          console.error("Export error:", error);
          alert("Export failed. Please check the console for details.");
        }
      });
      container.append(exportButton);
    }
  }
  update(options) {
    if (this.element && !this.isDestroyed()) {
      this.stateManager.captureState(this.element, this.dataManager, this.viewMode);
    }
    const currentTheme = this.detectCurrentTheme();
    const newTheme = options.theme;
    const isThemeChanging = newTheme && newTheme !== currentTheme;
    const preservedViewMode = this.stateManager.hasState() ? this.stateManager.getViewMode() : this.viewMode;
    const resetProperties = Object.entries(options).filter(([_, value]) => value === void 0).map(([key]) => key);
    const filteredOptions = Object.entries(options).reduce((acc, [key, value]) => {
      if (value !== void 0) {
        acc[key] = value;
      }
      return acc;
    }, {});
    const targetTheme = newTheme || currentTheme;
    const themeDefaults = getDefaultOptions(targetTheme);
    let mergedOptions;
    if (isThemeChanging) {
      this.cleanupScrollbarStyles();
      const nonThemeProperties = [
        "series",
        "parsing",
        "width",
        "height",
        "viewMode",
        "rowHeight",
        "tasksContainerWidth",
        "inputDateFormat",
        "annotations",
        "enableExport",
        "enableResize",
        "enableTaskDrag",
        "enableTaskEdit",
        "enableTaskResize",
        "enableTooltip",
        "tooltipTemplate",
        "canvasStyle"
      ];
      mergedOptions = { ...themeDefaults };
      nonThemeProperties.forEach((prop) => {
        if (this.options[prop] !== void 0) {
          mergedOptions[prop] = this.options[prop];
        }
      });
      mergedOptions = { ...mergedOptions, ...filteredOptions };
    } else {
      mergedOptions = { ...themeDefaults };
      Object.entries(this.options).forEach(([key, value]) => {
        if (!resetProperties.includes(key)) {
          mergedOptions[key] = value;
        }
      });
      mergedOptions = { ...mergedOptions, ...filteredOptions };
    }
    if (!options.viewMode) {
      mergedOptions.viewMode = preservedViewMode;
    }
    let processedSeries;
    if (mergedOptions.parsing) {
      if (!DataParser.validateConfig(mergedOptions.parsing)) {
        console.error("ApexGantt: Invalid parsing configuration provided in update()");
        processedSeries = this.options.series;
      } else {
        processedSeries = DataParser.parse(mergedOptions.series, mergedOptions.parsing);
      }
    } else if (mergedOptions.series) {
      processedSeries = mergedOptions.series;
    } else {
      processedSeries = this.options.series;
    }
    this.options = {
      ...mergedOptions,
      series: processedSeries
    };
    this.viewMode = this.options.viewMode;
    this.dataManager.setTasks(this.options.series);
    this.render();
    if (this.element && !this.isDestroyed()) {
      this.stateManager.restoreState(this.element);
    }
  }
  detectCurrentTheme() {
    const currentBgColor = this.options.backgroundColor;
    return this.isColorDark(currentBgColor) ? "dark" : "light";
  }
  fillEmptyRowsAfterRender() {
    const ganttContainer = this.element.querySelector(".gantt-container");
    const timelineBody = ganttContainer == null ? void 0 : ganttContainer.querySelector(".timeline-body");
    const tasksBody = ganttContainer == null ? void 0 : ganttContainer.querySelector(".tasks-data-container");
    if (!ganttContainer || !timelineBody || !tasksBody) {
      return;
    }
    const containerHeight = ganttContainer.clientHeight;
    const existingRows = timelineBody.querySelectorAll(".timeline-data-row:not(.timeline-empty-row)");
    const existingRowCount = existingRows.length;
    const rowHeight = this.options.rowHeight;
    const totalRowsNeeded = Math.floor(containerHeight / rowHeight);
    const emptyRowsNeeded = Math.max(0, totalRowsNeeded - existingRowCount);
    if (emptyRowsNeeded === 0)
      return;
    const firstRow = timelineBody.querySelector(".timeline-data-row");
    const cellCount = firstRow ? firstRow.querySelectorAll(".timeline-data-cell").length : 0;
    if (cellCount === 0)
      return;
    for (let i = 0; i < emptyRowsNeeded; i++) {
      const emptyRow = this.createEmptyTimelineRow(i, cellCount);
      timelineBody.appendChild(emptyRow);
    }
    for (let i = 0; i < emptyRowsNeeded; i++) {
      const emptyRow = this.createEmptyTaskRow(i);
      tasksBody.appendChild(emptyRow);
    }
  }
  createEmptyTimelineRow(index, cellCount) {
    const row = createBox(this.chartContext, { className: "timeline-data-row timeline-empty-row" });
    const { rowHeight } = this.options;
    const chartInstanceId = this.getInstanceId();
    row.setAttribute("data-taskid", `empty-${index}`);
    row.setAttribute("data-chart-instance", chartInstanceId);
    row.style.height = `${rowHeight}px`;
    for (let j = 0; j < cellCount; j++) {
      const cell = createBox(this.chartContext, {
        className: "timeline-data-cell",
        style: {
          height: `${rowHeight}px`,
          minWidth: `${ColumnWidthByMode[this.viewMode]}px`
        }
      });
      cell.setAttribute("data-chart-instance", chartInstanceId);
      row.appendChild(cell);
    }
    return row;
  }
  createEmptyTaskRow(index) {
    const row = createBox(this.chartContext, { className: "tasks-data-row tasks-empty-row" });
    const { rowHeight, fontColor } = this.options;
    const chartInstanceId = this.getInstanceId();
    row.setAttribute("data-taskid", `empty-${index}`);
    row.setAttribute("data-chart-instance", chartInstanceId);
    row.style.height = `${rowHeight}px`;
    ColumnList.forEach(({ key, width: width2 }) => {
      const cell = createBox(this.chartContext, {
        className: "tasks-data-cell",
        content: ""
      });
      cell.setAttribute("data-columnid", key);
      cell.setAttribute("data-chart-instance", chartInstanceId);
      cell.style.height = `${rowHeight}px`;
      cell.style.color = fontColor;
      if (width2) {
        cell.style.width = width2;
        cell.style.minWidth = width2;
        cell.style.flexBasis = width2;
      }
      row.appendChild(cell);
    });
    return row;
  }
  cleanupScrollbarStyles() {
    try {
      this.chartContext.getInjectedStyleIds().filter((id) => id.startsWith(`scrollbar-${this.getInstanceId()}`)).forEach((id) => this.chartContext.removeStyles(id));
      const horizontalScroll = this.element.querySelector(".timeline-horizontal-scroll");
      if (horizontalScroll) {
        const width2 = horizontalScroll.style.width;
        const left = horizontalScroll.style.left;
        const bottom = horizontalScroll.style.bottom;
        horizontalScroll.removeAttribute("style");
        if (width2)
          horizontalScroll.style.width = width2;
        if (left)
          horizontalScroll.style.left = left;
        if (bottom)
          horizontalScroll.style.bottom = bottom;
      }
    } catch (error) {
      console.warn("Error cleaning up scrollbar styles:", error);
    }
  }
  updateTask(taskId, updatedTask) {
    const task = this.dataManager.getTaskById(taskId);
    if (!task) {
      throw new Error(`Task with ID ${taskId} not found`);
    }
    const [ganttStartDate] = this.dataManager.getDateRange(0, this.viewMode);
    updateTaskInUI(
      this.chartContext,
      this.dataManager,
      taskId,
      updatedTask,
      this.options,
      this.viewMode,
      ganttStartDate
    );
  }
  zoomIn() {
    if (this.viewMode === SupportedScales[0]) {
      return;
    }
    const currentIndex = SupportedScales.findIndex((scale) => scale === this.viewMode);
    this.viewMode = SupportedScales[currentIndex - 1];
    this.updateToolbarAfterZoom();
    this.rerenderTimeline();
    this.renderDependencyArrows();
    requestAnimationFrame(() => {
      this.updateHorizontalScrollbarContent();
      this.positionHorizontalScrollbar();
    });
  }
  zoomOut() {
    if (this.viewMode === SupportedScales[SupportedScales.length - 1]) {
      return;
    }
    const currentIndex = SupportedScales.findIndex((scale) => scale === this.viewMode);
    this.viewMode = SupportedScales[currentIndex + 1];
    this.updateToolbarAfterZoom();
    this.rerenderTimeline();
    this.renderDependencyArrows();
    requestAnimationFrame(() => {
      this.updateHorizontalScrollbarContent();
      this.positionHorizontalScrollbar();
    });
  }
  /**
   * update the horizontal scrollbar's content width to match timeline width
   */
  updateHorizontalScrollbarContent() {
    const horizontalScroll = this.element.querySelector(".timeline-horizontal-scroll");
    const scrollContent = horizontalScroll == null ? void 0 : horizontalScroll.querySelector(".timeline-horizontal-scroll-content");
    const timelineBody = this.element.querySelector(".timeline-body");
    if (!horizontalScroll || !scrollContent || !timelineBody) {
      console.warn("Scrollbar update: Missing elements", {
        horizontalScroll: !!horizontalScroll,
        scrollContent: !!scrollContent,
        timelineBody: !!timelineBody
      });
      return;
    }
    const contentWidth = timelineBody.scrollWidth;
    scrollContent.style.width = `${contentWidth}px`;
  }
  /**
   * Check if element already has explicit dimensions from CSS
   */
  hasExplicitDimensions() {
    const computedStyle = window.getComputedStyle(this.element);
    const height2 = computedStyle.height;
    const width2 = computedStyle.width;
    return {
      height: height2 !== "auto" && height2 !== "0px",
      width: width2 !== "auto" && width2 !== "0px"
    };
  }
  /**
   * Normalize dimension value to CSS string
   */
  normalizeDimension(value) {
    if (typeof value === "number") {
      return `${value}px`;
    }
    return value;
  }
  destroy() {
    try {
      if (this.zoomHandler) {
        const chartInstanceId = this.getInstanceId();
        const timelineElement = this.chartContext.querySelector(
          `.timeline-container[data-chart-instance="${chartInstanceId}"]`
        );
        if (timelineElement) {
          timelineElement.removeEventListener("wheel", this.zoomHandler);
        }
        this.zoomHandler = null;
      }
      if (this.timelineScrollHandlers.bodyScroll) {
        const horizontalScroll2 = this.element.querySelector(".timeline-horizontal-scroll");
        if (horizontalScroll2 && this.timelineScrollHandlers.bodyScroll) {
          horizontalScroll2.removeEventListener("scroll", this.timelineScrollHandlers.bodyScroll);
        }
        this.timelineScrollHandlers = {};
      }
      if (this.scrollbarResizeObserver) {
        this.scrollbarResizeObserver.disconnect();
        this.scrollbarResizeObserver = null;
      }
      this.cleanupEventListeners();
      this.cleanupTooltips();
      this.cleanupDependencyArrows();
      if (this.splitBarResizeHandler) {
        this.chartContext.removeEventListener("splitview-resize", this.splitBarResizeHandler);
        this.splitBarResizeHandler = null;
      }
      const horizontalScroll = this.element.querySelector(".timeline-horizontal-scroll");
      if (horizontalScroll == null ? void 0 : horizontalScroll.id) {
        this.chartContext.getInjectedStyleIds().filter((id) => id.startsWith(`scrollbar-${this.getInstanceId()}`)).forEach((id) => this.chartContext.removeStyles(id));
      }
      this.element.innerHTML = "";
      super.destroy();
      this.stylesInjected = false;
    } catch (error) {
      console.error("Error during ApexGantt destruction:", error);
    }
  }
  isDestroyed() {
    return !this.element || this.element.innerHTML === "";
  }
}
const LightTheme = {
  tooltipBGColor: "#FFFFFF",
  tooltipBorderColor: "#CCCCCC",
  tooltipTextColor: "#333333",
  cellBorderColor: "#EFF0F0",
  rowBackgroundColors: ["#FFFFFF", "#F9F9F9"],
  headerBackground: "#F3F3F3",
  headerTextColor: "#333333",
  barBackgroundColor: "#87B7FE",
  barTextColor: "#FFFFFF",
  arrowColor: "#0D6EFD",
  backgroundColor: "#FFFFFF",
  textColor: "#000000",
  borderColor: "#DFE0E1",
  annotationBgColor: "#F9D1FC",
  annotationBorderColor: "#E273EA",
  dialogBgColor: "#FFFFFF",
  dialogBorderColor: "#EEEEEE",
  buttonBgColor: "#0066CC",
  buttonTextColor: "#FFFFFF",
  buttonHoverBgColor: "#0052A3",
  toolbarBgColor: "#FFFFFF",
  toolbarBorderColor: "#BCBCBC",
  toolbarHoverBgColor: "#F8F9FA",
  scrollbarTrackColor: "#F5F5F5",
  scrollbarThumbColor: "#C1C1C1",
  scrollbarThumbHoverColor: "#A8A8A8",
  splitBarColor: "#DEE2E6",
  splitBarHoverColor: "#007BFF",
  splitBarBorderColor: "#BBBBBB",
  splitBarHandleColor: "#666666"
};
const DarkTheme = {
  tooltipBGColor: "#2D2D2D",
  tooltipBorderColor: "#444444",
  tooltipTextColor: "#E0E0E0",
  cellBorderColor: "#3A3A3A",
  rowBackgroundColors: ["#1E1E1E", "#252525"],
  headerBackground: "#2A2A2A",
  headerTextColor: "#E0E0E0",
  barBackgroundColor: "#5B8DEE",
  barTextColor: "#FFFFFF",
  arrowColor: "#4A9EFF",
  backgroundColor: "#1E1E1E",
  textColor: "#E0E0E0",
  borderColor: "#3A3A3A",
  annotationBgColor: "#4A2D4D",
  annotationBorderColor: "#8B4D8F",
  dialogBgColor: "#2D2D2D",
  dialogBorderColor: "#444444",
  buttonBgColor: "#0D6EFD",
  buttonTextColor: "#FFFFFF",
  buttonHoverBgColor: "#0B5ED7",
  toolbarBgColor: "#2D2D2D",
  toolbarBorderColor: "#444444",
  toolbarHoverBgColor: "#3A3A3A",
  scrollbarTrackColor: "#000",
  scrollbarThumbColor: "#4A4A4A",
  scrollbarThumbHoverColor: "#5A5A5A",
  splitBarColor: "#3A3A3A",
  splitBarHoverColor: "#4A9EFF",
  splitBarBorderColor: "#4A4A4A",
  splitBarHandleColor: "#666666"
};
function getTheme(mode) {
  return mode === "dark" ? DarkTheme : LightTheme;
}
if (typeof window !== "undefined") {
  window.ApexGantt = ApexGantt;
}
export {
  ApexGantt,
  DarkTheme,
  DataParser,
  GanttEvents,
  LightTheme,
  ViewMode,
  ApexGantt as default,
  getTheme
};
